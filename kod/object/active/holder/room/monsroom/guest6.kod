% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Guest6 is MonsterRoom

constants:

   include blakston.khd

   SECTOR_DOOR = 3
   SECTOR_NODE1 = 4
   SECTOR_NODE2 = 5

   SLAM_TIME = 2000
   FIGHT_TIME = 10000

   MIN_GEN_ROW = 29
   MIN_GEN_COL = 3
   MAX_GEN_ROW = 37
   MAX_GEN_COL = 8

   MIN_FINAL_ROW = 27
   MIN_FINAL_COL = 1
   MAX_FINAL_ROW = 40
   MAX_FINAL_COL = 9

   MIN_FINAL_ROW2 = 16
   MIN_FINAL_COL2 = 1
   MAX_FINAL_ROW2 = 28
   MAX_FINAL_COL2 = 2
   
   HALL_EAST = 3
   HALL_NORTH = 15


   COUNT_PLAYERS = 1
   COUNT_MONSTERS = 2

resources:

   room_name_guest6 = "Mausoleum"
   room_guest6 = guest6.roo
   guest6_music = nec03.mp3

   guest6_signname = "Zaubersprüche"
   guest6_sign = "Es gibt mehr als 120 Zaubersprüche in Meridian. Wir haben Dir einen der höheren Sprüche gegeben, um ein wenig zu üben: den Feuerball-Spruch.\n\nZu Deinen Füßen befindet sich eine Grube voll streunender Mumien. Als erstes musst Du die BILD-NACH-UNTEN-Taste drücken, um Deine Sicht nach unten zu schwenken. Um wieder nach oben zu sehen, musst Du die BILD-NACH-OBEN-Taste drücken. Du kannst die Ansicht mit der POS-1-Taste zentrieren. Bedenke, dass diese Tasten auch nützlich sind, wenn Du kleinwüchsige Gegner bekämpfst.\n\nJetzt sollst Du aber erstmal die Mumien bekämpfen. Wähle aus dem ZAUBERSPRÜCHE-Menü die FAREN-SCHULE und FEUERBALL aus. Der Cursor wird sich in ein Fadenkreuz verwandeln. Richte dieses Fadenkreuz auf eine Mumie und feuere mit der linken Maustaste. Du wirst mehrere Feuerbälle benötigen, um eine Mumie zu töten.\n\nDie Anzahl der Feuerbälle, die Dir zu Verfügung stehen, ist von verschiedenen Faktoren abhängig. Du benötigst Mana und verschiedene Reagenzien (in diesem Fall Rote Pilze und Orkzähne). Glücklicherweise kannst Du im Gepäck der besiegten Mumien weitere Pilze finden."
















   guest6_signname2 = "kämpfen"
   guest6_sign2 = "Der Kampf ist in Meridian 59 nicht nur notwendig, sondern auch ziemlich einfach. Sobald Du die STRG-Taste drückst, schwingst Du die Waffe, die Du gerade aktiviert hast, in Richtung des nächsten Monsters. Du solltest dabei auf jeden Fall eine Waffe auswählen, da Du mit der Faust eigentlich kaum einen Kampf gewinnen kannst.\n\nWährend Du kämpfst, solltest Du immer auf Deine Lebensenergie achten, die mit einem Kreuz gekennzeichnet ist (oberes rechtes Eck). Fällt sie zu weit nach unten, zögere nicht, davonzulaufen! Ruhe Dich dann aus und esse etwas, um schneller zu Kräften zu kommen. Merke Dir, dass Du weder kämpfen noch rennen kannst, während Du Dich ausruhst - suche Dir deshalb immer ein Versteck.\n\nEinige der Monster, die Du im Kampf erlegst, haben Schätze bei sich, die Du verkaufen kannst. Um diese Gegenstände aufzuheben, kannst Du entweder den NEHMEN-Befehl verwenden oder sie per 'drag and drop' in Dein Gepäck übernehmen."

















   guest6_signname3 = "Zielen"
   guest6_sign3 = "Jetzt kennst Du Dich schon gut mit dem Schwertkampf und der Zauberei aus. Du bist bereit, das erweiterte Zielen auszuprobieren.\n\nDrücke ß oder ´, während Du einen Spieler oder ein Monster im Blickfeld hast, um das Zielsystem zu aktivieren. Du solltest Dein Ziel farbig umrandet sehen. Solange das Ziel so umrandet ist, werden automatisch alle Angriffe und Zauber auf dieses Ziel ausgeführt. Merke Dir: Selbst wenn das Ziel nicht mehr gesehen und getroffen werden kann, bleibt das so! Also de-markiere schnell, sobald Dein Ziel sich irgendwo versteckt und womöglich gar noch andere Gegner auf Dich eindreschen.\nIndem Du ß und ´ drückst, wechselst Du zwischen den wählbaren Zielen. Mit Escape beendest Du die Zielauswahl und kehrst zum Standard-Angriffsmodus zurück.\n\nNach kurzer Zeit wirst Du feststellen, wie nützlich das Zielsystem sein kann, besonders wenn Du Zaubersprüche verwendest. Belege einfach eine Funktionstaste mit dem Zauber Deiner Wahl, markiere ein Ziel und los geht's!"















   guest6_signname4 = "Springen"
   guest6_sign4 = "Springen ist in Meridian 59 schwierig, denn es gibt keine Sprung-Taste. Das Springen sollte daher eher als eine Art \"im-freien-Fall-laufen\" angesehen werden. Um Hindernisse zu überqueren, drücke und halte die UMSCHALT-Taste wie beim Laufen und stürze Dich wagemutig von einem Abhang, wenn eine Plattform oder Ähnliches in der Nähe zur Verfügung steht.\n\nHier kannst Du den Sprung auch gleich üben. Und wenn Du beim ersten Mal nicht gleich Erfolg hast, gar kein Problem - einfach nochmal probieren."







   
   guest6_bones_name = "Der Knochenhaufen"
   guest6_bones_icon = bonepile.bgf
   guest6_bones_desc = "Dieser Knochenhaufen ist ohne Zweifel das Überbleibsel eines Körpers, der schon vor vielen Jahren gestorben ist."



   guest6_door1_rsc = down2.wav
   
classvars:

   vrName = room_name_guest6

   % These are here so we can have different text in the guest area as opposed to the newbie area.
   vrSignName = guest6_signname
   vrSignText = guest6_sign
   
   viTeleport_row = 11
   viTeleport_col = 23

   viTerrain_type = TERRAIN_NECROPOLIS | TERRAIN_CAVES

   viDemo_base = RID_GUEST_BASE

   viPermanent_flags = ROOM_GUEST_AREA

   viPit_monsters_max = 5   % Max # of monsters in the pit area
   viPit_row = 11           % Pit generator location
   viPit_col = 4

properties:

   prRoom = room_guest6
   piRoom_num = RID_guest6

   piGenTime = 15000        % Need to regen faster since some monsters thrown out

   piBaseLight = LIGHT_DARK
   piOutside_factor = OUTDOORS_NONE

   prMusic = guest6_music

   piMonster_count_max = 20

   piPit_Monsters = 0        % Number of monsters currently in the pit area

   poLever1 = $
   poLever2 = $

   piSwitched = 0

   ptDoor = $

   pbColumn_down = FALSE

messages:

   Constructed()
   {
      plMonsters = [ [&Mummy, 50], [&MummyNoTreasure, 50] ];

      plGenerators = [ [viPit_row, viPit_col], [5, 21], [5, 36], [9, 28],
                       [17, 35], [21, 23], [25, 11], [29, 18], [37, 35], [38, 19]
                     ];

      propagate;
   }

   Delete()
   {
      if ptDoor <> $
      {
         DeleteTimer(ptDoor);
         ptDoor = $;
      }
      
      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 11, 17, viDemo_base + 2, 7, 43, SET_ANGLE_WEST, DISTANCE_NORMAL ],plExits);

      propagate;
   }

   CreateStandardObjects()
   {
      local oSign;

      oSign = Create(&sign,#desc=vrSignText,#newbie=TRUE,#name=vrSignName);
      send(self,@NewHold,#what=oSign,#new_row=11,#new_col=2,#fine_col=48);

      oSign = Create(&sign,#desc=guest6_sign2,#newbie=TRUE,#name=guest6_signname2);
      send(self,@NewHold,#what=oSign,#new_row=11,#new_col=14,#fine_row=32,#fine_col=48);
      
      oSign = Create(&sign,#desc=guest6_sign3,#newbie=TRUE,#name=guest6_signname3);
      send(self,@NewHold,#what=oSign,#new_row=11,#new_col=3,#fine_row=32,#fine_col=32);

      oSign = Create(&sign,#desc=guest6_sign4,#newbie=TRUE,#name=guest6_signname4);
      send(self,@NewHold,#what=oSign,#new_row=29,#new_col=30,#fine_row=0,#fine_col=32);
      
      oSign = Create(&Skull);
      Send(self,@NewHold,#what=oSign,#new_row=11,#new_col=21,#fine_row=32,#fine_col=40);

      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=3,#new_col=18,#fine_row=0,#fine_col=8);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=5,#new_col=14,#fine_row=32,#fine_col=40);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=19,#new_col=18,#fine_row=0,#fine_col=40);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=22,#new_col=11,#fine_row=24,#fine_col=56);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=23,#new_col=8,#fine_row=40,#fine_col=16);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=25,#new_col=14,#fine_row=0,#fine_col=40);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=32,#new_col=14,#fine_row=0,#fine_col=40);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=30,#new_col=40,#fine_row=0,#fine_col=24);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=27,#new_col=33,#fine_row=40,#fine_col=0);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=19,#new_col=32,#fine_row=40,#fine_col=0);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=17,#new_col=40,#fine_row=0,#fine_col=24);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=13,#new_col=40,#fine_row=0,#fine_col=24);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=9,#new_col=34,#fine_row=0,#fine_col=24);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=4,#new_col=28,#fine_row=40,#fine_col=0);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=2,#new_col=26,#fine_row=0,#fine_col=40);
      oSign = Create(&sign,#desc=guest6_bones_desc,#name=guest6_bones_name,
                     #icon=guest6_bones_icon);
      Send(self,@NewHold,#what=oSign,#new_row=2,#new_col=40,#fine_row=0,#fine_col=24);

      Send(self,@NewHold,#what=Create(&Brazier),#new_row=9,#new_col=18,
           #fine_row=0,#fine_col=48);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=14,#new_col=18,
           #fine_row=0,#fine_col=48);

      Send(self,@CreateLevers);
      Send(self,@SetupColumnDown);

      % Lighting
      send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_FIRE,#iIntensity=45),
           #new_row=11,#new_col=2,#fine_row=32,#fine_col=48);

      propagate;
   }

   CreateLevers()
   {
      if poLever1 = $
      {
         poLever1 = Create(&GuestLever);
         Send(self,@NewHold,#what=poLever1,#new_row=27,#new_col=4);
      }
      
      if poLever2 = $
      {
         poLever2 = Create(&GuestLever);
         Send(self,@NewHold,#what=poLever2,#new_row=27,#new_col=9);
      }

      return;
   }

   ReqNewHold(what = $, new_row = $, new_col = $)
   % Only allow a certain # of monsters in the pit
   {
      if IsClass(what, &MummyNoTreasure) and piPit_Monsters >= viPit_Monsters_max
      {
         return FALSE;
      }

      % Allow only wimpy mummies in the pit
      if not IsClass(what, &MummyNoTreasure) and 
      new_row = viPit_row and new_col = viPit_col
      {
         return FALSE;
      }

      % Wimpy mummies appear only in the pit
      if IsClass(what, &MummyNoTreasure) and 
      (new_row <> viPit_row or new_col <> viPit_col)
      {
         return FALSE;
      }

      propagate;
   }

   FirstUserEntered()
   {
      post(self,@NewHold,#what=Create(&MummyNoTreasure),#new_row=viPit_row,#new_col=viPit_col);
      post(self,@ResetMonstersInFinal);

      propagate;
   }

   NewHold(what = $, new_row = $, new_col = $)
   {
      if IsClass(what, &MummyNoTreasure)
      {
         piPit_Monsters = piPit_Monsters + 1;
      }
      
      propagate;
   }

   LeaveHold(what = $)
   {
      if IsClass(what, &MummyNoTreasure)
      {
         piPit_Monsters = piPit_Monsters - 1;
      }

      if what = poLever1
      {
         poLever1 = $;
         
         propagate;
      }
      
      if what = poLever2
      {
         poLever2 = $;
         
         propagate;
      }

      propagate;
   }

   SomethingKilled(what = $,victim = $)
   {
      if IsClass(victim,&Monster)
      {
         % gotta post because here it's not removed from room yet
         Post(self,@CheckAllDeadMonsters);
      }
      
      propagate;
   }

   LeverChanged(what = $)
   {
      local iSwitched;

      Send(self,@SomethingWaveRoom,#wave_rsc=guest6_door1_rsc,#what=what);

      iSwitched = 0;
      if Send(poLever1,@IsSwitched)
      {
         iSwitched = iSwitched + 1;
      }
      
      if Send(poLever2,@IsSwitched)
      {
         iSwitched = iSwitched + 1;
      }

      if ptDoor <> $
      {
         DeleteTimer(ptDoor);
         ptDoor = $;
      }

      if iSwitched = 1
      {
         Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=128,#speed=16);
         ptDoor = CreateTimer(self,@SlamTimer,SLAM_TIME);
      }
      
      if iSwitched = 2
      {
         Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=172,#speed=16);
         ptDoor = CreateTimer(self,@FightTimer,FIGHT_TIME);
      }

      piSwitched = iSwitched;

      return;
   }

   TestOpenDoor()
   {
      Send(poLever1,@SetSwitched,#switched=TRUE);
      Send(poLever2,@SetSwitched,#switched=TRUE);

      piSwitched = 2;

      Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=172,#speed=16);
      ptDoor = CreateTimer(self,@FightTimer,FIGHT_TIME);

      return;
   }


   ResetPuzzle()
   {
      send(self,@SlamTimer);
      
      return;
   }


   SlamTimer()
   {
      ptDoor = $;

      if GetTime() > 59871006
      {
         piMonster_count_max = piMonster_count_max + 1;
      }

      Send(self,@SomethingWaveRoom,#wave_rsc=guest6_door1_rsc,#what=poLever1);
      Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=84,#speed=128);

      Send(poLever1,@SetSwitched,#switched=FALSE);
      Send(poLever2,@SetSwitched,#switched=FALSE);

      return;
   }

   FightTimer()
   {
      ptDoor = $;

      if Send(self,@CountInFinal,#count=COUNT_PLAYERS) = 0
      {
         Send(self,@ResetFinal);
         return;
      }
      
      ptDoor = CreateTimer(self,@FightTimer,FIGHT_TIME);
      
      return;
   }

   ResetFinal()
   {
      if ptDoor <> $
      {
         DeleteTimer(ptDoor);
         ptDoor = $;
      }

      pbColumn_down = FALSE;
      Send(self,@SetSector,#sector=SECTOR_NODE1,#animation=ANIMATE_FLOOR_LIFT,
           #height=500,#speed=0);
      Send(self,@SetSector,#sector=SECTOR_NODE2,#animation=ANIMATE_FLOOR_LIFT,
           #height=519,#speed=0);

      Send(poLever1,@SetSwitched,#switched=FALSE);
      Send(poLever2,@SetSwitched,#switched=FALSE);

      Send(self,@SomethingWaveRoom,#wave_rsc=guest6_door1_rsc,#what=poLever1);
      Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=84,#speed=0);

      Send(self,@ResetMonstersInFinal);

      return;
   }

   CheckAllDeadMonsters()
   {
      %debug(Send(self,@CountInFinal,#count=COUNT_MONSTERS));

      if pbColumn_down
      {
         return;
      }

      if Send(self,@CountInFinal,#count=COUNT_MONSTERS) = 0
         AND Send(self,@CountInFinal,#count=COUNT_PLAYERS) <> 0
      {
         Send(self,@DoColumnDown);
         pbColumn_down = TRUE;
         Send(self,@SetSector,#sector=SECTOR_NODE1,#animation=ANIMATE_FLOOR_LIFT,
              #height=105,#speed=32);
         Send(self,@SetSector,#sector=SECTOR_NODE2,#animation=ANIMATE_FLOOR_LIFT,
              #height=124,#speed=32);

         Send(self,@SomethingWaveRoom,#wave_rsc=guest6_door1_rsc,#what=poLever1);
         Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=84,#speed=0);

         ptDoor = CreateTimer(self,@FightTimer,FIGHT_TIME);
      }
      
      return;
   }

   SetupColumnDown()
   {
      Send(self,@NewHold,#what=Create(&ManaNode,#node_num=NODE_GUEST),
           #new_row=35,#new_col=5,#fine_row=0,#fine_col=0);
           
      return;
   }

   DoColumnDown()
   {
      return;
   }


   CountInFinal(count = COUNT_PLAYERS)
   "With count = COUNT_MONSTERS, count monsters in region.\n"
   "With count = COUNT_PLAYERS, count players in region."
   {
      local i,each_obj,iCount,iRow,iCol;

      iCount = 0;
      for i in plActive
      {
         each_obj = First(i);
         if count = COUNT_MONSTERS
             AND IsClass(each_obj,&Monster) 
            OR count = COUNT_PLAYERS
             AND IsClass(each_obj,&User)
         {
            iRow = Send(each_obj,@GetRow);
            
            iCol = Send(each_obj,@GetCol);
            if (iRow >= MIN_FINAL_ROW
                AND iRow <= MAX_FINAL_ROW
                AND iCol >= MIN_FINAL_COL
                AND iCol <= MAX_FINAL_COL)
               OR (iRow >= MIN_FINAL_ROW2
                   AND iRow <= MAX_FINAL_ROW2
                   AND iCol >= MIN_FINAL_COL2
                   AND iCol <= MAX_FINAL_COL2)
               OR (iCol < HALL_EAST
                   AND iRow > HALL_NORTH)
            {
               iCount = iCount + 1;
            }
         }
      }
      
      return iCount;
   }

   ResetMonstersInFinal()
   {
      local i,each_obj,iCount,iRow,iCol;

      for i in plActive
      {
         each_obj = First(i);
         if IsClass(each_obj,&Monster)
         {
            iRow = Send(each_obj,@GetRow);
            iCol = Send(each_obj,@GetCol);
            if (iRow >= MIN_FINAL_ROW
                AND iRow <= MAX_FINAL_ROW
                AND iCol >= MIN_FINAL_COL
                AND iCol <= MAX_FINAL_COL)
               OR (iCol < HALL_EAST
                   AND iRow > HALL_NORTH)
            {
               Send(each_obj,@Delete);
            }
         }
      }

      Send(self,@NewHold,#what=Create(&Mummy),#new_row=Random(MIN_GEN_ROW,MAX_GEN_ROW),
           #new_col=Random(MIN_GEN_COL,MAX_GEN_COL));
      Send(self,@NewHold,#what=Create(&Mummy),#new_row=Random(MIN_GEN_ROW,MAX_GEN_ROW),
           #new_col=Random(MIN_GEN_COL,MAX_GEN_COL));
      Send(self,@NewHold,#what=Create(&Mummy),#new_row=Random(MIN_GEN_ROW,MAX_GEN_ROW),
           #new_col=Random(MIN_GEN_COL,MAX_GEN_COL));
      Send(self,@NewHold,#what=Create(&Mummy),#new_row=Random(MIN_GEN_ROW,MAX_GEN_ROW),
           #new_col=Random(MIN_GEN_COL,MAX_GEN_COL));
      
      Send(self,@NewHold,#what=Create(&BlackMummy),#new_row=Random(MIN_GEN_ROW,MAX_GEN_ROW),
           #new_col=Random(MIN_GEN_COL,MAX_GEN_COL));
      
      return;
   }

   SeanceCheck()
   {
      return FALSE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

