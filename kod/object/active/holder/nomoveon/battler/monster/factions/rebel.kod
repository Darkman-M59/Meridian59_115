% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RebelLiege is Factions

constants:

   include blakston.khd

resources:

   RebelLiege_name_rsc = "Jonas D'Accor"
   RebelLiege_icon_rsc = wngenera.bgf
   RebelLiege_desc_rsc = "Zeit und Ärger machten Jonas D'Accor zu einem harten Mann. Er steht unerschütterlich an seinem Platz und denkt über die Zukunft des Landes nach. Die Aktionen der anderen Lehnsherren zwangen ihn zu dem Versuch, nach der Krone zu greifen. Er glaubt, dass die anderen Lehnsherren nicht stark genug sind, um zu regieren, auch wenn sie einen rechtmäßigen Anspruch auf den Thron haben. Er organisiert seine Rebellen und hofft, mehr Unterstützung für seinen Griff nach der Krone zu bekommen und Frieden und Ordnung zurückzubringen."

   RebelLiege_token_delivered_rsc = "Die Rückgabe dieses Artefakts wird dem Rat zeigen, dass man meine Macht nicht ignorieren kann. %s"
   RebelLiege_rebel_delivered_rsc = "Du bist in meiner Sache sehr loyal. Ich danke Dir."
   RebelLiege_neutral_delivered_rsc = "Bist Du auch ein Gegner der Tyrannei der gegenwärtigen Thronanwärter? Folge mir."
   RebelLiege_other_delivered_rsc = "Bedrängt Dich das Joch Deines jetzigen Lehnsherrn so sehr, dass Du mir solche Geschenke bringst? Unterstütze uns in unserem Bestreben nach einer starken Krone."
   RebelLiege_toopowered_rsc = "Im Moment kann ich aus Furcht, die Kontrolle zu verlieren, niemanden in meine Ränge aufnehmen."

   RebelLiege_already_have_spell = "Ich glaube, Du kennst bereits den %s Zauberspruch."
   RebelLiege_no_murderer = "Ich bin ein Diener des Gesetzes, und als solcher ist mein Gewissen nicht, Dir zu helfen. Bitte geh weiter."

classvars:

   viQuestID = QST_ID_REBEL_SERVICE
   viGender = GENDER_MALE
   viFaction = FACTION_REBEL
   viKarma = 0
   viAttributes = MOB_NOFIGHT | MOB_LISTEN | MOB_RANDOM | MOB_RECEIVE | MOB_NOMOVE | MOB_PERM_QUESTER | MOB_TEACHER
   viOccupation = MOB_ROLE_ROYALTY

   viHomeroom = RID_JAS_BAR
   viMyRow = 7
   viMyCol = 5
   viMyAngle = ANGLE_NORTH
   viMyFR = 32
   viMyFC = 32

properties:

   vrName = RebelLiege_name_rsc
   vrIcon = RebelLiege_icon_rsc
   vrDesc = RebelLiege_desc_rsc

messages:

   AffectMood( why = $, what = $ )
   {
      if( why = MOODMOD_FACTION_CHANGE )
      {
         if( what = FACTION_DUKE )
         {
            send( self, @SetMood, #new_mood = piMood - 25 );
         }
         if( what = FACTION_PRINCESS )
         {
            send( self, @SetMood, #new_mood = piMood - 25 );
         }
         if( what = FACTION_REBEL )
         {
            send( self, @SetMood, #new_mood = piMood + 25 );
         }
      }
      return;
   }

   Constructor()
   {
      plWantedItems=[&Token];
      propagate;
   }

   CheckWhyWanted(obj=$,who=$)
   {
      local temp_rsc;

      if isClass(obj,&Token) and Send(SYS,@GetTokenGame) <> $ and 
         Send(Send(SYS,@GetTokenGame),@IsTokenReal,#obj=obj)
      {
%         if send(who,@checkplayerflag,#flag=PFLAG_MURDERER)
%         {
%            Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE, #string=RebelLiege_no_murderer);
%            return FALSE;
%         }

         if Send(who,@GetFaction)=FACTION_REBEL
           {temp_rsc=RebelLiege_rebel_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_NEUTRAL
           {temp_rsc=RebelLiege_neutral_delivered_rsc;}
         if (Send(who,@GetFaction)=FACTION_DUKE) or (Send(who,@GetFaction)=FACTION_PRINCESS)
           {temp_rsc=RebelLiege_other_delivered_rsc;}
         if (Send(Send(SYS,@GetParliament),@GetPower,
               #faction=FACTION_REBEL)>FACTION_STRONGLY_IN) AND
           (Send(who,@GetFaction)<>FACTION_REBEL)
           { temp_rsc=RebelLiege_toopowered_rsc;} 

         Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
                 #string=RebelLiege_token_delivered_rsc,#parm1=temp_rsc);
         return TRUE;
      }
      propagate;
   }

   SetForSale()
   {
      plFor_Sale = [$,
          [ SKID_BLOCK ],
          [ SID_IDENTIFY, SID_REVEAL, SID_SHROUD,
          SID_DISPEL_ILLUSION, SID_HASTE, SID_RESIST_POISON,
          SID_GLOW_WEAPON, SID_FREE_ACTION,
          SID_SHATTERLOCK]];
      return;
   }

   CanDoTeach(who=$,sid=0)
   {
      if not send(self,@SpecialTeachChecks,#report = TRUE,#who=who,#num=sid) { return FALSE; }
      propagate;
   }
   
   CanAddSpell(who=$,num=0, report = FALSE)
   {
      if not send(self,@SpecialTeachChecks,#who=who,#num=num,#report=report) { return FALSE; }
      propagate;
   }

   SpecialTeachChecks(who=$,num=0, report = FALSE)
   {
      if who = $ or num = 0
      { DEBUG("Called SpecialTeachChecks with bad parameters!"); return FALSE; }
   
      if send(who,@HasSpell,#num=num) 
      {
         if report
         { 
            post(self,@saytoone,#target=who,#message_rsc=RebelLiege_already_have_spell,
            #parm1=send(send(SYS,@FindSpellByNum,#num=num),@GetName)); 
         }
         return FALSE;
      }

      if send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER) 
      { % won't sell to a murderer 
         if report
         { 
            Post(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE, #string=RebelLiege_no_murderer);
         }
         return FALSE;
      }
      return TRUE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

