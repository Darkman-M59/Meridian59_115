% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Minstrel is Wanderer

constants:

   include blakston.khd

resources:

   Minstrel_name_rsc = "Parrin Aragone"
   Minstrel_icon_rsc = wnminstr.bgf
   Minstrel_desc_rsc = "Parrin ist im ganzen Lande bekannt, aber nur selten wird über ihn etwas gutes gesagt. Obwohl sehr mit der Kunst der Lyrik gesegnet, veranlassen seine Texte und Wortspiele diejenigen, die gezwungen sind zuzuhören für gewöhnlich zum Stöhnen oder gar sich zu ekeln. Es existiert das Gerücht, dass Paddock ihm angedroht hat ihn umzubringen, sollte er jemals wieder einen Fuß in die Brunnenkneipe setzen. Für ein großzügiges Trinkgeld singt er vielleicht sogar von Deinen Heldentaten. Für ein noch großzügigeres verschwindet er vielleicht sogar."







classvars:

   vrName = Minstrel_name_rsc
   vrIcon = Minstrel_icon_rsc
   vrDesc = Minstrel_desc_rsc

   viAttributes = MOB_NOFIGHT | MOB_RANDOM | MOB_LISTEN | MOB_NOMOVE | MOB_RECEIVE | MOB_TEACHER | MOB_SELLER
   viOccupation = MOB_ROLE_BARD

properties:
   viQuestID = QST_ID_TRUTH_SPELL
   
messages:

   UserEntered(who = $)
   {
      if NOT (Send(who,@GetFaction) = FACTION_NEUTRAL)
      {
         send(self,@SetMood,#new_mood=piMood-4);
      }
      
      propagate;
   }

   AffectMood(what=$,why=$)
   {
      if why = MOODMOD_DAWN 
      {
         send(self,@SetMood,#new_mood=piMood+1);
         
         return;
      }
      
      if why = MOODMOD_DUSK 
      {
         send(self,@SetMood,#new_mood=piMood+3);
         
         return;
      }
      
      if why = MOODMOD_ACCEPT_ITEM
      {
         if IsClass(what,&Money)
         {
            send(self,@SetMood,#new_mood=piMood+3);
         }
      }
      
      return;
   }

   CreateDestinationList()
   {
      plDestinations = [ [RID_DUKE3, 13, 21] , [RID_CORNOTH, 16, 39, 48,16], 
                         [RID_JAS_TAVERN, 11, 9],[RID_BAR_BAR, 20, 7], [RID_CASTLE2C, 31, 23]];
      return;
   }

   SetForSale()
   {
      plFor_Sale = [$,$,[SID_TRUTH, SID_MIRTH, SID_MELANCHOLY, SID_SPELLBANE, SID_WARPTIME,
                         SID_JIG, SID_MANA_CONVERGENCE, SID_REJUVENATE, SID_DISHARMONY] ];
      return;
   }
   
   CanAddSpell(who=$,num=0)
   "We require that a quest be done before one of the spells can be learned"
   {
      if (num = SID_TRUTH
          OR num = SID_MIRTH
          OR num = SID_MELANCHOLY)
         AND NOT send(self,@HasDoneLearnQuest,#who=who)
      {
         return FALSE;
      }
      
      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

