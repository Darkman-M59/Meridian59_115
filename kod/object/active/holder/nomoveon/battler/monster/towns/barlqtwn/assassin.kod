% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Assassin is BarloqueTown

%  The assassin is little more than an empty vessel, who responds to the 
%   'say' commands of players.  This way, recreates don't have to be handled
%   special in any way, shape or form.  All of the real work of the assassin's
%   game is done by the AssassinGame object, found in the \util directory.

constants:

   include blakston.khd

resources:

   assassin_name_rsc = "Roq"
   assassin_mailname_rsc = "Roq, die dunkle Klinge"

   assassin_icon_rsc = assassin.bgf
   assassin_desc_rsc = "Diesen Mann umgibt eine missgünstige, ins Jenseits gerichtete Aura. Er hängt an den Schatten dieses schändlichen Ortes, ein Diener irgendeiner dunklen Macht."



   assassin_eyes_rsc = asseyes.bgf

   assassin_help = "Sag DOLCH, um eine Waffe für das nächste Spiel zu bekommen. Sag AUFGEBEN, um den Dolch zurückzugeben. Sag BENACHRICHTIGUNG, damit ich Dir mitteilen kann, wann das nächste Spiel beginnt. Sag KEINE BENACHRICHTIGUNG, wenn Du nicht informiert werden möchtest."




   assassin_in_session = "~IDu kannst nicht einsteigen, wenn schon ein Spiel läuft. %s."

   assassin_is_advertised = "Ich werde Dich in jedem Fall wissen lassen, wann das nächste Spiel beginnt."
   assassin_is_not_advertised = "Sag BENACHRICHTIGUNG, wenn ich Dir mitteilen soll, wann das nächste Spiel beginnt."

   assassin_already_combatant = "~IDu bist schon geächtet."
   assassin_not_ready = "~IDu bist noch nicht so weit."

   assassin_new_combatant = "~IHier ist Dein Dolch."
   assassin_not_combatant = "~IDu kannst einen Wettbewerb nicht verlassen, an dem Du nicht teilgenommen hast."

   assassin_quit_combatant = "~IErlaube mir, Deine Klinge zurückzunehmen, denn Deine Feigheit verhindert, dass Du gewinnst."


   assassin_not_yet = "~IIch nehme momentan keine Mitspieler auf. Sag BENACHRICHTIGUNG, wenn ich Dich informieren soll, wann das nächste Spiel beginnt."



   assassin_advert = "~IIch werde es Dir mitteilen, wenn das Spiel beginnt."
   assassin_already_advert = "~IDu bist schon auf der Liste. Geh' mir nicht auf die Nerven."

   assassin_stop_advert = "~IIch gebe Dir nun keine Informationen mehr."
   assassin_not_advert = "~IIch habe Dir nicht vorgeworfen, zu spät zu erscheinen. Ich weiß nicht, wovon Du redest."


   assassin_no_game = "~IMomentan läuft kein Spiel. DM ACCEPT MODE, um ein neues Spiel zu beginnen."


   assassin_already_game = "~IMomentan läuft ein Spiel. DM RESET GAME, um es zu beenden."

   assassin_not_viable = "~IEs sind noch nicht genügend Teilnehmer. DM ACCEPT MODE, um Leute teilnehmen zu lassen."


   assassin_in_accept = "~IDieses Spiel lässt weitere Teilnehmer zu. Lass Spieler DOLCH sagen, um teilzunehmen."



   % Append "word" on the end of help since assassin_help was already taken.
   assassin_help_word = "hilfe"
   assassin_blade = "Dolch"
   assassin_quit = "Aufgeben"
   assassin_advertise = "Benachrichtigung"
   assassin_no_advertise = "Keine Benachrichtigung"

   assassin_goodbye_angel = "Machs gut, Schutzengel"

   assassin_reset_game = "reset game"
   assassin_start_game = "start game"
   assassin_accept_mode = "accept mode"
   
classvars:

   vrName = assassin_name_rsc
   vrIcon = assassin_icon_rsc
   vrDesc = assassin_desc_rsc

   viDefinite = ARTICLE_NONE
   viIndefinite = ARTICLE_NONE

   viAttributes = MOB_NOMOVE | MOB_NOFIGHT | MOB_BUYER | MOB_TEACHER
   viOccupation = MOB_ROLE_ASSASSIN

   viMerchant_markup = MERCHANT_EXPENSIVE

properties:

   poAssassin_game = $

   % If true, players can make themselves killable here.
   pbBeta = FALSE                  

messages:

   Constructor()
   {
      if Send(SYS,@GetAssassinGame) = $
      {
         Send(SYS,@RecreateAssassinGame);
      }
      
      poAssassin_game = Send(SYS,@GetAssassinGame);
      
      propagate;
   }

   SomeoneSaid(what=$, string=$, type=$)
   {
      local oGame;

      % If not a player, ignore it all.
      if NOT isClass(what,&User)
      {
         propagate;
      }

      % Beta test check:  during a beta test, a player can say 'goodbye angel'
      %  to get rid of his guardian angel.
      if StringEqual(string, assassin_goodbye_angel) AND pbBeta 
         AND NOT Send(what,@checkplayerflag,#flag=PFLAG_PKILL_ENABLE)
	   {
         Send(what,@PkillEnable);
		}

      % If a player says 'help', then give him a generic bit of advice
      % on how to interface with Roq.
      if StringEqual(string, assassin_help_word)
      {
         Send(self,@SayToOne,#target=what,#message_rsc=assassin_help);
      }

      % If a player says 'blade', check to see
      %  a. if he's a legal combatant,
      %  b. if he's not already a combatant and
      %  c. if there's no match in session.
      if StringEqual(string, assassin_blade)
      {
         if NOT Send(poAssassin_game,@IsLegalCombatant,#who=what)
         {
            Post(self,@SayToOne,#target=what,#message_rsc=assassin_not_ready);
            
            return;
         }
         
         if Send(poAssassin_game,@IsCombatant,#who=what)
         {
            Post(self,@SayToOne,#target=what,
                 #message_rsc=assassin_already_combatant);
            
            return;
         }
         
         if Send(poAssassin_game,@InSession)
         {
            if Send(poAssassin_game,@IsAdvertised,#who=what)
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=assassin_in_session,
                    #parm1=assassin_is_advertised);
            }
            else
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=assassin_in_session,
                    #parm1=assassin_is_not_advertised);
            }
            
            return;
         }
         
         if NOT Send(poAssassin_game,@InAcceptMode)
         {
            Post(self,@SayToOne,#target=what,#message_rsc=Assassin_not_yet);
            
            return;
         }
         
         if Send(poAssassin_game,@NewCombatant,#who=what)
         {
            Post(self,@SayToOne,#target=what,
                 #message_rsc=Assassin_new_combatant);
            
            return;
         }
         else
         {
            DEBUG("Somehow, a player failed to become a new combatant!");
         }
      }

      % Here, the player is trying to say 'Quit' to quit the proceedings.
      %  be sure that he's actually a combatant before you kick him out.

      if StringEqual(string,assassin_quit)
      {
         if NOT Send(poAssassin_game,@IsCombatant,#who=what)
         {
            Post(self,@SayToOne,#target=what,
                 #message_rsc=Assassin_not_combatant);
            
            return;
         }
         
         if Send(poAssassin_game,@QuitCombatant,#who=what)
         {
            Post(self,@SayToOne,#target=what,
                 #message_rsc=Assassin_quit_combatant);
            
            return;
         }
         else
         {
            DEBUG("Somehow, a player failed to quit being a combatant!");
         }
      }

      % Does the player want to know when a match starts?  If so, add him
      %  to this list.  This way, people who are non-combatants can get info
      %  for the next bout, if they came in late.
      if StringEqual(string, assassin_advertise)
      {
         if NOT Send(poAssassin_game,@IsAdvertised,#who=what)
         {
            if Send(poAssassin_game,@AdvertiseTo,#who=what)
            {
               Post(self,@SayToOne,#target=what,#message_rsc=Assassin_advert);
               
               return;
            }
            else
            {
               DEBUG("Somehow, a player failed in becoming advertised to!");
            }
         }
         else
         {
            Post(self,@SayToOne,#target=what,
                 #message_rsc=Assassin_already_advert);
            
            return;
         }
      }

      if StringEqual(string, assassin_no_advertise)
      {
         if Send(poAssassin_game,@IsAdvertised,#who=what)
         {
            if Send(poAssassin_game,@StopAdvertising,#who=what)
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=Assassin_stop_advert);
               
               return;
            }
            else
            {
               DEBUG("Somehow, a player failed in stopping ads!");
            }
         }
         else
         {
            Post(self,@SayToOne,#target=what,#message_rsc=Assassin_not_advert);
            
            return;
         }
      }

      % The following are DM/actor commands to control the game.
      if type = SAY_DM
         AND Send(what,@isActor)
      {
         oGame = Send(SYS,@GetAssassinGame);

         if StringEqual(string,assassin_reset_game)
         {
            if Send(oGame,@inSession)
            {
               Send(oGame,@ResetGame,#report=TRUE);
               
               return;
            }
            else
            {
               Post(self,@SayToOne,#target=what,#message_rsc=assassin_no_game);
               
               return;
            }
         }

         if StringEqual(string,assassin_start_game)
         {
            if Send(oGame,@inSession)
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=assassin_already_game);
               
               return;
            }

            if Send(oGame,@isViableGame)
            {
               Send(oGame,@StartGame);

               return;
            }
            else
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=assassin_not_viable);

               return;
            }
         }

         if StringEqual(string, assassin_accept_mode)
         {
            if Send(oGame,@inSession)
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=assassin_already_game);

               return;
            }

            if Send(oGame,@InAcceptMode)
            {
               Post(self,@SayToOne,#target=what,
                    #message_rsc=Assassin_in_accept);

               return;
            }
            else
            {
               Send(oGame,@EnterAcceptMode);

               return;
            }
         }
      }

      propagate;
   }

   SetForSale()
   {
      plFor_sale = [$,$,
                    [ SID_EAVESDROP ],
                    $ ];
                    
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

