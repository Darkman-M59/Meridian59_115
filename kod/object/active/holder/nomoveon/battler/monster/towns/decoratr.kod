% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Decorator is Towns

constants:

   include blakston.khd
   include protocol.khd

   TOPIC_NONE = 0
   TOPIC_FLOOR = 1
   TOPIC_BED_LOCATION = 2
   TOPIC_BEDSPREAD = 3
   TOPIC_WALLPAPER = 4
   TOPIC_PAINTING = 5
   TOPIC_PAINTING_LOCATION = 6
   TOPIC_PLACE_OBJECT = 7
   TOPIC_REMOVE_OBJECT = 8

   TOPIC_TIMEOUT = 40000         % in milliseconds: 40 sec

   PRICE_TIER_1 = 100            % in shillings
   PRICE_TIER_2 = 300
   PRICE_TIER_3 = 500

   BOX_PREMIUM = 4500            % How much more expensive than tier 3 is the box?

   IMPATIENT_TIME = 120000       % in milliseconds: 2 min

   DELETE_WAIT = 750             % Time before the consultant leaves.

resources:

   Decorator_name_rsc = "Der Dekorateur"
   Decorator_icon_rsc = faerie-g.bgf
   Decorator_desc_rsc = "Als Flüchtling vor dem schrecklichen Krieg aus dem Tal der Trauer, hat sich dieser Fey Elhai von den komplizierten sozialen Zwängen der Feen abgewandt. Er lebt nun unter den Menschen und kann so seinen feinen Geschmack in einer weit größeren, kreativen Art ausleben."




   Decorator_welcome = "Seid gegrüßt. Braucht Ihr ~IHilfe~I?"

   Decorator_confused = "Verzeih, kannst Du Deine Frage einfacher stellen?"
   Decorator_room_changed = "Eine ausgezeichnete Wahl!"
   Decorator_topic_timeout = "Ich sehe, Du bist noch zu keiner Entscheidung gelangt. Kann ich Dir mit etwas anderem helfen?"


   Decorator_bed_instructions = "Bitte stelle Dich dorthin, wo das Bett hin soll und sage 'hier'."
   Decorator_painting_instructions = "Bitte stelle Dich dorthin, wo das Bild hin soll und sage 'hier'. Ich kann es nur an vier Punkten aufhängen, aber ich tue mein Bestes, um Deine Wünsche zu befriedigen."


   Decorator_object_placement = "Bitte stelle Dich dorthin, wo das Objekt hin soll und sage 'hier'."
   Decorator_object_removal = "Bitte stelle Dich näher an das Objekt, das weggeräumt werden soll."

   Decorator_bed_blocked = "Verzeih, wenn Du das Bett dort aufgestellt haben möchtest, müssen wir erst etwas Platz schaffen."

   Decorator_no_object_stacking = "Verzeih, aber da ist kein Platz mehr, um irgend etwas hinzustellen. Wenn Du auf diese Stelle bestehst, müssen wir erst etwas Platz schaffen."



   Decorator_help = "Ich bin hier, um Dir zu helfen, das Zimmer nach Deinem Geschmack einzurichten. Ich kann den Teppich oder die Tapete ändern, helfen das Bett zu verschieben, die Tagesdecke ändern, oder einfach ein Bild an eine Stelle Deiner Wahl aufhängen. Wir haben auch eine Anzahl Objekte, die Du im Zimmer platzieren oder später entfernen kannst. Ich kann alle wählbaren Objekte auflisten, wenn es Dich interessiert. Natürlich kostet jede Veränderung in Deinem Zimmer magische Energien, die wir Dir sofort berechnen wenn die Änderung gemacht wird. Ich kann Dir genaue Details über unser Preissystem zur Verfügung stellen wenn Du möchtest."










   Decorator_pricing = "Die Kosten werden in drei Stufen berechnet. Verschieben des Bettes, ändern der Tagesdecke, ein Bild umhängen oder austauschen sind die preiswertesten Optionen. Wechseln der Tapete oder des Teppichs ist teurer, aufgrund des größeren Aufwands. Die teuerste Option ist schließlich das Platzieren von Gegenständen, weil die Nachfrage nach Dekorationen sehr hoch ist und wir nur eine begrenzte Anzahl von Gegenständen haben. Wenn Du Dich aber dafür entscheidest, Gegenstände aus dem Zimmer zu entfernen, erhältst Du ein Guthaben, das bei künftigen Veränderungen verwendet werden kann. Du kannst mich jederzeit nach Deinem Guthaben fragen."











   Decorator_cant_pay = "Leider hast Du nicht genügend Rücklagen, um diese Veränderung des Zimmers zu bezahlen."

   Decorator_credit_balance = "Dein Guthaben beträgt zur Zeit %q Schillinge."
   Decorator_option_unavailable = "Es tut mir leid. Das ist im Moment nicht möglich. Möchtest Du eine andere Wahl treffen?"

   Decorator_graceful_exit = "Ah, ich verstehe. Wenn Du irgendetwas benötigst, klingle bitte."


   Decorator_list_objects = "Du kannst aus folgenden Dekorationsobjekten wählen: %q."

   Decorator_takes_heartstones = "Weißt Du, aus Herzsteinen können so manch interessante Dinge erschaffen werden."


   Decorator_impatient_1 = "Kann ich Dir irgendwie ~Ihelfen~I?"
   Decorator_impatient_2 = "Kann ich Dir irgendwie helfen? Wenn nicht, muss ich zu meinen anderen Pflichten zurückkehren."

   Decorator_impatient_3 = "Es tut mir leid, aber ich muss mich jetzt um andere Gäste kümmern. Bitte klingel wieder, wenn Du weitere Hilfe benötigst."



   % Command strings
   Decorator_command_help = "Hilfe"
   Decorator_command_pricing = "Preise"
   Decorator_command_price = "Preis"
   Decorator_command_credit = "Guthaben"
   Decorator_command_balance = "Kontostand"
   Decorator_command_list = "liste"
   Decorator_command_object = "Objekt"
   Decorator_command_item = "Gegenstand"
   Decorator_command_decorator = "Dekorateur"
   Decorator_command_consultant = "Berater"
   Decorator_command_leave = "verschwinde"
   Decorator_command_change = "ändere"
   Decorator_command_move = "verschiebe"
   Decorator_command_remove = "entferne"
   Decorator_command_location = "Ort"
   Decorator_command_place = "platziere"
   Decorator_command_put = "stelle"
   Decorator_command_floor = "Boden"
   Decorator_command_carpet = "Teppich"
   Decorator_command_bed = "Bett"
   Decorator_command_wall = "Wand"
   Decorator_command_painting = "Gemälde"
   Decorator_command_picture = "Bild"
   Decorator_command_lighten = "aufhellen"
   Decorator_command_darken = "verdunkeln"

classvars:

   vrName = Decorator_name_rsc
   vrIcon = Decorator_icon_rsc
   vrDesc = Decorator_desc_rsc
   viMerchant_markup = MERCHANT_EXPENSIVE
   viAttributes = MOB_NOFIGHT | MOB_RANDOM | MOB_NOMOVE | MOB_LISTEN | MOB_RECEIVE | MOB_SELLER
   viOccupation = MOB_ROLE_SCHOLAR
   viDefinite = ARTICLE_THE

properties:

   piDrawfx = BOUNCE_YES

   piDialogTopic = TOPIC_NONE
   ptDialogTopicTimeout = $
   poCurrentObject = $

   ptImpatient = $
   piImpatient = 0

messages:

   Constructor()
   {
       plWantedItems = [&HeartStone];
       
       propagate;
   }   

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,100, 2,3, 2,4);
      
      return;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,100, 2,1, 2,2);   
      
      return;
   }

   GetObjectFlags()
   {
      return BOUNCE_YES | OFFER_YES;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   %  SomeoneSaid()::
   %     Here is where we provide the interface for room customization
   %
   %  The philosophy here is that there are two tiers of dialog:
   %        The first sets the 'topic' or state of the dialog
   %        The second defines the action.
   %  The routine is designed to allow
   %        A topic - prompt - answer structure
   %           (e.g. player: "please change the wallpaper"
   %                 npc: "would you like red, yellow, or chartreuse wallpaper?"
   %                 player: "chartreuse would be fabulous, thanks."
   %                 npc: "an excellent choice!")
   %        A single command which establishes all the info at once.
   %           (e.g. player: "please change the wallpaper to chartreuse, if you would."
   %                 npc: "an excellent choice!")
   %
   SomeoneSaid(what = $,type = $,string = $)
   {
      local bChange, bMove, bPlace, bFloor, bRemove, bBed, bWall, bPainting, oObject, bClarify, bSuccess, iPrice;
      
      if poOwner = $ OR NOT isClass(poOwner,&RentableRoom)
      {
         propagate;
      }
      
      if (NOT isClass(what,&User)) OR what <> Send(poOwner,@GetRenter)
      {
         propagate;
      }

      % First, respond to special commands.

      if StringContain(string, Decorator_command_help)
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_help);

         return;
      }
      
      if (StringContain(string, Decorator_command_pricing)
          OR StringContain(string, Decorator_command_price))
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_pricing);

         return;
      }
      
      if (StringContain(string, Decorator_command_credit)
          OR StringContain(string, Decorator_command_balance))
      {
         Post(self,@DecoratorSayCredit);

         return;
      }
      
      if (StringContain(string, Decorator_command_list)
          AND (StringContain(string, Decorator_command_object) OR StringContain(string,Decorator_command_item)))
      {
         Post(self,@DecoratorSayObjects,#what=what);

         return;
      }

      if ((StringContain(string, Decorator_command_decorator) OR StringContain(string,Decorator_command_consultant))
         AND StringContain(string,Decorator_command_leave))
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_graceful_exit);
         Post(self,@WaitDelete);

         return;
      }

      % Second, check for lighting changes

      if StringContain(string, Decorator_command_lighten)
      {
         % Positive change to light level
         Post(poOwner,@ChangeRoomLight,#iChange=1);
         
         return;
      }

      if StringContain(string, Decorator_command_darken)
      {
         % Negative change to light level
         Post(poOwner,@ChangeRoomLight,#iChange=-1);
         
         return;
      }

      % Next, extract the 'topic' keywords, check for multiples.

      bChange = StringContain(string, Decorator_command_change);
      bRemove = StringContain(string, Decorator_command_remove);
      bMove = ((StringContain(string, Decorator_command_move) AND NOT bRemove)
                OR StringContain(string, Decorator_command_location));
      bPlace = (StringContain(string, Decorator_command_place)
                OR StringContain(string, Decorator_command_put));
      bClarify = FALSE;
      
      if (bChange + bMove + bPlace + bRemove) > 1
      {
         % Ambiguous command, so ignore both keywords but proceed to give reminder
         %  messages, if any.
         bChange = FALSE;
         bMove = FALSE;
         bPlace = FALSE;
         bRemove = FALSE;
         poCurrentObject = $;
         bClarify = TRUE;
      }
      
      bFloor = (StringContain(string, Decorator_command_floor)
                OR StringContain(string,Decorator_command_carpet));
      bBed = StringContain(string, Decorator_command_bed);
      bWall = StringContain(string, Decorator_command_wall);
      bPainting = (StringContain(string, Decorator_command_painting)
                   OR StringContain(string, Decorator_command_picture));
      oObject = Send(poOwner,@ParseObject,#string=string,#who=what,#oDecorator=self);

      if (bFloor + bBed + bWall + bPainting + (oObject <> $)) > 1
      {
         % Ambiguous command, so ignore multiple keywords but proceed to give reminder
         %  messages, if any.
         bFloor = FALSE;
         bBed = FALSE;
         bWall = FALSE;
         bPainting = FALSE;
         oObject = $;
         poCurrentObject = $;
         bClarify = TRUE;
      }
      
      if bClarify
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_confused);
      }
      
      if bChange AND bFloor
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_FLOOR);
      }
      
      if bMove AND bBed
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_BED_LOCATION);
      }
      
      if bChange AND bBed
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_BEDSPREAD);
      }
      
      if bChange AND bWall
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_WALLPAPER);
      }
      
      if (not bMove) AND bPainting
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_PAINTING);
      }
      
      if bMove AND bPainting
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_PAINTING_LOCATION);
      }
      
      if bPlace AND (oObject <> $)
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_PLACE_OBJECT);
         poCurrentObject = oObject;
      }
      
      if bRemove AND (oObject <> $)
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_REMOVE_OBJECT);
         poCurrentObject = oObject;
      }

      % A note on how the "TrySet*" fuctions work.
      % Return values:
      % TRUE means we could change it.
      % FALSE means that is not available
      % $ means we need more information
      % -> Exception is BedSector. 
      
      if piDialogTopic = TOPIC_FLOOR
      {
         iPrice = PRICE_TIER_2;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetCarpet,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetCarpetOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_BED_LOCATION
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetBedSector,#who=what,#string=string,
                            #oDecorator=self);
            if bSuccess 
            {
               Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
               Send(self,@BillRenter,#who=what,#price=iPrice);
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_room_changed);
            }
            else
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_bed_instructions);
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_BEDSPREAD
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetBedSpread,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetBedSpreadOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_WALLPAPER
      {
         iPrice = PRICE_TIER_2;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetWallpaper,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetWallpaperOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                     #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         return;
      }
      
      if piDialogTopic = TOPIC_PAINTING
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetPicture,#string=string,#bRemove=bRemove);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetPictureOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }

      if piDialogTopic = TOPIC_PAINTING_LOCATION
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetPictureLocation,#who=what,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_painting_instructions);
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_PLACE_OBJECT
      {
         iPrice = PRICE_TIER_3;
         if IsClass(poCurrentObject,&Box)
         {
            iPrice = iPrice + BOX_PREMIUM;
         }
         
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TryPlaceObject,#who=what,#string=string,
                            #template=poCurrentObject,#oDecorator=self);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_object_placement);
            }
            else
            {
               if bSuccess
               {
                  Send(poOwner,@UpdateHeartStones,#oItem=poCurrentObject);
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  poCurrentObject = $;
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }

      if piDialogTopic = TOPIC_REMOVE_OBJECT
      {
         iPrice = PRICE_TIER_3;
         
         if IsClass(poCurrentObject,&Box)
         {
            iPrice = iPrice + BOX_PREMIUM;
         }
         
         bSuccess = Send(poOwner,@TryRemoveObject,#who=what,#template=poCurrentObject);
         
         if bSuccess
         {
            Send(self,@CreditRenter,#price=iPrice);
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_room_changed);
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_object_removal);
         }
         
         Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         poCurrentObject = $;
         
         return;
      }
      
      propagate;
   }

   % These next two messages are to prevent confusion in the temp string between what the designer says
   % and what the player says.  There was problem fighting for control of the temp string.
   DecoratorSayCredit()
   {
      Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
           #string=Decorator_credit_balance,#parm1=Send(SYS,@IntToString,
           #num=Send(poOwner,@GetCreditBalance)),#type1=STRING_RESOURCE);
           
      return;
   }

   DecoratorSayObjects(what=$)
   {
      Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
           #string=Decorator_list_objects,
           #parm1=Send(poOwner,@GetObjectList,#who=what,#oDecorator=self),
           #type1=STRING_RESOURCE);
           
      return;
   }   

   SetDialogTopic(topic=TOPIC_NONE)
   {
      piDialogTopic = topic;
      
      if ptDialogTopicTimeout <> $
      {
         DeleteTimer(ptDialogTopicTimeout);
         ptDialogTopicTimeout = $;
      }
      
      if topic <> TOPIC_NONE
      {
         ptDialogTopicTimeout = CreateTimer(self,@DialogTopicTimeout,TOPIC_TIMEOUT);
      }
      
      Send(self,@ResetImpatience);
      
      return;
   }

   DialogTopicTimeout()
   {
      ptDialogTopicTimeout = $;
      piDialogTopic = TOPIC_NONE;
      poCurrentObject = $;
      
      Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
           #string=Decorator_topic_timeout);
      
      return;
   }

   SendBedBlockedMessage(who=$)
   {
      if who <> $
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
              #string=Decorator_bed_blocked);
      }
      
      return;
   }

   SendNoObjectStacking(who=$)
   {
      if who <> $
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
              #string=Decorator_no_object_stacking);
      }
      
      return;
   }

   RenterCanPay(who=$,price=PRICE_TIER_3)
   {
      local iCredit, oMoney, iMoneyValue;
      
      if who = $
      {
         return FALSE;
      }
      
      iCredit = Send(poOwner,@GetCreditBalance);
      oMoney = Send(who,@GetMoneyObject);
      if oMoney <> $
      {
         iMoneyValue = Send(oMoney,@GetNumber);
      }
      else
      {
         iMoneyValue = 0;
      }
      
      if price <= (iCredit + iMoneyValue)
      {
         return TRUE;
      }
      
      return FALSE;
   }

   BillRenter(who=$,price=PRICE_TIER_3)
   {
      local iCredit, oMoney;

      iCredit = Send(poOwner,@GetCreditBalance);

      if iCredit > 0
      {
         if iCredit >= price
         {
            Send(poOwner,@DeductCredit,#amount=price);
            
            return;
         }
         
         Send(poOwner,@DeductCredit,#amount=iCredit);
         price = price - iCredit;
      }

      if who = $
      {
         DEBUG("BillRenter:: Billing no one!");

         return;
      }

      oMoney = Send(who,@GetMoneyObject);

      if Send(oMoney,@GetNumber) >= price
      {
         Send(oMoney,@SubtractNumber,#number=price);
      }
      else
      {
         DEBUG("BillRenter:: can't bill - not enough money - must not have called RenterCanPay");
      }
      
      return;
   }

   CreditRenter(price=PRICE_TIER_3)
   {
      Send(poOwner,@AddCredit,#amount=(price*8/10));
      
      return;
   }

   NewOwner(what = $)
   {
      Send(self,@ResetImpatience);
      
      if what <> $ AND IsClass(what,&RentableRoom)
      {
         Post(what,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_welcome);
      }
      
      propagate;
   }

   ResetImpatience()
   {
      if ptImpatient <> $
      {
         DeleteTimer(ptImpatient);
         ptImpatient = $;
      }
      
      ptImpatient = CreateTimer(self,@Impatient,IMPATIENT_TIME);
      piImpatient = 0;
      
      return;
   }

   Impatient()
   {
      ptImpatient = $;
      if piImpatient < 0
      {
         piImpatient = 0;
      }
      
      if (random(1,100) < 10) AND Send(Send(SYS,@GetNodeAttack),@GetAttacks)
      {
         % A chance to express an interest in heartstones.
         Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
              #string=Decorator_takes_heartstones);
      }
      else
      {
         piImpatient = (piImpatient + 1);
         
         if piImpatient = 1
         {
            Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_impatient_1);
         }
         
         if piImpatient = 2
         {
            Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_impatient_2);
         }
         
         if piImpatient >= 3
         {
            Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_impatient_3);
            Post(self,@WaitDelete);
            
            return;
         }
      }
      
      ptImpatient = CreateTimer(self,@Impatient,IMPATIENT_TIME);
      
      return;
   }

   CanAcceptOffer()
   {
      return TRUE;
   }
   
   GotWantedItem(who=$, obj = 0)
   {
      local oPlayerObj, i, bGotAll;

      if not isClass(obj,&HeartStone)
      {
         return FALSE;
      }
      
      oPlayerObj = $;
      for i in Send(who,@GetHolderPassive)
      {
         if IsClass(i,GetClass(obj))
         {
            oPlayerObj = i;

            break;
         }
      }
      
      if oPlayerObj = $ 
      {
         debug("player offered unowned heartstone.");
         
         return FALSE;
      }

      If NOT Send(Send(SYS,@GetNodeAttack),@GetAttacks)
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_takes_heartstones);
         
         return;
      }

      Send(poOwner,@AddHeartStone,#oStone=obj,#oDecorator=self);

      Send(obj,@Delete);
      
      return TRUE;
   }

   TryAddToQuestEngine()
   {
      return FALSE;
   }

   WaitDelete()
   {
      ptImpatient = CreateTimer(self,@WaitDeleteTimer,DELETE_WAIT);
      
      return;
   }

   WaitDeleteTimer()
   {
      ptImpatient = $;
      Post(self,@Delete);
      
      return;
   }

   Delete()
   {
      if ptDialogTopicTimeout <> $
      {
         DeleteTimer(ptDialogTopicTimeout);
         ptDialogTopicTimeout = $;
      }
      
      if ptImpatient <> $
      {
         DeleteTimer(ptImpatient);
         ptImpatient = $;
      }
      
      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


