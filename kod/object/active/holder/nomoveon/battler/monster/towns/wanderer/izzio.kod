% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Izzio is Wanderer

constants:

   include blakston.khd

   % What's the base delay between adding junk items to his inventory?
   %  Base is about 2 hours (in seconds).
   JUNK_DELAY = 2 * 60 * 60

   % What's the maximum items we'll hold?
   MAX_FORSALE = 25

   % How many items do we hold at the start?
   NUMBER_STARTING_ITEMS = 5

resources:

   izzio_name_rsc = "Izzio"
   izzio_icon_rsc = wnizzio.bgf
   izzio_desc_rsc = "Izzio trägt seinen schwer gefüllten und zum Bersten vollen Bauch mit überraschender Leichtigkeit und Würde. Ein seliges Lächeln und glückliche Augen verkünden Izzios reine Freude an der Natur. Leider mildert Izzios Zen-mäßiger Umgang mit dem Natürlichen nicht sein zwanghaftes Streben nach Profit."





   izzio_AlreadyHaveOne_rsc = "Tut mir leid!  Dieses Bündel ist schwer genug, ich trage keine Duplikate."
   izzio_Full_rsc = "Schau Dir mein Bündel an, ein weiser Mann kennt seine Grenzen."
   izzio_Not_Interested = "Ich würde mich nicht wohl dabei fühlen, wenn ich es nehmen würde."

   izzio_too_many_rsc = "Ich würde es Dir abnehmen, aber ich habe schon einige davon zu verkaufen. Ich würde lieber erst diese abstoßen."

   Izzio_sold_rsc = "Danke! Möge es Dir Wohlergehen und Gesundheit schenken."

classvars:

   vrName = Izzio_name_rsc
   vrIcon = Izzio_icon_rsc
   vrDesc = Izzio_desc_rsc

   viAttributes = MOB_NOFIGHT | MOB_RANDOM | MOB_LISTEN | MOB_NOMOVE | MOB_BUYER | MOB_SELLER
   viOccupation = MOB_ROLE_MERCHANT
   viMerchant_markup = MERCHANT_DISCOUNT

   % We sell what other people have given us
   vbSellFromInventory = TRUE

properties:

   ptNew_Junk = $
   
messages:

   Constructed()
   {
      local iJunkTime;

      iJunkTime = (JUNK_DELAY * random(90,110)) / 100;
      % convert to ms.
      iJunkTime = iJunkTime * 1000;
      ptNew_Junk = CreateTimer(self,@AddNewJunkToSell,iJunkTime);
      
      propagate;
   }

   UserEntered(who = $)
   {
      if NOT Send(who,@GetFaction) = FACTION_NEUTRAL
      {
         send(self,@SetMood,#new_mood=piMood+4);
      }
      
      propagate;
   }

   AffectMood(what=$,why=$)
   {
      if why = MOODMOD_DAWN
      {
         send(self,@SetMood,#new_mood=piMood+1);
         
	      return;
      }
      
      if why = MOODMOD_DUSK
      {
	      send(self,@SetMood,#new_mood=piMood+3);
	      
	      return;
      }
      
      return;
   }

   Delete()
   {
      if ptNew_Junk <> $
      {
         DeleteTimer(ptNew_Junk);
         ptNew_Junk = $;
      }
      
      propagate;
   }

   AddNewJunkToSell()
   {
      local oJunk, lForSale, i, bDuplicate, iJunkTime;
      
      ptNew_Junk = $;

      lForSale = first(plFor_sale);

      if length(lForSale) < MAX_FORSALE
      {
         oJunk = send(self,@PickJunk);
         bDuplicate = FALSE;
         
         for i in lForSale
         {
            if send(i,@GetName) = send(oJunk,@Getname)
            {
               bDuplicate = TRUE;
               send(oJunk,@Delete);

               break;
            }
         }
         
         if not bDuplicate
         {
            lForSale = cons(oJunk,lForSale);
            SetNth(plFor_Sale,1,lForSale);
         }
      }

      iJunkTime = (JUNK_DELAY * random(90,110)) / 100;
      % convert to ms.
      iJunkTime = iJunkTime * 1000;
      ptNew_Junk = CreateTimer(self,@AddNewJunkToSell,iJunkTime);

      return;
   }

   SetForSale()
   {
      local i, oJunk, lForSale;

      oJunk = Create(&DragonflyEye,#number=6);
      lForSale = [ oJunk ];
      send(self,@NewHold,#what=oJunk);

      i = NUMBER_STARTING_ITEMS;
      while i > 0
      {
         oJunk = send(self,@PickJunk);
         
         if IsClass(oJunk,&DragonflyEye)
         {
            send(oJunk,@Delete);
            oJunk = Create(&BerserkerRing);
         }
         
         lForSale = Cons(oJunk,lForSale);
         send(self,@NewHold,#what=oJunk);
         i = i - 1;
      }

      plFor_sale = [ lForSale,$,$ ];

      return;
   }

   PickJunk()
   {
      local oJunk,iRandom,iRan,lJunkList;

      iRandom = random(1,20);

      if iRandom > 5
      % usually normal stuff
      {
         lJunkList = [  &Longsword,
                        &LeatherArmor,
                        &SimpleHelm,
                        &MetalShield,
                        &ShortSword,
                        &ScaleArmor,
                        &Hammer,
                        &DragonFlyEye
                     ];
      }

      if iRandom > 1  and iRandom < 6
      % occasionally good stuff
      {
         lJunkList = [  &IvyCirclet,
                        &Scimitar,
                        &RingWedding,
                        &CloakPotion,
                        &ResistPoisonPotion
                     ];
      }

      if iRandom = 1
      % rarely very good stuff
      {
         lJunkList = [  &BerserkerRing,
                        &LightningWand,
                        &PlateArmor,
                        &BattleBow,
                        &HoldWand,
                        &MysticSword
                     ];
      }

      iRan = Random(1,length(lJunkList));
      oJunk = create(nth(lJunkList,iRan));

      if IsClass(oJunk,&SpellItem)
      {
         % Make spell items we create be identified and initially non-expiring.
         send(oJunk,@RevealHiddenAttributes);
         send(oJunk,@StopGoBadTimer);
      }

      return oJunk;
   }

   CreateDestinationList()
   {
      plDestinations = [ [RID_G5, 4, 42], [RID_C5, 16, 40], 
                         [RID_I3, 9, 34], [RID_TEMPLE, 24, 23], [RID_F8, 11, 42] ];
      return;
   }

   ObjectDesired(what=$,report=TRUE)
   "This is set in individual buyers.  It allows them to pick and choose"
   "what they want to buy."
   {
      local i;

      % Don't take money for resale.  That's just silly.
      if IsClass(what,&Money)
      {
         return FALSE;
      }

      if length(first(plFor_Sale)) > MAX_FORSALE
      {
         Post(poOwner,@SomeoneSaid,#what=self,#string=Izzio_Full_rsc,#type=SAY_RESOURCE);

         return FALSE;
      }

      for i in first(plFor_Sale)
      {
         if GetClass(i) = GetClass(what)
         {
            if isclass(what,&numberitem)
            {
                return TRUE;
            }
            else
            {
               if report
               {
                  Post(poOwner,@SomeoneSaid,#what=self,#string=Izzio_AlreadyHaveOne_rsc,#type=SAY_RESOURCE);
               }
            }
            
            return FALSE;
         }
      }

      if send(what,@HasAttribute,#ItemAtt=IA_BONDED) OR send(what,@IsItemType,#type=ITEMTYPE_SPECIAL)
      {
         return FALSE;
      }

      if isClass(what,&Token) OR isClass(what,&Totem)
      {
         return FALSE;
      }
      
      return TRUE;
   }

   AcceptOffer()
   "Transfer the purchased merchandise - MOB_BUYER"
   {
      local i,j,oHolder,lTake_items, bHadSomeNum, lForSale;

      lForSale = First(plFor_Sale);
      % set the stuff where the user can get to it
      oHolder = Send(SYS,@GetSystemHolder2);
      for i in plOffer_items
      {
         Send(oHolder,@NewHold,#what=i);
      }

      % take stuff the user put there
      oHolder = Send(SYS,@GetSystemHolder1);
      for lTake_items in [ Send(oHolder,@GetHolderActive),
                           Send(oHolder,@GetHolderPassive) ]
      {
         for i in lTake_items
         {
            Send(self,@NewHold,#what=i);
            if isclass(i,&NumberItem)
            {
               bHadSomeNum = FALSE;
               for j in lForSale
               {
                  if GetClass(j) = GetClass(i)
                  {
                     bHadSomeNum = TRUE;
                     send(j,@AddNumber,#number=send(i,@GetNumber));
                     
                     break;
                  }
               }
               if not bHadSomeNum
               {
                  lForSale = cons(i,lForSale);
               }
            }
            else
            {
               if IsClass(i,&SpellItem)
               {
                  send(i,@StopGoBadTimer);
               }

               lForSale = cons(i,lForSale);
            }
         }
      }

      % kill the cancel offer timer
      SetNth(plFor_Sale,1,lForSale);
      Send(self,@OfferCanceled);

      return TRUE;
   }

   ItemBoughtHook(buyer = $)
   {
      Post(poOwner,@SomeoneSaid,#what=self,#string=Izzio_sold_rsc,#type=SAY_RESOURCE);
      return;
   }

   NewHoldObject(what = $)
   {
      local oOwner;

      oOwner = send(what,@GetOwner);

      if oOwner <> $
      {
         Send(poOwner,@LeaveHold,#what=what);
         send(what,@NewOwner,#what=$);
      }
      return;  
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


