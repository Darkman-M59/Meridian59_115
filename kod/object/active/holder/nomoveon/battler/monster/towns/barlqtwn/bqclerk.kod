% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BarloqueClerk is BarloqueTown

constants:

   include blakston.khd
   include protocol.khd

   % Number of pardons allowed in one term
   %  (unlike "pardon" spell, a justicar pardon takes you down one notch,
   %   from murderer to outlaw, or from outlaw to lawful)
   PARDON_LIMIT = 8

   BOOTH_WEST = 6
   BOOTH_EAST = 7
   BOOTH_NORTH = 12
   BOOTH_SOUTH = 14

   COMMAND_NONE = 0
   COMMAND_PARDON = 1
   COMMAND_REMAND = 2

   STATE_ACCEPTING_VOTES = 1
   STATE_TERM_IN_OFFICE  = 2

resources:

   barloque_clerk_name_rsc = "Caramo"
   barloque_clerk_icon_rsc = bqclerk.bgf
   barloque_clerk_desc_rsc = "Nicht gerade das, was Du Dir unter einer typischen königlichen Bürokratin vorstellst. Sie ist attraktiv, charmant und nach allem, was man hört, ehrenhaft. Caramo hat Jahre damit verbracht, das Geld des Herzogs zu zählen, die Steuerunterlagen der früheren Königin zu ordnen und seit kurzem als Schreiberin im Büro des Justiziars zu dienen."






   barloqueclerk_for_shame = "Schäme dich, %s! Aufgrund Deines ungesetzlichen Status' muss ich Dich des Amtes entheben!"



   % Basic stuff

   barloque_clerk_hail_justicar = "Gesegnet seien alle, der ehrenwerte Justiziar %s ist angekommen!"

   barloque_clerk_bye_justicar = "Der ehrenwerte Justiziar %q hat das Büro gerade verlassen."

   barloque_clerk_refuse_service = "Ich würde noch nicht einmal die widerliche Idee ~Berwägen~B, mit jemandem wie Euch Geschäfte zu machen, %s! Hebt Euch hinweg oder die Wache wird Euch begleiten!"



   % Voting

   barloque_clerk_election_no_justicar_subject = "Das Amt ist frei"
   barloque_clerk_election_no_justicar = "Das Büro des Justiziars ist nun unbesetzt. Solange keine neue Wahl ausgeschrieben ist und ein neuer Justiziar gewählt ist, gibt es keine Begnadigungen durch die Krone.\n\n--Caramo"





   barloque_clerk_election_open_subject = "Der Wahlkampf hat begonnen"
   barloque_clerk_election_open = "Die Wahl des Justiziars hat begonnen. Du kannst nun einen Stimmzettel von mir kaufen. Schreibe den Namen Deines favorisierten Kandidaten auf den Zettel und gib ihn im Büro des Justiziars ab. Vergiss nicht, dass gemäß dem geltenden Recht von Meridian weder Neulinge noch Gesetzlose für das Amt kandidieren können.\n\n--Caramo"






   barloque_clerk_tally_day = "Dem nächsten Justiziar wird in %d Meridiantagen der Amtseid abgenommen."

   barloque_clerk_tally_no_leader = "Bisher sind noch keine Stimmen für die Wahl des nächsten Justiziars gezählt worden."

   barloque_clerk_tally_leader = "Bisher führt %s die Wahl um den nächsten Justiziar mit %d Stimmen an."

   barloque_clerk_tally_tied = "Bis jetzt scheint es, gibt es ein Unentschieden."

   barloque_clerk_announce_winner_subject = "Neu gewählter Justiziar"
   barloque_clerk_announce_winner1 = "Bitte gratuliere "

   barloque_clerk_announce_winner2 = ", dem neu gewählten Justiziar.\n\n--Caramo"



   barloqueClerk_not_yet = "Zu diesem Zeitpunkt nehme ich keine Stimmen an."
   barloqueClerk_blank_ballot = "Wirklich, verschwende meine Zeit nicht mit leeren Stimmzetteln."

   % Accountability

   barloque_clerk_pardon = "Begnadigen"
   barloque_clerk_pardons = "Begnadigungen"
   barloque_clerk_anoutlaw = "Gesetzlose(r)"
   barloque_clerk_outlaws = "Gesetzlosen"
   barloque_clerk_amurderer = "Mörder(in)"
   barloque_clerk_murderers = "Mörder(innen)"
   barloque_clerk_alawful = "gesetzestreue(r) Bürger(in)"
   barloque_clerk_lawfuls = "gesetzestreue Bürger(innen)"
   barloque_clerk_aperson = "eine Person"
   barloque_clerk_person = "Personen"
   barloque_clerk_people = "Leute"
   barloque_clerk_pardons_served1 = "In dieser Amtszeit hat Justiziar %q %i %s erlassen."

   barloque_clerk_pardons_served2 = "Davon: %i %s \"%s\" und %i \"%s.\""


   % Commands

   barloque_clerk_pardon_phrase = "Als Justiziar begnadige ich "
   barloque_clerk_remand_phrase = "Als Justiziar weise ich zurück: "
   barloque_clerk_report_phrase = "Bericht des Justiziars"
   barloque_clerk_tally_phrase = "zählt die Stimmen"

   % Problems

   barloque_clerk_no_justicar = "In der Tat gibt es zur Zeit keinen amtierenden Justiziar."

   barloque_clerk_in_absentia = "Euer Ehren, diese Person ist nicht anwesend. Sie muss sich in Eurer Gesellschaft befinden."

   barloque_clerk_step_forward = "Euer Ehren, diese Person befindet sich in der Gallerie. In der Tat müssen sie zuerst vor jenes Gericht treten."


   barloque_clerk_already_pardoned = "Euer Ehren, diese Person ist bereits wegen Mordes begnadigt worden. Die Krone ist Mördern nicht freundlich gesinnt und wird keine weitere Begnadigung zulassen."



   barloque_clerk_citizen_unknown = "Euer Ehren, es gibt keine Aufzeichnungen über einen Bürger solches Namens."

   barloque_clerk_no_more = "Euer Ehren, nach dem Königlichen Gesetz habt Ihr für diese Amtszeit die Höchstzahl von Begnadigungen erreicht."


   % Intelligence

   barloque_clerk_summary_lawful = "Euer Ehren, nach den Aufzeichnungen ist %q gesetzestreu und hält sich an die königlichen Vorgaben."


   barloque_clerk_summary_outlaw = "Euer Ehren, nach den Aufzeichnungen ist %q gesetzlos und hat gesetzestreue Bürger verletzt oder andere Gesetzes des Landes gebrochen."



   barloque_clerk_summary_murderer1 = "Euer Ehren, nach den Aufzeichnungen ist %q des Mordes schuldig und hat bereits %i %s getötet."


   barloque_clerk_summary_murderer2 = "Davon sind %i %s und %i %s vor dem Gesetz entschuldbar."

   barloque_clerk_was = "war"
   barloque_clerk_were = "waren"

   % Announcements

   barloque_clerk_granted = "Justiziar %s hat %s, %s begnadigt. Die Person hat von nun an den Status %s!"



   barloqueclerk_accepting_votes = "Ich nehme jetzt Nominierungen und Stimmen für das Büro des Justiziars an."

   barloqueclerk_votes_tallied = "Die Stimmen wurden ausgezählt."
   barloqueclerk_new_justicar = "Gratuliert %q, Eurem neuen Justiziar."
   barloqueclerk_no_can_vote = "Ich habe keine Aufzeichnungen über eine Person dieses Namens."
   barloqueclerk_vote_noted = "Deine Stimme für %q wurde notiert."
   barloqueclerk_vote_switched = "Ich habe Deine Stimme in eine Stimme für %q umgeändert."
   barloqueclerk_vote_already = "Du hast %q bereits Deine Stimme gegeben."

   barloqueclerk_hands_back = "~bCaramo gibt den Stimmzettel zurück."
   barloqueclerk_bad_candidate = "%q kommt für das Amt des Justiziars nicht in Frage."
   barloqueclerk_no_newbie_voter = "Du bist noch nicht berechtigt zu wählen."
   barloqueclerk_no_outlaw_voter = "Kriminelle haben kein Wahlrecht. Verschwinde."

   barloque_clerk_notify_ad = "~kCaramo teilt Dir mit, \"~I~bEs gibt derzeit eine Wahl um einen neuen Justiziar zu bestimmen.~I~k\""


   barloque_clerk_start_ad = "Ich werde es dich wissen lassen, wenn eine neue Wahl beginnt, sofern du ein rechtstreuer Bürger bleibst."


   barloque_clerk_start_ad_outlaw = "Die nächste Wahl spielt für euresgleichen keine Rolle.  Kriminelle wie wie Ihr dürft nicht wählen.  Solltet ihr euch als gesetzestreuer Bürger behaupten, so werde ich euch über die nächsten Wahlen informieren."



   barloque_clerk_no_start_ad = "Du wirst bereits informiert wenn eine neue Wahl beginnt."

   barloque_clerk_no_start_ad_angel = "Nur erfahrene Veteranen dürfen an einer Wahl teilnehmen. Frage wieder an wenn du würdig bist."


   barloque_clerk_stop_ad = "Du wirst nicht länger informiert wenn eine neue Wahl beginnt."

   barloque_clerk_stop_ad_outlaw = "Reformen scheinen mir außerhalb deines Horizonts.  Ich werde nicht nicht länger benachrichtigen."


   barloque_clerk_no_stop_ad = "Du wirst derzeit nicht informiert wenn eine neue Wahl beginnt."


   barloque_clerk_advertise = "informieren"
   barloque_clerk_no_advertise = "nicht informieren"

   % Initiation

   barloque_clerk_mail = "Betreff: Gratulation zu Eurer Wahl.\nVom Tisch von Caramo, der Schreiberin im Büro des Justiziars\n\nIm Rahmen dieser Mitteilung wird Euch offiziell verkündet, dass Ihr von den gesetzestreuen Bürgern Meridians gewählt worden seid, das Amt des Justiziars zu übernehmen.\n\nAls der Justiziar von Meridian könnt Ihr in Rechtsfällen entscheiden und die Schuld oder Unschuld von Leuten nach Eurem eigenen Gerechtigkeitssinn verkünden. Ihr seid von Euresgleichen gewählt worden und es ist Eure Pflicht, sowohl ihre als auch Eure eigenen Ideale zu bewahren, oder es ist unwahrscheinlich, dass Ihr das Amt für eine weitere Amtszeit innehabt.\n\nIhr dürft im Verlaufe einer Amtszeit von 7 Tagen nur acht Personen begnadigen. Eine Begnadigung ändert den rechtlichen Status eines Mörders in den eines Verbrechers und eines Verbrechers in den eines gesetzestreuen Bürgers. So erfordert die völlige Rehabilitierung eines Mörders zwei getrennte Verhandlungen.\nFür offizielle Angelegenheiten müßt Ihr das Büro des Justiziars im Norden von Barloque benutzen. Ich stehe zu Eurer Verfügung, um Euch mit Informationen über Mörder oder diejenigen im Land zu versorgen, die das Gesetz mißachten. Ich selbst werde den Papierkram nach den Vorgaben der Königlichen Regierung von Meridian in Ordnung halten.\n\nWenn Ihr auf der Richterbank sitzt, sagt einfach nur den Namen eines Bürgers und ich werde Euch dessen Stellung nach dem königlichen Gesetz sagen. Um eine Begnadigung auszusprechen, vielleicht bezüglich \"Zaphod\", dann sagt Ihr von der Richterbank aus, \"Als Justiziar begnadige ich Zaphod\". Und seid euch darüber im Klaren, dass ein jeder gesetzestreue Bürger Einsicht in Eure Aufzeichnungen nehmen kann, wenn er mich einfach nach dem \"Bericht des Justiziars\" fragt.\n\nNoch einmal herzlichen Glückwunsch, und ich freue mich darauf, Euch im Rahmen der Rechtsprechung zu helfen.\nBittet mich einfach um Hilfe, wenn Ihr sie brauchen solltet.\n\nAuf Jalas Wahrheit,\n  Caramo, Büro des Justiziars\n\n(Kopie an den Herzog von Burg Schwarzstein)\n(Kopie an Prinzessin Kateriina von Schloß Bourgeois)\n"



































   barloque_clerk_help1 = "Seid gesegnet, Justiziar %s. Ich bin Caramo, Euer Assistent während Eurer Amtszeit."

   barloque_clerk_help2 = "Ihr könnt Euch so viele Fälle anhören, wie Ihr wollt in diesem Büro, aber Ihr seid vom königlichen Gesetz darauf beschränkt, nur %i Bürger bis zum Ende Eurer Amtszeit zu begnadigen. "



   % Dealing with the Disorderly

   barloque_clerk_warn = "Ich flehe Euch an, wenn Ihr, %s, Eure Arbeit nicht ordnungsgemäß verrichten könnt, dann verlasst dieses Büro."

   barloque_clerk_warn_outside = "Eure Aufregung stört den reibungslosen Fortgang der Dinge am Hof des Justiziars, %s. Bitte nehmt Abstand."


   barloque_clerk_dismiss = "Kommt nicht zurück, %s, ehe Ihr Euch nicht wieder ordentlich benehmt."

   barloque_clerk_glare = "Versucht Euch zivilisiert zu benehmen, %s."

   barloqueclerk_votes_tied = "Die Wahl des Justiziars ist stimmengleich ausgegangen und ist deshalb noch nicht zu Ende."


   barloque_clerk_pardon_1 = "Lasst es bekannt werden, dass "
   barloque_clerk_pardon_2 = " eine Gnadenfrist gewährt wurde. Ehemals "
   barloque_clerk_pardon_3 = ", "
   barloque_clerk_pardon_4 = " weilt diese Person nun als "
   barloque_clerk_pardon_5 = "unter uns. Im Namen des Justiziars "
   barloque_clerk_pardon_6 = ". So ward es gesprochen, so soll es geschehen!\n\n-- Caramo"
   % This string must be < 20 chars long to fit in the subject line with a player name
   barloque_clerk_pardon_7 = " wurde eine Galgenfrist gewährt"

classvars:

   vrName = barloque_clerk_name_rsc
   vrIcon = barloque_clerk_icon_rsc
   vrDesc = barloque_clerk_desc_rsc

   viAttributes = MOB_NOFIGHT | MOB_LISTEN | MOB_SELLER | MOB_NOMOVE | MOB_LAWFUL | MOB_FULL_TALK | MOB_RECEIVE
   viGender = GENDER_FEMALE

properties:

   piAnimation = ANIM_NONE

   piDayCounter = 0
   piJusticar_State = STATE_ACCEPTING_VOTES

   poJusticar = $
   poDisorderly = $

   piCommand = COMMAND_NONE

   piPardoned = 0
   piPardonedMurderers = 0
   piPardonedOutlaws = 0

   % A list of pardoned murderers, so that serial killers can't get
   %  multiple pardons in one justicar term.
   plPardons = $

   % A list of people that want advertising about when voting happens.
   plAdvertise = $
   
   % plVotes is a list of two element lists.  The first element is the 
   % player who voted, and the second element is the player who is being voted for.
   % Note that a player can only have one vote at a time.
   plVotes = $
   psJunkString = $   

   % Duration of the voting period.  24*12 game hours is one earth day.
   piVotingDuration = 288
   % Duration Justicar is in office.  A little over six earth days.
   piOfficeDuration = 1790
   % Duration of the tiebreaker voting period.  It's one earth day.
   piTiebreakerDuration = 288

messages:

   Constructor()
   {
      plWantedItems = [ &BallotItem ];
      psJunkString = CreateString();
      Send(SYS,@SetCaramo,#oCaramo=self);

      % Start out in voting state.
      piDayCounter = piVotingDuration;
      piJusticar_State = STATE_ACCEPTING_VOTES;

      propagate;
   }

   %%% Selling and accepting Ballots

   IsCustomerOkay(who=$)
   {
      % Don't even stoop to the impropriety of dealing with scofflaws and worse.
      if isClass(who,&Player) AND Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Send(self,@Say,#message_rsc=barloque_clerk_refuse_service,
              #parm1=Send(who,@GetName));
              
         return FALSE;
      }

      return TRUE;
   }

   GotWantedItem(obj = $, who = $)
   {
      if isClass(obj,&BallotItem)
      {
         if Send(obj,@GetOwner) <> who
         {
            propagate;
         }

         if Send(self,@VoteFor,#voter=who,#who_string=Send(obj,@GetInscription))
         {
            Send(obj,@Delete);
         }
         
         return;
      }
      
      propagate;
   }

   SetForSale()
   {
      plFor_sale = [ [ Create(&BallotItem) ],
                     $,$];
      return;
   }

   %%% Handling people and disordery conduct.

   DismissDisorderly(who = $)
   {
      local oNewRoom;

      Send(self,@SayToOne,#target=who,#message_rsc=barloque_clerk_dismiss,
           #parm1=Send(who,@GetTrueName));

      oNewRoom = Send(SYS,@FindRoomByNum,#num=RID_BAR_NORTH);
      Send(SYS,@UtilGoNearSquare,#what=who,#where=oNewRoom,#new_row=35,#new_col=48);

      % don't erase poDisorderly, in case they just run back in

      return;
   }

   WarnDisorderly(who = $)
   {
      if Send(who,@GetOwner) = poOwner
      {
         Send(self,@SayToOne,#target=who,#message_rsc=barloque_clerk_warn,
              #parm1=Send(who,@GetTrueName));
      }
      else
      {
         Send(self,@SayToOne,#target=who,#message_rsc=barloque_clerk_warn_outside,
              #parm1=Send(who,@GetTrueName));
      }
      
      poDisorderly = who;
      
      return;
   }

   SomethingEntered(what=$,where=$)
   {
      if not isClass(what,&Player)
      {
         propagate;
      }

      if what = poDisorderly
      {
         Send(self,@SayToOne,#target=what,#message_rsc=barloque_clerk_glare,
              #parm1=Send(what,@GetTrueName));
         
         propagate;
      }

      if poJusticar <> $ and what = poJusticar
      {
         if NOT Send(self,@AuthenticateJusticar)
         {
            propagate;
         }

         Send(self,@Say,#message_rsc=barloque_clerk_hail_justicar,
              #parm1=Send(poJusticar,@GetTrueName));
      }

      propagate;
   }

   AuthenticateJusticar()
   {
      local sString, sString2, oBook;
      
      if poJusticar <> $
         AND (Send(poJusticar,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
              OR Send(poJusticar,@CheckPlayerFlag,#flag=PFLAG_MURDERER))
      {
         % Scold them as they enter.
         post(self,@Say,#message_rsc=barloqueclerk_for_shame,
              #parm1=Send(poJusticar,@GetTrueName));

         % Strip Justicar of power.
         Send(self,@SetJusticar,#who=$);

         return FALSE;
      }

      return TRUE;
   }

   SomethingLeft(what=$,where=$)
   {
      if NOT isClass(what,&Player)
      {
         propagate;
      }

      if what = poJusticar
      {
         Send(self,@Say,#message_rsc=barloque_clerk_bye_justicar,
              #parm1=Send(poJusticar,@GetTrueName),#type1=STRING_RESOURCE);
      }

      propagate;
   }

   %%% Pardoning and recordkeeping

   RecordPardonBookOfJala(who=$, parm1=$, parm2=$)
   {
      local sString, sString2, oBook;

      ClearTempString();
      AppendTempString(barloque_clerk_pardon_1);
      AppendTempString(Send(who,@GetTrueName));
      AppendTempString(barloque_clerk_pardon_2);
      AppendTempString(parm1);
      AppendTempString(barloque_clerk_pardon_3);
      AppendTempString(Send(who,@GetHeShe));
      AppendTempString(barloque_clerk_pardon_4);
      AppendTempString(parm2);
      AppendTempString(barloque_clerk_pardon_5);
      AppendTempString(Send(poJusticar,@GetTrueName));
      AppendTempString(barloque_clerk_pardon_6);
      sString = CreateString();
      setString(sString,GetTempString());

      ClearTempString();
      AppendTempString(Send(who,@GetTrueName));
      AppendTempString(barloque_clerk_pardon_7);
      sString2 = CreateString();
      setString(sString2,GetTempString());
      
      oBook = Send(poOwner,@GetBook);
      Send(oBook,@PostNews,#what=self,#title=sString2,#body=sString);

      return;
   }

   RecordPardon(who=$, parm1=$, parm2=$)
   {
      piPardoned = piPardoned + 1;

      debug("Justicar",Send(poJusticar,@GetTrueName),
            "granted pardon to ",Send(who,@GetTrueName),
            "from",parm1,"to",parm2);

      Send(self,@Say,#message_rsc=barloque_clerk_granted,
            #parm1=Send(poJusticar,@GetTrueName),
            #parm2=Send(who,@GetTrueName),
            #parm3=parm1,#parm4=parm2);

      Send(self,@RecordPardonBookOfJala,#who=who,#parm1=parm1,#parm2=parm2);

      return;
   }

   PerformPardonMurderer(who=$)
   {
      Send(self,@RecordPardon,#who=who,#parm1=barloque_clerk_amurderer,
           #parm2=barloque_clerk_anoutlaw);

      Send(who,@SetPlayerFlag,#flag=PFLAG_MURDERER,#value=FALSE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_OUTLAW,#value=TRUE);

      piPardonedMurderers = piPardonedMurderers + 1;

      plPardons = cons(who, plPardons);

      return;
   }

   PerformPardonOutlaw(who=$)
   {
      Send(self,@RecordPardon,#who=who,#parm1=barloque_clerk_anoutlaw,
           #parm2=barloque_clerk_alawful);

      Send(who,@SetPlayerFlag,#flag=PFLAG_MURDERER,#value=FALSE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_OUTLAW,#value=FALSE);

      piPardonedOutlaws = piPardonedOutlaws + 1;

      return;
   }

   %%% Handling says, routing them appropriately.

   SomeoneSaid(what = $,type = $,string = $)
   {
      local iRow, iCol;

      if what = $ OR NOT IsClass(what,&Player)
      {
         propagate;
      }

      % For getting advertising or not.
      if StringEqual(string,barloque_clerk_advertise)
      {
         Send(self,@UserStartAdvertise,#who=what);

         return;
      }

      if StringEqual(string,barloque_clerk_no_advertise)
      {
         Send(self,@UserStopAdvertise,#who=what);

         return;
      }

      % The Boss's Commands?
      if poJusticar <> $ and what = poJusticar
      {
         iRow = Send(what,@GetRow);
         iCol = Send(what,@GetCol);
         if iRow >= BOOTH_NORTH
            AND iRow <= BOOTH_SOUTH
            AND iCol >= BOOTH_WEST
            AND iCol <= BOOTH_EAST
            AND Send(self,@JusticarSaid,#string=string)
         {
            return;
         }
      }

      % Disorderly conduct?
      if poJusticar = $
      {
         poDisorderly = $;
      }
      else
      {
         if Send(poJusticar, @GetOwner) <> poOwner
         {
            poDisorderly = $;
         }
      }
      
      if type = SAY_YELL
      {
         if poJusticar <> $ AND what <> poJusticar
         {
            if what = poDisorderly AND Send(what,@GetOwner) = poOwner
            {
               Send(self,@DismissDisorderly,#who=what);
               
               return;
            }
            
            post(self,@WarnDisorderly,#who=what);
            
            return;
         }
      }

      % Public Commands?
      if isClass(what,&User) AND Send(self,@CitizenSaid,#who=what,#string=string)
      {
         return;
      }

      propagate;
   }

   %%% Handling Justicar commands.

   JusticarRequestsPardon(who=$)
   {
      if who = $
      {
         return;
      }

      %  MANY REASONS WHY A JUSTICAR CANNOT PARDON

      if piPardoned >= PARDON_LIMIT
      {
         Send(self,@Say,#message_rsc=barloque_clerk_no_more);
         
         return;
      }

      if Send(who,@GetOwner) <> poOwner
      {
         Send(self,@Say,#message_rsc=barloque_clerk_in_absentia);
         
         return;
      }

      % Check to see if the person is a murderer and has already been
      %  pardoned for murder this term.
      if Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
         AND plPardons <> $ AND FindListElem(plPardons,who) <> 0
      {
         Send(self,@Say,#message_rsc=barloque_clerk_already_pardoned);
         
         return;
      }

      if NOT Send(poOwner,@ReqInSpecialArea,#obj=who)
      {
         Send(self,@Say,#message_rsc=barloque_clerk_step_forward);
         
         return;
      }

      % Go through with it.
      if Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Send(self,@PerformPardonMurderer,#who=who);
         
         return;
      }

      if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
      {
         Send(self,@PerformPardonOutlaw,#who=who);
         
         return;
      }

      % After all that, the target wasn't in need of a pardon.
      Send(self,@Say,#message_rsc=barloque_clerk_summary_lawful,
           #parm1=Send(who,@GetTrueName),#type1=STRING_RESOURCE);

      return;
   }

   JusticarRequestsRecord(who=$)
   {
      local iTotal, iJust, iUnjust, bMurderer, bOutlaw;

      if who = $
      {
         return;
      }

      bMurderer = Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER);

      if bMurderer
      {
         iJust = Send(who,@GetJustifiedKills);
         iUnjust = Send(who,@GetUnjustifiedKills);
         iTotal = iJust + iUnjust;

         Send(self,@SayToOne,#target=poJusticar,
              #message_rsc=barloque_clerk_summary_murderer1,
              #parm1=Send(who,@GetTrueName),#type1=STRING_RESOURCE,
              #parm2=iTotal,
              #parm3=Send(self,@SingPlur,#num=iTotal,#sing=barloque_clerk_person,
                          #plur=barloque_clerk_people));

         Send(self,@SayToOne,#target=poJusticar,
              #message_rsc=barloque_clerk_summary_murderer2,
              #parm1=iUnjust,
              #parm2=Send(self,@SingPlur,#num=iUnjust,#sing=barloque_clerk_alawful,
                          #plur=barloque_clerk_lawfuls),
              #parm3=iJust,
              #parm4=Send(self,@SingPlur,#num=iJust,#sing=barloque_clerk_was,
                          #plur=barloque_clerk_were));

         return;
      }

      bOutlaw = Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW);

      if bOutlaw
      {
         Send(self,@SayToOne,#target=poJusticar,
              #message_rsc=barloque_clerk_summary_outlaw,
              #parm1=Send(who,@GetTrueName),#type1=STRING_RESOURCE);

         return;
      }

      Send(self,@SayToOne,#target=poJusticar,
           #message_rsc=barloque_clerk_summary_lawful,
           #parm1=Send(who,@GetTrueName),#type1=STRING_RESOURCE);

      return;
   }

   JusticarSaid(string = $)
   {
      local oTarget;

      oTarget = $;

      piCommand = COMMAND_NONE;

      % as justicar, i pardon <player name>
      if (stringContain(string, barloque_clerk_pardon_phrase))
      {
         piCommand = COMMAND_PARDON;
         stringSubstitute(string,barloque_clerk_pardon_phrase," ");
      }

      oTarget = Send(SYS,@FindUserByString,#string=string);      
      
      % who is to be pardoned?
      if piCommand = COMMAND_PARDON
      {
         if oTarget = $
         {
            Send(self,@SayToOne,#target=poJusticar,
                 #message_rsc=barloque_clerk_citizen_unknown);
         }
         else
         {
            if Send(oTarget,@GetOwner) <> poOwner
            {
               Send(self,@SayToOne,#target=poJusticar,
                    #message_rsc=barloque_clerk_in_absentia);
            }
            else
            {
               Send(self,@JusticarRequestsPardon,#who=oTarget);
            }
         }
         
         piCommand = COMMAND_NONE;
         
         return TRUE;
      }

      piCommand = COMMAND_NONE;

      % player's record (name exactly)
      if oTarget <> $
      {
         Send(self,@JusticarRequestsRecord,#who=oTarget);
      }

      return FALSE;
   }

   %%% Handling citizen commands.

   CitizenAsksTally(who=$)
   {
      local i, j, lTallied, oHighest, iHighestCount, bTie, bFound;

      if piJusticar_State <> STATE_ACCEPTING_VOTES
      {
         Send(self,@SayToOne,#message_rsc=barloqueClerk_not_yet,#target=who);
         
         return;
      }

      lTallied = $;
      
      for i in plVotes
      {
         if NOT Send(self,@IsLegalJusticar,#candidate=Nth(i,2))
         {
            continue; 
         }
         
         bFound = FALSE;
         
         for j in lTallied
         {
            if nth(i,2) = first(j)          
            {
               setnth(j,2,(nth(j,2)+1));
               bFound = TRUE;
            }            
         }
         
         if not bFound
         {
            lTallied = cons([nth(i,2),1],lTallied);
         }
      }
      
      if lTallied = $
      {
         Send(self,@SayToOne,#target=who,#message_rsc=barloque_clerk_tally_tied,#type1=STRING_RESOURCE);
         
         return;
      }
      
      oHighest = $;
      iHighestCount = 0;      
      bTie = FALSE;
      
      for i in lTallied
      {
         if Nth(i,2) = iHighestCount
         {
            bTie = TRUE;
         }
         
         if Nth(i,2) > iHighestCount
         {
            oHighest = first(i);
            iHighestCount = nth(i,2);
            bTie = FALSE;
         }         
      }
      
      if bTie
      {
         Send(self,@SayToOne,#target=who,#message_rsc=barloque_clerk_tally_tied,#type1=STRING_RESOURCE);
         return;
      }

      Send(self,@SayToOne,#target=who,
           #message_rsc=barloque_clerk_tally_leader,
           #parm1=Send(oHighest,@GetTrueName),#type1=STRING_RESOURCE,
           #parm2=iHighestCount);

      return;
   }

   CitizenAsksRecord(who=$)
   {
      if poJusticar = $
      {
         Send(self,@SayToOne,#target=who,
              #message_rsc=barloque_clerk_no_justicar);
              
         return;
      }

      Send(self,@SayToOne,#target=who,
           #message_rsc=barloque_clerk_pardons_served1,
           #parm1=Send(poJusticar,@GetTrueName),#type1=STRING_RESOURCE,
           #parm2=piPardoned,
           #parm3=Send(self,@SingPlur,#num=piPardoned,#sing=barloque_clerk_pardon,
                       #plur=barloque_clerk_pardons));

      Send(self,@SayToOne,#target=who,
           #message_rsc=barloque_clerk_pardons_served2,
           #parm1=piPardonedOutlaws,
           #parm2=Send(self,@SingPlur,#num=piPardonedOutlaws,#sing=barloque_clerk_pardon,
                       #plur=barloque_clerk_pardons),
           #parm3=Send(self,@SingPlur,#num=piPardonedOutlaws,#sing=barloque_clerk_anoutlaw,
                       #plur=barloque_clerk_outlaws),
           #parm4=piPardonedMurderers,
           #parm5=Send(self,@SingPlur,#num=piPardonedMurderers,#sing=barloque_clerk_amurderer,
                       #plur=barloque_clerk_murderers));

      return;
   }

   SingPlur(num=$,sing=$,plur=$)
   {
      if num = 1
      {
         return sing;
      }
      
      return plur;
   }

   CitizenSaid(who = $, string = $)
   {
      % justicar report
      if (stringContain(string, barloque_clerk_report_phrase))
      {
         Send(self,@CitizenAsksRecord,#who=who);
         
         return TRUE;
      }

      % justicar voting tally
      if (stringContain(string, barloque_clerk_tally_phrase))
      {
         Send(self,@CitizenAsksTally,#who=who);
         
         return TRUE;
      }

      return FALSE;
   }

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   %%% Handling notification

   UserStartAdvertise(who=$)
   "Adds user to the advertising list."
   {
      if NOT Send(self, @IsPlayerSeniorEnough, #who = who)
      {
         Send(self,@Say,#message_rsc=barloque_clerk_no_start_ad_angel);

         return;
      }

      if plAdvertise = $
         OR FindListElem(plAdvertise,who) = 0
      {
         if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
            OR Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
         {
            Send(self,@Say,#message_rsc=barloque_clerk_start_ad_outlaw);
         }
         else
         {
            Send(self,@Say,#message_rsc=barloque_clerk_start_ad);
         }

         plAdvertise = cons(who,plAdvertise);
      }
      else
      {
         Send(self,@Say,#message_rsc=barloque_clerk_no_start_ad);
      }

      return;
   }

   UserStopAdvertise(who=$)
   "Removes a user from the advertise list."
   {
      if plAdvertise = $
         OR FindListElem(plAdvertise,who) = 0
      {
         Send(self,@Say,#message_rsc=barloque_clerk_no_stop_ad);
      }
      else
      {
         if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
            OR Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
         {
            Send(self,@Say,#message_rsc=barloque_clerk_stop_ad_outlaw);
         }
         else
         {
            Send(self,@Say,#message_rsc=barloque_clerk_stop_ad);
         }

         plAdvertise = DelListElem(plAdvertise,who);
      }

      return;
   }

   UserLogon(who = $)
   "We are notified when a user logs on so we can tell them when there's a vote."
   {
      if piJusticar_State = STATE_ACCEPTING_VOTES
         AND plAdvertise <> $
         AND FindListElem(plAdvertise,who) <> 0
      {
         Send(self,@NotifyUserIfWorthy,#who=who);
      }

      return;
   }

   NotifyUserIfWorthy(who = $)
   "Sends a user to 'who' if not an outlaw/murderer."
   {
      if NOT (Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
              OR Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER))
         AND Send(self, @IsPlayerSeniorEnough, #who = who)
      {
         Send(who,@MsgSendUser,#message_rsc=barloque_clerk_notify_ad);
      }

      return;
   }

   %%% Handling voting.

   NewHour()
   {
      local oBook, sString, sString2, oPlayer;

      piDayCounter = piDayCounter - 1;
      
      if piDayCounter <= 0
      {
         % Okay, we've just left the old state.  See what the old state is
         %  and enter the new state.
         if piJusticar_State = STATE_ACCEPTING_VOTES
         {
            piJusticar_State = STATE_TERM_IN_OFFICE;
            piDayCounter = piOfficeDuration;
            Send(self,@CountVotes);
            
            return;
         }
         
         if piJusticar_State = STATE_TERM_IN_OFFICE
         {
            piJusticar_State = STATE_ACCEPTING_VOTES;
            piDayCounter = piVotingDuration;

            ClearTempString();
            AppendTempString(barloque_clerk_election_open_subject);
            sString2=CreateString();
            setString(sString2,GetTempString());

            ClearTempString();
            AppendTempString(barloque_clerk_election_open);
            sString=CreateString();
            setString(sString,GetTempString());
              
            oBook = Send(poOwner,@GetBook);
            Send(oBook,@PostNews,#what=self,#title=sString2,#body=sString);

            Send(self,@Say,#message_rsc=barloqueclerk_accepting_votes);

            % Send notification to all those logged on.
            for oPlayer in plAdvertise
            {
               if Send(oPlayer,@IsLoggedOn)
               {
                  Send(self,@NotifyUserIfWorthy,#who=oPlayer);
               }
            }

            return;
         }
      }

      return;      
   }   
     
   VoteFor(who_string = $,voter = $)
   {
      local i, oVote, bFound;
      
      if who_string = $
      {
         Send(self,@SayToOne,#message_rsc=barloqueClerk_blank_ballot,#target=voter);
         Send(voter,@MsgSendUser,#message_rsc=barloqueclerk_hands_back);
         
         return FALSE;
      }

      if piJusticar_State <> STATE_ACCEPTING_VOTES
      {
         Send(self,@SayToOne,#message_rsc=barloqueClerk_not_yet,#target=voter);
         Send(voter,@MsgSendUser,#message_rsc=barloqueclerk_hands_back);
         
         return FALSE;
      }
      
      oVote = $;
      i = Send(SYS,@FindUserByString,#string=who_string);
      
      if i <> $
      {
         if NOT Send(self,@IsLegalVoter,#voter=voter)
         {
            % There are two reasons, let that function tell why.
            Send(voter,@MsgSendUser,#message_rsc=barloqueclerk_hands_back);
            
            return FALSE;               
         }
         
         if NOT Send(self,@IsLegalJusticar,#candidate=i)
         {
            Send(self,@SayToOne,#target=voter,#message_rsc=barloqueclerk_bad_candidate,
                 #parm1=Send(i,@GetTrueName),#type1=STRING_RESOURCE);
            Send(voter,@MsgSendUser,#message_rsc=barloqueclerk_hands_back);
            
            return FALSE;
         }
         
         oVote = i;
      }
      
      if oVote = $
      {
         Send(self,@SayToOne,#target=voter,#message_rsc=barloqueclerk_no_can_vote);
         Send(voter,@MsgSendUser,#message_rsc=barloqueclerk_hands_back);
         
         return FALSE;
      }
      
      bFound = FALSE;
      
      for i in plVotes
      {
         if first(i) = voter
         {
            if nth(i,2) = oVote
            {
               % Already supporting this person.
               Send(self,@SayToOne,#target=voter,#message_rsc=barloqueclerk_vote_already, 
                    #parm1=Send(oVote,@GetTrueName),#type1=STRING_RESOURCE);
                    
               return TRUE;
            }
            
            Send(self,@SayToOne,#target=voter,#message_rsc=barloqueclerk_vote_switched, 
                 #parm1=Send(oVote,@GetTrueName),#type1=STRING_RESOURCE);
                 
            SetNth(i,2,oVote);
            
            bFound = TRUE;
         }
      }
      
      if NOT bFound
      {
         Send(self,@SayToOne,#message_rsc=barloqueclerk_vote_noted,#target=voter,
              #parm1=Send(oVote,@getTrueName),#type1=STRING_RESOURCE);
         plVotes = Cons([voter,oVote],plVotes);         
      }
      
      return TRUE;
   }

   IsLegalVoter(voter=$)
   {
      if NOT Send(self, @IsPlayerSeniorEnough, #who = voter)
      {
         Send(self,@SayToOne,#message_rsc=barloqueclerk_no_newbie_voter,#target=voter);
         
         return FALSE;
      }
      
      if Send(voter,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
         OR Send(voter,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Send(self,@SayToOne,#message_rsc=barloqueclerk_no_outlaw_voter,#target=voter);
         
         return FALSE;
      }
      
      return TRUE;
   }

   IsLegalJusticar(candidate=$)
   {
      if NOT Send(candidate,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {         
         return FALSE;
      }
      
      if Send(candidate,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
         OR Send(candidate,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         return FALSE;
      }
      
      return TRUE;
   }

   CountVotes()
   {
      local i, j, lTallied, oHighest, iHighestCount, bTie, bFound, oBook,
            sString, sString2;

      lTallied = $;
      
      % Okay, first lets count the votes.  lTallied is a list of two element
      %  lists,where the first element is the person being voted for, and the
      %  second is how many votes he currently has.
      for i in plVotes
      {
         if NOT Send(self,@IsLegalJusticar,#candidate=Nth(i,2))
         {
            continue; 
         }
         
         bFound = FALSE;
         
         for j in lTallied
         {
            if nth(i,2) = first(j)          
            {
               setnth(j,2,(nth(j,2)+1));
               bFound = TRUE;
            }            
         }
         
         if not bFound
         {
            lTallied = cons([nth(i,2),1],lTallied);
         }
      }
      
      if lTallied = $
      {
         Send(self,@Tied);
         
         return;
      }
      
      oHighest = $; iHighestCount = 0;      
      bTie = FALSE;
      
      for i in lTallied
      {
         if Nth(i,2) = iHighestCount
         {
            bTie = TRUE;
         }
         
         if Nth(i,2) > iHighestCount
         {
            oHighest = first(i);
            iHighestCount = nth(i,2);
            bTie = FALSE;
         }         
      }
      
      if bTie
      {
         Send(self,@Tied);
         return;
      }

      %% Okay, we should have a clear justicar chosen now.
      plVotes = $;

      Send(self,@SetJusticar,#who=oHighest);

      return;
   }
   
   Tied()
   {
      Send(self,@Say,#message_rsc=barloqueclerk_votes_tied);         
      piJusticar_State = STATE_ACCEPTING_VOTES;
      piDayCounter = piTiebreakerDuration;
      
      return;
   }

   GetJusticar()
   {
      return poJusticar;
   }

   SetJusticar(who = $, bNewVote = FALSE)
   "Sets the Justicar.  Set who = NIL and bNewVote = TRUE to start a new vote."
   {
      local oBook, sString, sString2;

      poJusticar = who;

      % reinitialize the votes.
      piPardoned = 0;
      piPardonedMurderers = 0;
      piPardonedOutlaws = 0;
      plPardons = $;

      if poJusticar <> $
      {
         Send(self,@Say,#message_rsc=barloqueclerk_votes_tallied);
         Send(self,@Say,#message_rsc=barloqueclerk_new_justicar,
              #parm1=Send(poJusticar,@GetTrueName),#type1=STRING_RESOURCE);
    
         if poOwner <> $
         {
            oBook = Send(poOwner,@GetBook);

            ClearTempString();
            AppendTempString(barloque_clerk_announce_winner_subject);
            sString2 = CreateString();
            setString(sString2,GetTempstring());

            ClearTempString();
            AppendTempString(barloque_clerk_announce_winner1);
            AppendTempString(Send(poJusticar,@GetTrueName));
            AppendTempString(barloque_clerk_announce_winner2);
            sString = CreateString();
            setString(sString,GetTempString());

            Send(oBook,@PostNews,#what=self,#title=sString2,#body=sString);
         }
         
         Send(poJusticar,@ReceiveNestedMail,#nest_list = [4,barloque_clerk_mail],
                 #from=vrName,#dest_list=[poJusticar]);

         % Set the proper status if it's not already set.
         if piJusticar_State <> STATE_TERM_IN_OFFICE
         {
            piJusticar_State = STATE_TERM_IN_OFFICE;
            piDayCounter = piOfficeDuration;
         }
      }
      else
      {
         if poOwner <> $
         {
            oBook = Send(poOwner,@GetBook);

            ClearTempString();
            AppendTempString(barloque_clerk_election_no_justicar_subject);
            sString2 = CreateString();
            setString(sString2,GetTempstring());

            ClearTempString();
            AppendTempString(barloque_clerk_election_no_justicar);
            sString = CreateString();
            setString(sString,GetTempString());

            Send(oBook,@PostNews,#what=self,#title=sString2,#body=sString);
         }

         if bNewVote
         {
            % Don't automatically restart the voting.  Players were exploiting
            %  this to get more pardons by making a Justicar mule go outlaw when
            %  the pardons were used up.
            % This is kept for admin override reasons.
            piJusticar_State = STATE_ACCEPTING_VOTES;
            piDayCounter = piVotingDuration;
         }

      }

      return poJusticar;
   }

   IsPlayerSeniorEnough(who = $)
   "Determine whether the given player is senior enough to partipate in Justicar voting. "
   "This is to prevent mules from swamping the voting."
   {
      return Send(who, @GetBaseMaxHealth) >= 
             Send(Send(SYS, @GetSettings), @GetMinHPForJusticar);
   }

   ResetBrain()
   {
      poBrain = Send(SYS,@FindBrainByNum,#num=viBrain_type);
      
      return;
   }

   Delete()
   {
      psJunkString = $;
      Send(SYS,@DeleteCaramo);
      
      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

