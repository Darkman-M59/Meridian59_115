% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OneCouncilor is Council

constants:

   include blakston.khd
   NUM_SPELLS_FOR_SPECIAL = 16

resources:

   oneCouncilor_name_rsc = "Alzahakar"
   oneCouncilor_icon_rsc = onecon.bgf
   oneCouncilor_desc_rsc = "Bekannt als der mächtigste Zauberer des Königreiches, steht Alzahakar stolz vor Dir. Du kannst den Widerstreit der vier verschiedenen Gottheiten in ihm spüren. Als einer der ältesten Freunde von König Zarkos V. berät er die Prinzessin seit ihrer Geburt."



   onecon_true_ideal_rsc = "Ich habe großen Respekt vor Deinen magischen Kenntnissen. Ich bin sehr erfreut, dass Du mir das Artefakt zurückgebracht hast."
   onecon_half_ideal_rsc = "Ich wäre eher beeindruckt, wenn Du mehr Zaubersprüche wüßtest, denn Du besitzt Potential."

   onecon_not_ready = "Du bist noch nicht bereit, die vergessenen Künste zu lernen."
   onecon_already_has = "Du weißt bereits um die verlorenen Geheimnisse von Riija."

   onecon_unwanted_give = "~k%s%s sagt zu Dir, \"Was für einen Nutzen könnte schon ein Zauberer meines Kalibers davon haben?~n~k\""


classvars:

   vrName = oneCouncilor_name_rsc
   vrDesc = oneCouncilor_desc_rsc
   vrIcon = oneCouncilor_icon_rsc
   viAttributes = MOB_NOFIGHT | MOB_NOMOVE | MOB_LISTEN | MOB_RANDOM | MOB_RECEIVE | MOB_TEACHER
   viOccupation = MOB_ROLE_COUNCILMEMBER
   viInitialState = 201  %leaning to the princess
   viGender = GENDER_MALE   

   viHomeroom = RID_HERMITHUT
   viMyRow = 4
   viMyCol = 8
   viMyAngle = ANGLE_WEST

   vrUnwanted_give = onecon_unwanted_give


properties:

   piStateBump=1

messages:

   AffectMood( why = $, what = $ )
   {
      if( why = MOODMOD_FACTION_CHANGE )
      {
	 if( what = FACTION_DUKE )
	 {
	    send( self, @SetMood, #new_mood = piMood - 2 );
	    return;
	 }
	 if( what = FACTION_PRINCESS )
	 {
	    send( self, @SetMood, #new_mood = piMood + 2 );
	    return;
	 }
      }
      return;
   }

   Constructor()
   {
     plWantedItems = [&OneToken];
     propagate;
   }

   CheckSpecialDeliverer(who=$)
   {
     piStateBump = 1; 
     if Length(Send(who,@GetSpellList)) >= NUM_SPELLS_FOR_SPECIAL
     { piStateBump = 2; return OneCon_true_ideal_rsc; }
     else { return OneCon_half_ideal_rsc; }
     return;
   }

   SetForSale()
   {
		plFor_Sale = [$,$,[SID_SHADOW_FORM]];
		return;
   }

   CanDoTeach(who=$,sid=0)
   {
		if sid = SID_SHADOW_FORM
		{
			if not send(self,@CanAddSpell,#report = TRUE,#who=who,#num=sid)
			{ return FALSE; }
		}
		propagate;
   }

	CanAddSpell(who=$,num=0, report = FALSE)
	{
		local lSpells, i, bOkay, oSpell;
			
		if who = $ or num = 0
		{ DEBUG("Called canaddspell with bad parameters!"); return FALSE; }

		if num <> SID_SHADOW_FORM   { propagate; }
		
		if send(who,@hasspell,#num=SID_SHADOW_FORM)
		{
			if report
			{ post(self,@saytoone,#target=who,#message_rsc=onecon_already_has,
			   #parm1=send(who,@getlordlady)); }
			return FALSE;
		}
		
		bOkay = FALSE;
		lSpells = send(who,@GetSpellList);
		for i in lSpells
		{
			oSpell = send(SYS,@FindSpellByNum,#num=send(who,@decodespellnum,#compound=i)); 
			if send(oSpell,@GetLevel) > 4
			{
				bOkay = TRUE;
				break;
			}
		}
		if bOkay		%% player has a fifth level spell, can learn shadowform
		{
           % if report
		   %	{ post(self,@saytoone,#target=who,#message_rsc=onecon_ready);  }
			return TRUE;
		}
		%%%% player doesn't have a fifth level spell, denied
        
		if report
		{ post(self,@saytoone,#target=who,#message_rsc=onecon_not_ready); }
		return FALSE;					

	}

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


