% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%These are the old wands which do not work the same as spellwands.  They should be
%tied into spellitem at some point/
SpecialWand is PassiveItem

constants:

   include blakston.khd

resources:

   SpecialWand_desc_rsc = "Du kannst die magische Energie spüren, die den Stab durchströmt."
   SpecialWand_broken = "%s%s zerbricht in Stücke!"
   SpecialWand_useless = "Der Stab hat seine magische Energie verbraucht und ist jetzt verkohlt und nutzlos."
   SpecialWand_desc_broken_rsc = "Dieser einst so prächtige Stab ist jetzt nur noch ein wertloses Stück Holz."

   SpecialWand_target_gone = "Du zielst mit Deinem Zauberstab sorgfältig auf %s%s, aber plötzlich merkst Du, dass Dein Ziel verschwunden ist."

classvars:

%the only way to get an item to "apply" is to call it a single use item,hence:
   viUse_type = ITEM_SINGLE_USE
%a wand will have 5 charges, default
   viHits_init_min = 5
   viHits_init_max = 5

   viObject_flags = APPLY_YES | GETTABLE_YES
   viItem_type = ITEMTYPE_WAND

properties:

   vrDesc = SpecialWand_desc_rsc

messages:

   %the subclass should define what the wand can apply itself to
   ReqNewApply(what = $, apply_on = $)
   {
      return True;
   }

   NewApplied(what = $,apply_on = $)
   "Casts the spell specified by the wand (see subclass) on whatever it"
   "is being applied to, then reduces 1 charge--break the wand if last charge"
   {
%%%%%%%%%%%%%%%%%%%%if the wand is broken, the apply procedure%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%does not even get this far%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   %first check and see if already broken
%      if piHits <= 0
%      {
%         Send(poOwner,@MsgSendUser,#message_rsc=SpecialWand_useless);
%         return;
%      }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

      piHits = piHits - 1;
      %cast the spell specific to the wand
      Send(self,@CastSpell,#what=what,#apply_on=apply_on);
      %check and see if that does in the wand 
      if piHits <= 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=SpecialWand_broken,
           #parm1=send(self,@getcapdef),#parm2=send(self,@getname));
         vrDesc = SpecialWand_desc_broken_rsc;
      }
      
      return;
   }

   CastSpell(what = $, apply_on = $)
   {
      return;
   }

   IsRangedAttack()
   {
      return TRUE;
   }


end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

