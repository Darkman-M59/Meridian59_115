% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BlackDagger is Weapon

constants:

   include blakston.khd
   include protocol.khd

   PLAYER_HEAL_TIME = 300000     %% every five minutes, you get a HP back.
   DAGGER_HEAL_TIME = 28800000   %% every eight hours, the dagger gets an HP back.

   PLAYER_MAX = 4
   DAGGER_MAX = 5

resources:

   BlackDagger_name_rsc = "Der Schwarze Dolch"
   BlackDagger_icon_rsc = bkswd.bgf
   BlackDagger_desc_rsc = "Diese elegante Klinge dürfte ziemlich gut zwischen zwei Schulterblätter passen. \n\n%s%s%s"

   
   BlackDagger_gamestart_glow = "~IDein Dolch leuchtet in einem unirdischen Licht auf."

   BlackDagger_impact = "~IDer Schwarze Dolch zerbricht beim ersten Stich!"
   BlackDagger_cant_use = "~IDu versuchst, die dunkle Klinge zu führen, aber Dein Herz scheint sich noch nicht mit ihr vereinigt zu haben."
   BlackDagger_shiver = "~IDer Schwarze Dolch zittert plötzlich merkwürdig in Deiner Hand."

   BlackDagger_notches = "Insgesamt %i Kerben sind in den Griff eingeritzt."
   BlackDagger_one_notch = "Du siehst im Griff eine einzige, elegante Kerbe."
   BlackDagger_no_notches = "Der Griff ist glatt und in einwandfreiem Zustand. "

   BlackDagger_4_gems = "Alle vier Edelsteine im Griff leuchten mit unvergleichlicher Brillanz. "
   BlackDagger_3_gems = "Drei der Edelsteine im Griff strahlen einen erfrischenden Glanz aus. "
   BlackDagger_2_gems = "Zwei der Edelsteine im Griff scheinen heller als die anderen zu leuchten. "
   BlackDagger_1_gems = "Nur einer der vier Edelsteine leuchtet, und selbst dieser scheint zu flimmern. "

   BlackDagger_runes = "In der Klinge scheinen Runen eingraviert zu sein; Du kannst Dir allerdings keinen Reim daraus machen. "
   BlackDagger_name = "In der Klinge ist sehr deutlich ein Name eingraviert. Er lautet: %q! "
   BlackDagger_window_overlay_rsc = povbkswd.bgf
   BlackDagger_player_overlay = bkswdov.bgf

   BlackDagger_miss = "%s%s wird von Deinem Schwarzen Dolch verfehlt."
   BlackDagger_miss_target = "%s%s verfehlt Dich mit dem %sSchwarzen Dolch."

   BlackDagger_hit = "%s%s wird von Deinem Schwarzen Dolch getroffen, aber die Klinge scheint dabei ihre Kraft zu verlieren."
   BlackDagger_hit_target = "%s%s trifft Dich mit dem Schwarzen Dolch, fügt Dir aber fast keine Verletzung zu."

   BlackDagger_surehit = "%s%s wird von Deinem Schwarzen Dolch getroffen. Die ganze Klinge bohrt sich in den Gegner."
   BlackDagger_surehit_target = "%s%s trifft Dich mit dem %sSchwarzen Dolch, und Du spürst, wie nach Deiner Seele gegriffen wird!"
   BlackDagger_dies = "%s%s hat Dich erschlagen!"
   BlackDagger_dies_killer = "%s%s wurde durch Deinen Schwarzen Dolch ermordet!"

   BlackDagger_no_leave = "Als Du den Schwarzen Dolch loslässt, scheint er an Deiner Hand zu kleben!"
   BlackDagger_glows = "~IEiner der Edelsteine im Griff Deiner Klinge flackert und erwacht wieder zum Leben."

   BlackDagger_mail_logoff = "Betreff: Nur Feiglinge ignorieren ihre Edelsteine.\n\nDu hast die Verbindung gelöst, während mindestens einer Deiner Edelsteine nicht leuchtete. Deswegen wirst Du aus dem Spiel der Meuchelmörder verbannt.\n\n-- Roq"



   BlackDagger_mail_warning = "Betreff: Ich beobachte Dich, Unwürdiger.\n\nDu warst nicht lange genug online, um am Spiel der Meuchelmörder teilzunehmen. Sofern ich das nochmals feststellen muss, werde ich Dich ohne Vorwarnung aus dem Spiel verbannen. \n\n-- Roq"




   BlackDagger_roq = "Roq, die dunkle Klinge"

   bkswd_dead_name_rsc = "Ermordeter Abenteurer"

classvars:

   vrName = BlackDagger_name_rsc
   vrIcon = BlackDagger_icon_rsc

   % Black daggers are low quality swords (?), just like shortswords
   viWeaponType = WEAPON_TYPE_THRUST
   viWeaponQuality = WEAPON_QUALITY_LOW

   vrWeapon_window_overlay = BlackDagger_window_overlay_rsc
   vrWeapon_overlay = BlackDagger_player_overlay

   viGround_group = 2
   viInventory_group = 1
   viBroken_group = 3

   viBulk = 35
   viWeight = 25

   viItem_type = ITEMTYPE_WEAPON | ITEMTYPE_SPECIAL

properties:

   piAttack_type = ATCK_WEAP_NONMAGIC+ATCK_WEAP_PIERCE

   piNotches = 0
   piPlayer_hits = 4
   piDagger_hits = 5
   piShiver = 0

   pbWarned = 0

   ptPlayer_heal = $
   ptDagger_heal = $
   ptShiver = $

   piTime_Online = 0

messages:

   ShowDesc()
   {
      local oRSC, oTarget, bDo_notch;

      bDo_Notch = FALSE;
      AddPacket(4,BlackDagger_desc_rsc);

      % If a match isn't in session, show the defaults
      %   and some unidentifiable runes instead of a name.
      if NOT Send(Send(SYS,@GetAssassinGame),@InSession)
      {
         AddPacket(4,BlackDagger_4_gems);
         AddPacket(4,BlackDagger_no_notches);
         AddPacket(4,BlackDagger_runes);
         
         return;
      }

      % The Gems show how much life you have left;
      if piPlayer_hits = 4
      {
         AddPacket(4,BlackDagger_4_gems);
      }
      else
      {
         if piPlayer_hits = 3
         {
            AddPacket(4,BlackDagger_3_gems);
         }
         else
         {
            if piPlayer_hits = 2
            {
               AddPacket(4,BlackDagger_2_gems);
            }
            else
            {
               if piPlayer_hits = 1
               {
                  AddPacket(4,BlackDagger_1_gems);
               }
            }
         }
      }

      % The notches show the number of kills that player has.
      if piNotches < 1 { AddPacket(4,BlackDagger_no_notches); }
      else
      {
         if piNotches = 1
         {
            AddPacket(4,BlackDagger_one_notch);
         }
         else
         {
            AddPacket(4,BlackDagger_notches);
            bDo_notch = TRUE;
         }
      }

      % Tell the player who his target is
      oTarget = Send(Send(SYS,@GetAssassinGame),@GetPrimaryOpponent,#who=poOwner);
      if oTarget = $
      {
         debug("Invalid target!  Black dagger in hands of non-combatant?");
         AddPacket(4,BlackDagger_runes);

         return;
      }

      % Put the name string on the black dagger.  Add the name after you
      %  put the notches in.
      AddPacket(4,BlackDagger_name);

      % Add the number of notches to the packet
      if bDo_Notch
      {
         AddPacket(4,piNotches);
      }

      % Give the name on the black dagger.
      AddPacket(STRING_RESOURCE,Send(oTarget,@GetTrueName));

      return;
   }

   InitGame()
   {
      piNotches = 0;
      piPlayer_hits = 4;
      piDagger_hits = 5;
      piShiver = 0;
      pbWarned = FALSE;
      piTime_Online = 0;

      return;
   }

   AssassinHit(target=$)
   {
      local oDagger;

      if target = $
      {
         DEBUG("Reached AssassinHit with Target equal NIL!");
         
         return;
      }

      oDagger = Send(Send(SYS,@GetAssassinGame),@GetDagger,#who=target);

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_surehit,
           #parm1=Send(target,@GetDef),#parm2=Send(target,@GetName));
      Send(target,@MsgSendUser,#message_rsc=BlackDagger_surehit_target,
           #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName),
           #parm3=Send(poOwner,@GetHisHer));

      Send(poOwner,@DoHitMessageSound,#what=target,
           #damage=10,#stroke_obj=Send(SYS,@findskillbynum,#num=SKID_SLASH));
      Send(oDagger,@AssassinTakesHit,#attacker=poOwner);
      
      % Does the animations and overlays.
      Send(self,@WeaponAttack);

      return;
   }

   AssassinHitWrongTarget(target=$)
   {
      if target = $
      {
         DEBUG("Reached AssassinHit with Target equal NIL!");
         
         return;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_hit,
           #parm1=Send(target,@GetDef),#parm2=Send(target,@GetName));
      Send(target,@MsgSendUser,#message_rsc=BlackDagger_hit_target,
           #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName));

      Send(poOwner,@DoHitMessageSound,#what=target,
           #damage=1,#stroke_obj=Send(SYS,@FindSkillByNum,#num=SKID_SLASH));

      % Does the animations and overlays
      Send(self,@WeaponAttack);

      piDagger_hits = piDagger_hits - 1;
      if piDagger_hits < 1
      {
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_impact);
         Send(Send(SYS,@GetAssassinGame),@QuitCombatant,#who=poOwner);
      }
      else
      {
         if ptDagger_heal = $
         {
            ptDagger_heal = CreateTimer(self,@DaggerHealTimer,DAGGER_HEAL_TIME);
         }
      }
      
      return;
   }

   AssassinMiss(target=$)
   {
      if target = $
      {
         DEBUG("Reached AssassinHit with Target equal NIL!");
         
         return;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_miss,
          #parm1=Send(target,@GetDef),#parm2=Send(target,@GetName));
      Send(target,@MsgSendUser,#message_rsc=BlackDagger_miss_target,
          #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName),
          #parm3=Send(poOwner,@GetHisHer));

      % Does the animations and overlays
      Send(self,@WeaponAttack);
      Send(Send(SYS,@findskillbynum,#num=SKID_SLASH),@SendMissMessageToAttacker,
           #who=poOwner,#victim=target,#weapon_used=self,#bText=FALSE);

      return;
   }

   AssassinTakesHit(attacker=$)
   {
      if attacker = $
      {
         DEBUG("Reached AssassinTakesHit with Target equal NIL!");

         return;
      }

      piPlayer_hits = piPlayer_hits - 1;
      if piPlayer_hits < 1
      {
         Send(self,@AssassinDies,#attacker=attacker);
      }
      else
      {
         if ptPlayer_heal = $
         {
            ptPlayer_heal = CreateTimer(self,@PlayerHealTimer,PLAYER_HEAL_TIME);
         }
      }
      
      return;
   }

   AssassinDies(attacker=$)
   {
      local oDagger;

      if attacker = $
      {
         DEBUG("Reached AssassinDies with Target equal NIL!");
         
         return;
      }

      oDagger = Send(Send(SYS,@GetAssassinGame),@GetDagger,#who=attacker);
      Send(oDagger,@AddNotch);

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_dies,
           #parm1=Send(attacker,@GetDef),#parm2=Send(attacker,@GetName));
      Send(attacker,@MsgSendUser,#message_rsc=BlackDagger_dies_killer,
           #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName));
      Send(Send(poOwner,@getOwner),@NewHold,#what=Send(poOwner,@CreateCorpse,#Assassinated=TRUE),
           #new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol),
           #fine_row=16,#fine_col=16, #new_angle=Send(poOwner,@GetAngle));

      Send(poOwner,@TeleportTo,#rid=RID_UNDERWORLD);

      % Make this a penalty-free "death".
      Send(poOwner,@SetDeathCost,#DeathCost=0);
      Send(Send(SYS,@GetAssassinGame),@QuitCombatant,#who=poOwner,#kill=TRUE);
     
      return;
   }

   PlayerHealTimer()
   {
      if piPlayer_hits < 1 OR piPlayer_hits > (PLAYER_MAX - 1)
      {
         DEBUG("PlayerHealTimer called while piPlayer_hits was an invalid value!");

         return;
      }

      if piPlayer_hits < PLAYER_MAX
      {
         piPlayer_hits = piPlayer_hits + 1;
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_glows);
      }

      if piPlayer_hits < PLAYER_MAX
      {
         ptPlayer_heal = CreateTimer(self,@PlayerHealTimer,PLAYER_HEAL_TIME);
      }
      else
      {
         ptPlayer_heal = $;
      }

      return;
   }

   DaggerHealTimer()
   {
      if piDagger_hits < 1 OR piDagger_hits > (DAGGER_MAX - 1)
      {
         DEBUG("DaggerHealTimer called while piDagger_hits was an invalid value!");

         return;
      }

      if piDagger_hits < DAGGER_MAX
      {
         piDagger_hits = piDagger_hits + 1;
      }

      if piDagger_hits < DAGGER_MAX
      {
         ptDagger_heal = CreateTimer(self,@DaggerHealTimer,DAGGER_HEAL_TIME);
      }
      else
      {
         ptDagger_heal = $;
      }

      return;
   }

   AddNotch()
   {
      piNotches = piNotches + 1;
      
      return;
   }

   ReqUse(what=$)
   {
      local oGame;
      
      oGame=Send(SYS,@GetAssassinGame);

      if Send(oGame,@InSession) AND Send(oGame,@isCombatant,#who=what)
      {
         return TRUE;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_cant_use);
      
      return FALSE;
   }

   % Here for compatibility.  Not used.

   ModifyHitRoll(hit_roll = 0)
   {
      return 0;
   }

   GetDamage()
   {
      return 0;
   }

   CanMend()
   "Black Daggers are not mendable (they also don't take damage)"
   {
      return FALSE;
   }

   CanWeaken()
   "Brittle will not work on a black dagger."
   {
      return FALSE;
   }

   CanSwap()
   "Swap will never yank a black dagger."
   {
      return FALSE;
   }

   CanShatter()
   "Black daggers will not shatter."
   {
      return FALSE;
   }

   CanEnchant()
   {
      return FALSE;
   }

   ReqNewOwner()
   "Black daggers skip this function when placed in someone's inventory, "
   "and when deleted.  Black daggers, however, may not be dropped, sold to an "
   "NPC or offered to anyone."
   {
      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_no_leave);
      
      return FALSE;
   }

   UserLogoff()
   {
      local iStart_time, iLogon_time;

      if piPlayer_hits < PLAYER_MAX
      {
         Send(poOwner,@ReceiveNestedMail,#nest_list=[4,BlackDagger_mail_logoff],
              #from=BlackDagger_roq,#dest_list=[poOwner]);
         Send(Send(SYS,@GetAssassinGame),@QuitCombatant,#who=poOwner);

         return;
      }

      % Okay, add the player's time to online time.
      iStart_time = Send(Send(SYS,@GetAssassinGame),@GetStartTime);
      iLogon_time = Send(poOwner,@GetLastLoginTime);

      if iStart_time > iLogon_time
      {
         piTime_online = piTime_online + (GetTime() - iStart_Time);
      }
      else
      {
         piTime_online = piTime_online + (GetTime() - iLogon_time);
      }

      propagate;
   }

   GetTimeOnline()
   {
      local iStart_time, iLogon_time;

      if NOT Send(poOwner,@IsLoggedOn)
      {
         return piTime_online;
      }

      iStart_time = Send(Send(SYS,@GetAssassinGame),@GetStartTime);
      iLogon_time = Send(poOwner,@GetLastLoginTime);   

      if iStart_time > iLogon_time
      {
         return (piTime_online + (GetTime() - iStart_Time));
      }
      
      return (piTime_online + (GetTime() - iLogon_time));
   }

   AddShiver()
   {      
      piShiver = piShiver + 1;
      
      return;
   }

   UserLogon()
   {
      if piTime_Online = 0
      {
         ptShiver = CreateTimer(self,@ShiverTimer,10000);
      }

      % Just in case they logged off recently.
      if ptShiver <> $                
      {
         DeleteTimer(ptShiver);
         ptShiver = $;
      }

      if piTime_Online = 0
      {
         ptShiver = CreateTimer(self,@ShiverTimer,10000);
         
         propagate;
      }

      % Make the shivers go off after a delay, so you notice them more.
      if piShiver > 0
      {
         ptShiver = CreateTimer(self,@ShiverTimer,10000);
      }

      propagate;
   }

   ShiverTimer()
   "This is only called on logon if something has changed while the player "
   "was offline."
   {
      ptShiver = $;

      if piShiver < 0 AND piTime_online <> 0
      {
         DEBUG("piShiver not less than zero and piTime_online not = 0!");
         
         return;
      }

      if piTime_online = 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_gamestart_glow);
       
         return;
      }

      while piShiver > 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_shiver);
         piShiver = piShiver - 1;
      }
      
      return;
   }

   GetNotches()
   {
      return piNotches;
   }

   HasBeenWarned()
   {
      return pbWarned;
   }

   Warn()
   {
      Send(poOwner,@ReceiveNestedMail,#nest_list=[4,BlackDagger_mail_warning],
           #from=BlackDagger_roq,#dest_list=[poOwner]);
      pbWarned = TRUE;
      
      return;
   }

   DropOnDeath()
   "A player does NOT drop a dagger when he dies."
   {
      return FALSE;
   }

   CanBeGivenToNPC()
   "NPCs will refuse to take this item if offered to them."
   {
      return FALSE;
   }

   CanBeStoredInVault()   
   {
      return FALSE;
   }

   ReqDMDelete()
   "Item will not be deleted by DM Clear Inventory command"
   {
      return FALSE;
   }
	
   Delete()
   {
      if ptDagger_heal <> $
      {
         DeleteTimer(ptDagger_heal);
         ptDagger_heal = $;
      }
      
      if ptPlayer_heal <> $
      {
         DeleteTimer(ptPlayer_heal);
         ptPlayer_heal = $;
      }
      
      if ptShiver <> $
      {
         DeleteTimer(ptShiver);
         ptShiver = $;
      }

      propagate;
   }

   ActivateCheapDeath()
   "Stub for ITEMTYPE_SPECIALs like the Amulet of the Three and the Sword of the Hunt"
   {
      return;
   }

   CleanUp()
   {
		if poOwner <> $
		{
			debug("Cleaning up daggers.  Found one contained by",Send(poOwner,@GetName));
		}
		
		Send(self,@Delete);
		
		return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

