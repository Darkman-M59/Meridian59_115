% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BloodInheritance is MultiCastSpell

constants:

   include blakston.khd

resources:


   BloodInheritance_name_rsc = "Bluterbe"
   BloodInheritance_icon_rsc = ibloodin.bgf
   BloodInheritance_desc_rsc = "Erfüllt eine Waffe mit der boshaften Macht von Qor. Es ist unmöglich genau vorherzusagen, welche Form dieses dunkle Gebet annehmen wird, aber es wird immer fürchterlich sein. Benötigt Blut von Schamanen, Wurzelknollen und Orkzähne."




   
   BloodInheritance_sound = qunbond.wav

   BloodInheritance_bad_target = "Du musst den Zauber auf eine Waffe richten."
   BloodInheritance_bad_target2 = "Du hast diese Waffe bereits verzaubert."
   BloodInheritance_succeeded = "Die böse Kraft Deines Spruchs befällt %s%s."

classvars:

   vrName = BloodInheritance_name_rsc
   vrIcon = BloodInheritance_icon_rsc
   vrDesc = BloodInheritance_desc_rsc

   vrSucceed_wav = BloodInheritance_sound

   viMana = 50

   viSpell_num = SID_BLOOD_INHERITANCE
   viSchool = SS_QOR
   viSpell_level = 5

   viSpellExertion = 50
   viCast_time = 20000
   viChance_To_Increase = 35

   viManaDrain = 1       % Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    % Drain some mana every viDrainTime milliseconds

   viMultiCast_Spellpower = 3000  % 10 minutes for worst case, 2.3 mins for best case. 

properties:                     

messages:      


   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&ShamanBlood,2] ,plReagents);
      plReagents = Cons([&EntrootBerry,2] ,plReagents);
      plReagents = Cons([&OrcTooth,1] ,plReagents);

      return;
   }
   
   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      % Gotta be a melee weapon. This spell will only create magical weapons that
      % can normally be obtained, so don't allow ranged weapon to be given procs.
      if not isClass(first(lTargets),&Weapon)
         OR isClass(first(lTargets),&RangedWeapon)
      {
         Send(who,@MsgSendUser,#message_rsc=BloodInheritance_bad_target);
         return;
      }

      % Can't have any other enchantments.
      if send(first(lTargets),@HasAnyAttribute)
      {
         Send(who,@MsgSendUser,#message_rsc=BloodInheritance_bad_target2);
         return;
      }
      
      propagate;
   }

   PrismCast(spellpower = 0, lCasters=$, lTargets=$) 
   {
      local oCaster, iRandom, ItemAtt;

      for oCaster in lCasters
      {
         Send(oCaster,@MsgSendUser,#message_rsc=BloodInheritance_succeeded,
                  #parm1=send(first(lTargets),@GetIndef),
                    #parm2=send(first(lTargets),@GetName));
      }

      iRandom = Random(1,10);

      if iRandom = 1
      {
         ItemAtt = WA_VAMPER;
      }

      if iRandom = 2
      {
         ItemAtt = WA_BLINDER;
      }

      if iRandom = 3
      {
         ItemAtt = WA_PARALYZER;
      }

      if iRandom >= 4
      {
         ItemAtt = WA_CURSED;
      }

      send(send(SYS,@FindItemAttByNum,#Num=ItemAtt),@AddToItem,#oItem=first(lTargets));

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

