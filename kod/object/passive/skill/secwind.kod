% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SecondWind is Skill

constants:

   include blakston.khd

resources:

   SecondWind_name_rsc = "Zweiter Atem"
   SecondWind_icon_rsc = isecwind.bgf
   SecondWind_desc_rsc = "Der zweite Atem gibt dem starken Abenteurer die nötige Ausdauer um weiterzukämpfen selbst wenn er erschöpft ist. Kurz vor der völligen Erschöpfung gibt diese Fähigkeit neue Energie. Für eine kurze Zeit danach kann man sich allerdings weder durch Essen noch Rasten erholen."




   SecondWind_skill_intro = "Waffenzirkel 4: Die Fähigkeit, selbst bei völliger Erschöpfung weiterzumachen."

   SecondWind_success = "~BAls Dich die Erschöpfung packt, holst Du tief Luft und frische Energie durchströmt Deinen Körper!~B"
   SecondWind_sound = wscndwnd.wav

classvars:

   vrName = SecondWind_name_rsc
   vrIcon = SecondWind_icon_rsc
   vrDesc = SecondWind_desc_rsc

   vrSkill_intro = SecondWind_skill_intro

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_SECOND_WIND
   viSchool = SKS_FENCING
   viSkill_Level = 4
   viChance_to_Increase = 50

   viSkillExertion = 0
   vbCheck_exertion = FALSE

   vbAutomatic = TRUE

properties:

messages:

   GetRequisiteStat(who=$)
   "Varies from skill to skill and spell to spell."
   {
      return Send(who,@GetStamina);
   }

   SkillFailed(who=$)
   {
      % Override base class behavior to do nothing.  Base class sends a
      %  spammy message if we fail.
      return;
   }

   DoSkill(who=$)
   {
      local iVigor;
   
      if who = $ 
      {
         debug("DoSkill called with bad who.");
         return FALSE;
      }
      
      if NOT (Send(self,@CanPayCosts,#who=who) AND Send(self,@PayCosts,#who=who))
      {
         return FALSE;
      }
      
      send(who,@MsgSendUser,#message_rsc=SecondWind_success);
      send(who,@WaveSendUser,#wave_rsc=SecondWind_sound);
      iVigor = 40 + (Send(self,@GetRequisiteStat,#who=who)/2) + Send(who,@GetSkillAbility,#Skill_num=viSkill_num);
      % Reverse sign so we're taking away exertion.
      iVigor = -iVigor;
      Send(who,@AddExertion,#amount=10000*iVigor);

      propagate;
   }

   GetWaitTime(who=$)
   {
      local iStamina, iWaitTime;
   
      if (who=$)
      {
         debug("GetWaitTime called with bad who.");
         return FALSE;
      }
      
      iStamina = Send(self,@GetRequisiteStat,#who=who);
      iWaitTime = ((100-iStamina) * Send(who,@GetSkillAbility,#Skill_num=viSkill_num)/100) + iStamina;
      % 5 to 10 minutes wait time before you can leap into the action again.
      iWaitTime = (600 - (iWaitTime*3)) * 1000;

      return iWaitTime;
   }

   % This is the initial chance to advance.
   GetInitialChance(who = $)
   {
      % No easy-cheezing it.  No advancement if you have an "easy" way to trigger
      %  the skill.  This includes tokens, cursed rings, or (token) deaths.
      if send(who,@PossessesA,#class=&Token)
         OR send(who,@PossessesA,#class=&RingOfLethargy)
         OR send(send(who,@GetOwner),@GetRoomNum) = RID_UNDERWORLD
      {
         % No initial chance to succeed; that is, you will always fail to advance.
         return 0;
      }

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

