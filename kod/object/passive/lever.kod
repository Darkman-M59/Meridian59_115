% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Lever is PassiveObject

constants:

   include blakston.khd

resources:

   lever_name_rsc = "Der Hebel"
   lever_icon_rsc = lever.bgf
   default_lever_desc_rsc = "Der Mechanismus, mit dem dieser Hebel verbunden ist, scheint völlig durchgerostet zu sein. Welchem Zweck er auch ursprünglich dienen mochte, jetzt ist er auf jeden Fall unbrauchbar."



   lever_not_in_range = "Der Hebel ist nicht nahe genug, um ihn bedienen zu können."
   lever_stuck = "Der Hebel scheint zu klemmen; Du kannst versuchen, was du willst, aber du kannst ihn nicht bewegen."

   lever_changed = "Du legst den Hebel um."

classvars:

   vrName = lever_name_rsc

   viObject_flags = ACTIVATE_YES

properties:

   vrDesc = default_lever_desc_rsc
   vrIcon = lever_icon_rsc

   piState = LEVER_UP
   pbStuck = false
   piRange = 3
   pbBlueNameProtected = TRUE

messages:

   Constructor(description=default_lever_desc_rsc,icon=lever_icon_rsc,range=3,stuck=false,BlueNameProtected=TRUE)
   {
      vrIcon = icon;
      vrDesc = description;
      piRange = range;
      pbStuck = stuck;
      pbBlueNameProtected = BlueNameProtected;
      propagate;
   }

   TryActivate(who=$)
   "Return False only if you want user.kod to send its own error message to user."
   {
      if (abs(send(who,@getrow)-send(self,@getrow)) > piRange)
            or (abs(send(who,@getcol)-send(self,@getcol)) > piRange)
      {
         Send(who,@MsgSendUser,#message_rsc=lever_not_in_range);          
         return True;
      }

      if pbBlueNameProtected and (not isClass(who,&Admin)) and (not send(who,@CanAdvance)) {
         Send(who,@DontInterfere);
         return True;
      }
      if pbStuck or (not send(who,@CanAdvance)) {
         Send(who,@MsgSendUser,#message_rsc=lever_stuck);
         return True;
      }

      send(self,@SwitchLever);
      
      Send(who,@MsgSendUser,#message_rsc=lever_changed);          
      
      return True;
   }

   SwitchLever()
   {
      if piState = LEVER_UP {
         piState = LEVER_DOWN;
      }
      else {
         piState = LEVER_UP;
      }
      Send(poOwner,@SomethingChanged,#what=self);
      return;
   }

   SetStuck(newstuck=false)
   {
      pbStuck = newstuck;
      return;
   }

   GetState()
   {
      return piState;
   }

   ReqNewOwner(what = $)
   {
      return False;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,piState);
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

