% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Dice is PassiveObject

constants:

   include blakston.khd
   DICE_RANGE = 3

   ROLL_DELAY = 1000

resources:

   dice_name = "Das Würfelpaar"
   dice_desc = "Zwei sechsseitige Würfel, die in vielen verschiedenen Glücksspielen benutzt werden können. Die Würfel betrachtend, fängst Du Dich an zu fragen, ob Du heute nacht Glück hast."
   dice_icon = dice.bgf
   
   die_name = "Der Würfel"
   die_desc = "Ein einzelner Würfel liegt hier und wartet darauf, dass Du Dein Glück versuchst."
   die_icon = die.bgf

   dice_not_in_range = "Du bist nicht dicht genug an den Würfeln dran, um sie zu werfen!"

   dice_one = "eine Eins"
   dice_two = "eine Zwei"
   dice_three = "eine Drei"
   dice_four = "eine Vier"
   dice_five = "eine Fünf"
   dice_six = "eine Sechs"

   dieroll_rsc = "%s%s würfelt. %s%s zeigt %s!"
   diceroll_rsc = "%s%s würfelt. %s%s zeigt %s und %s! "

   dice_wav = dice.wav

classvars:
      
   viObject_flags = ACTIVATE_YES 

properties:

   vbPair = FALSE
   vrName = dice_name
   vrDesc = dice_desc   
   vrIcon = dice_icon

   ptRoll = $     %% This is simply used to keep the spam level tolerable.  3 seconds after each roll.

messages:

   Constructor(pair=FALSE)
   {
      vbPair = pair;
      if not vbPair
      {
         vrName = die_name;
	 vrDesc = die_desc;
	 vrIcon = die_icon;
      }
	
      propagate;
   }

   TryActivate(who=$)
   "Return False only if you want user.kod to send its own error message to user."
   {
      if poOwner = $
	  { DEBUG("TryActivate called with nil owner!"); return TRUE; }

      if ptRoll <> $  { return TRUE; }

      if isClass(who,&User) and poOwner = send(who,@getowner)
      {
	 if abs(send(who,@getrow)-send(self,@getrow)) < dice_RANGE
	    and abs(send(who,@getcol)-send(self,@getcol)) < dice_RANGE
	 {
	    send(self,@Roll,#who=who);
	 }
	 else
         {
            send(who,@msgsenduser,#message_rsc=dice_not_in_range);          
         }
      }
      return TRUE;
   }

   RollTimer()
   {
      ptRoll=$;
      return;
   }

   Roll(who=$)
   {
      local aRoll, bRoll, total, rDie1, rDie2;
      if who = $ { debug("Roll called without a who!"); return; }
      
      aRoll = random(1,6);
      bRoll = random(1,6);

      if aRoll = 1  { rDie1 = dice_one; }
      if aRoll = 2  { rDie1 = dice_two; }
      if aRoll = 3  { rDie1 = dice_three; }
      if aRoll = 4  { rDie1 = dice_four; }
      if aRoll = 5  { rDie1 = dice_five; }
      if aRoll = 6  { rDie1 = dice_six; }

      if bRoll = 1  { rDie2 = dice_one; }
      if bRoll = 2  { rDie2 = dice_two; }
      if bRoll = 3  { rDie2 = dice_three; }
      if bRoll = 4  { rDie2 = dice_four; }
      if bRoll = 5  { rDie2 = dice_five; }
      if bRoll = 6  { rDie2 = dice_six; }

      if not vbPair
      {
      send(self,@RoomMessage,#range=6,#message_rsc=dieroll_rsc,
	 #parm1=send(who,@getcapdef),#parm2=send(who,@getname),
	 #parm3=send(self,@Getdef),#parm4=send(self,@getName),#parm5=rDie1);
      }

      if vbPair
      {
      send(self,@RoomMessage,#range=6,#message_rsc=diceroll_rsc,
	 #parm1=send(who,@getcapdef),#parm2=send(who,@getname),
	 #parm3=send(self,@Getdef),#parm4=send(self,@getName),#parm5=rDie1,#parm6=rDie2);
      }
      Send(poOwner,@SomethingWaveRoom,#what=self,#wave_rsc=dice_wav);
      ptRoll = CreateTimer(self,@RollTimer,ROLL_DELAY);
      return;
   }

   RoomMessage(range = $, except = $, except_rsc = $, message_rsc = $,
               parm1 = $, parm2 = $, parm3 = $, parm4 = $,
               parm5 = $, parm6 = $, parm7 = $, parm8 = $)
   {
      local oRoom, oSource, i, range_squared;

      if range <> $
      {  range_squared = range * range;  }

      oSource = self;
      oRoom = poOwner;
      if oRoom = $
      {	 return FALSE;  }
      if oRoom = $ or not isClass(oRoom, &Room)
      {  return FALSE;  }

      for i in send(oRoom,@GetHolderActive)
      {
	 if not isClass(first(i),&Player)
	 {
	    continue;
	 }

	 if range <> $
	 {
	    if send(first(i),@SquaredDistanceTo,#what=oSource) >= range_squared
	    {  continue;  }
	 }

	 if first(i) = except
	 {
	    if except_rsc = $
	    {
	       continue;
	    }

	    % message comes from except_rsc, with parm1 missing.
	    send(first(i),@MsgSendUser,#message_rsc=except_rsc,
	       #parm1=parm2,#parm2=parm3,#parm3=parm4,#parm4=parm5,
	       #parm5=parm6,#parm6=parm7,#parm7=parm8);
	 }
	 else
	 {
	    send(first(i),@MsgSendUser,#message_rsc=message_rsc,
	       #parm1=parm1,#parm2=parm2,#parm3=parm3,#parm4=parm4,
	       #parm5=parm5,#parm6=parm6,#parm7=parm7,#parm8=parm8);
	 }
      }
      return;
   }

   ReqNewOwner(what = $)
   {
      return False;
   }

   Delete()
   {
      if ptRoll <> $
      {
	 deletetimer(ptRoll);
	 ptRoll = $;
      }
      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


