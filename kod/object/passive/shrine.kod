% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Shrine is PassiveObject

constants:

   include blakston.khd

   SHRINE_RANGE = 3
   PRAY_TIME = 30000

resources:

   Shrine_name_rsc = "Der Schrein"
   Shrine_icon_rsc = shrine.bgf
   Shrine_desc_rsc = "Die Götter bevorzugen jene, die ihr Königreich auf Erden stärken, indem sie ihnen Plätze geben, um ihnen zu huldigen. Wenn du hier eine angemessene Spende abgibst, könnte das Deinem Gott gefallen.\n\n%s"




   Shrine_noone = ""
   Shrine_dedicated = "%s ist zur Zeit %s geweiht."

   Shrine_not_in_range = "Du bist nicht nah genug an dem Schrein, um mit ihm kommunizieren zu können."


   Shrine_meld = "Du kniest vor dem Schrein nieder und bietest Deine Opfergabe dar."
   Shrine_satisfied = "%s scheint kurz über dem Schrein zu schweben und löst sich dann auf. Der Schrein ist jetzt geweiht."

   Shrine_Shalille_text = "Du wirst ergriffen von dem Gefühl plötzlicher Zufriedenheit, so als würdest Du behutsam gehalten und getröstet."


   Shrine_Shalille_sound = shalille.wav
   Shrine_Qor_text = "Ein Schauer läuft Dir über den Rücken und die Schatten sehen plötzlich viel dunkler und unheilsvoller aus."


   Shrine_Qor_sound = qor.wav
   Shrine_Kraanan_text = "Ein triumphaler Siegesschrei durchbricht den Himmel."

   Shrine_Kraanan_sound = kraanan.wav
   Shrine_Faren_text = "Ein gewaltiger Donnerschlag läßt die Luft erzittern."

   Shrine_Faren_sound = faren.wav
   Shrine_Riija_text = "Ein unheilvolles Gelächter schallt vom Himmel herab."
   Shrine_Riija_sound = riija.wav
   Shrine_Jala_text = "Eine liebliche Musik hängt in der Luft."
   Shrine_Jala_sound = nodeup.wav

   Shrine_unsatisfied = "Dem Schrein gefällt nichts davon."
   Shrine_mana_boost = "Dein Körper zittert durch den Zufluß magischer Ströme, die von dem Schrein ausgehen."


   shrine_trance_break = "Dein Gebet endet unvermittelt."
   shrine_trance_break_sound = spelfail.wav


classvars:

   vrIcon = Shrine_icon_rsc
   vrDesc = Shrine_desc_rsc

properties:

   vrName = Shrine_name_rsc

   % This is the bonus to spellpower gained by the shrine.  Should be lowered
   %  to 5 in the future?
   piShrine_power = 6

   piShrine_Num = 0

   % This records the school the shrine boosts.
   piAllegiance = 0
   
messages:

   Constructor(shrine_num=0,name_rsc=$)
   {
      if name_rsc <> $
      {
         vrName = name_rsc;
      }

      piShrine_num = shrine_num;
      Send(SYS,@AddShrine,#oShrine=self,#num=shrine_num);
	
      propagate;
   }

   ShowDesc()
   {
      local oSpell;

      AddPacket(4,vrDesc);
      if piAllegiance <> bound(piAllegiance,SS_SHALILLE,SS_JALA)
      {
         AddPacket(4,shrine_noone);
      }
      else
      {
	      AddPacket(4,shrine_dedicated);
	      AddPacket(4,Send(self,@GetName));

         % Find any spell, any will give us the school string.
         oSpell = Send(SYS,@FindSpellByNum,#num=SID_BLINK);
         AddPacket(4,Send(oSpell,@GetSchoolStr,#ischool=piAllegiance));
      }

      return;
   }

   GotOffering(what=$)
   "Check if what we want, IE an offering.  If so trigger proper actions."
   {

      if piShrine_num = 0
      {
         debug("this shrine node was not assigned an ID!  Invalid!");

         return FALSE;
      }      

      if isClass(what,&Offering)
      {
         Send(self,@MakeOffering,#oOffering=what);
      }
      else
      {
         % Show our disappointment
         Send(poOwner,@Someonesaid,#type=SAY_MESSAGE,#what=self,
              #string=Shrine_unsatisfied);          
      }

      return;
   }
      
   MakeOffering(oOffering=$)
   {
      piAllegiance = Send(oOffering,@GetAllegiance);
      Send(SYS,@RecomputeShrineTotals);
      
      % If we find one, then switch over to that god.
      Send(poOwner,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,
           #string=Shrine_satisfied,#parm1=Send(oOffering,@Getname));         
      Send(self,@TellServer);
      
      % Remove the offering - the gods eat it.
      Send(oOffering,@Delete);
      Send(poOwner,@ShrineUsed);

      return;
   }

   TellServer()
   {
      local rRsc, rSound, iUserCntr;

      if piAllegiance = SS_SHALILLE
      {
         rRsc = Shrine_Shalille_text;
         rSound = Shrine_Shalille_sound;
      }

      if piAllegiance = SS_QOR
      {
         rRsc = Shrine_Qor_text;
         rSound = Shrine_Qor_sound;
      }

      if piAllegiance = SS_KRAANAN    
      {
         rRsc = Shrine_Kraanan_text;
         rSound = Shrine_Kraanan_sound;
      }

      if piAllegiance = SS_FAREN
      {
         rRsc = Shrine_Faren_text;
         rSound = Shrine_Faren_sound;
      }

      if piAllegiance = SS_RIIJA
      {
         rRsc = Shrine_Riija_text;
         rSound = Shrine_Riija_sound;
      }

      if piAllegiance = SS_JALA
      {
         rRsc = Shrine_Jala_text;
         rSound = Shrine_Jala_sound;
      }
      
      for iUserCntr in Send(SYS,@GetUsersLoggedOn)
      {
         Post(iUserCntr,@MsgSendUser,#message_rsc=rRsc);
         Post(iUserCntr,@WaveSendUser,#wave_rsc=rSound);
      }
      
      return;
   }

   GetShrineNum()
   {
      return piShrine_num;
   }

   ReqNewOwner(what = $)
   {
      return FALSE;
   }

   GetAllegiance()
   {
      return piAllegiance;
   }

   GetPower()
   {
      return piShrine_power;
   }

   Delete()
   {
      Send(SYS,@DeleteShrine,#oShrine=self);

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


