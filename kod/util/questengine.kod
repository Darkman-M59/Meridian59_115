% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This class is the base for the Quest engine. It serves to keep all the shared
% data (quest templates and quest node templates) in a central place.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
QuestEngine is UtilityFunctions

constants:
   
   include blakston.khd
   include protocol.khd

   QUEST_MAX_NUM_PLAYERS = 5
   QUEST_MAX_MAX_ACTIVE = 100
   
% Field names for a QuestTemplate
%	QT_NUM_PLAYERS       = 1
%	QT_QUEST_TYPE        = 2
%	QT_PLAYER_RESTRICT   = 3
%	QT_QUEST_NODES       = 4
%	QT_MAX_NUM_ACTIVE    = 5
%	QT_ACTIVE_QUESTS     = 6
%	QT_SCHEDULE_CHANCE   = 7
%  QT_PLAYER_RESTRICT2  = 8

% Field names for a QuestNodeTemplate
	QNT_NPC_LIST      = 1
	QNT_NPC_MODIFIER  = 2
	QNT_TYPE          = 3
	QNT_CARGO_LIST    = 4
	QNT_MONSTER_LIST  = 5
	QNT_PRIZE_LIST    = 6
	QNT_PENALTY_LIST  = 7
	QNT_ASSIGN_HINT   = 8
	QNT_SUCCESS_HINT  = 9
	QNT_FAILURE_HINT  = 10
	QNT_TIME_LIMIT    = 11

resources:

	% Chess piece names
   pawn = "Knappe"
   pawn1 = "Knappe der Damenfestung"
   pawn2 = "Knappe des Damenrosses"
   pawn3 = "Knappe der Damenpriesterin"
   pawn4 = "Knappe der Dame"
   pawn5 = "Knappe der Königsfestung"
   pawn6 = "Knappe des Königsrosses"
   pawn7 = "Knappe der Königspriesterin"
   pawn8 = "Knappe des Königs"
   rook = "Festung"
   rook1 = "Königsfestung"
   rook2 = "Damenfestung"
   knight = "Roß"
   knight1 = "Königsroß"
   knight2 = "Damenroß"
   bishop = "Priesterin"
   bishop1 = "Königspriesterin"
   bishop2 = "Damenpriesterin"
   queen = "Dame"
   king = "König"

   two = "2"
   three = "3"
   four = "4"
   five = "5"
   six = "6"
   seven = "7"

   default_message = "Ein roter Himmel beginnt, ehe wieder Vollmond ist."
   chess_move = "%q nach %q %q"
   chess_capture = "%q schlägt %q"
   chess_substring = "%q"

   default_assign_hint = "Dir wurde eine neue Aufgabe zugewiesen."
   temp_assign_hint_bring_me_item = "Entschuldigung. Ich habe gerade ein paar simple Experimente am Rande der bekannten Magie durchgeführt. Mir fehlt %INDEF_CARGO %CARGO, damit ich meine Forschungen fortsetzen kann. Könntest du mir so etwas freundlicherweise besorgen?"
   temp_assign_hint_bring_message = "Bitte bring diese Nachricht für mich zu %NPC: %CARGO"
   temp_success_hint_bring_message = "Danke, aber das wusste ich bereits."
   temp_assign_hint_reward_message = "Du kannst %NPC dies von mir sagen, nämlich: %CARGO"
   temp_success_hint_reward_message = "Um es mal deutlich zu sagen, Deine Belohnung ist %INDEF_PRIZE %PRIZE."

   default_success_hint = "Du hast die Aufgabe erfüllt."
   first_success_hint = "Ah, genau die Person, nach der ich gesucht habe."
   temp_success_hint_bring_me_item = "Danke, dass Du dafür gesorgt hast, dass %DEF_CARGO %CARGO hier ist. Ich besitze nicht viel, aber lasse mich Dir etwas für Deine Bemühungen geben. Hier hast Du %INDEF_PRIZE %PRIZE."
   default_failure_hint = "Du hast es nicht geschafft, meine Bitte rechtzeitig zu erfüllen. Ich bin sehr enttäuscht von Dir."
   never_again_failure_hint = "Hmmpf. Du hast für mich versagt. Ich werde Dir in Zukunft keine weiteren Bitten dieser Art aufbürden."

   temp_assign_hint_chess1 = "Ich spiele Schach mit %NPC. Ich habe nachgedacht und bin jetzt bereit, meinen nächsten Zug zu übermitteln. Würdest Du bitte ausrichten, dass mein Zug %CARGO ist?"
   temp_success_hint_chess1 = "Ein brillanter Zug, aber leicht abzublocken."
   temp_assign_hint_chess2 = "Bitte sage %NPC %CARGO."
   temp_success_hint_chess2 = "Dieser Pfau hat Dir das gesagt, he?"
   temp_assign_hint_chess3 = "Nun, sage %CARGO. Und wenn du schon mal hier bist, sage auch gleich 'schachmatt'."
   temp_success_hint_chess3 = "Ein raffinierter Zug. Ich muss %NPC unbedingt gratulieren. %PRIZE ist als Zeichen meiner Würdigung für den Kurierdienst gedacht."

   temp_assign_hint_monster = "%DEF_MONSTER %MONSTER ist ziemlich gefährlich, nehmt Euch in Acht. Die Zähne beißen, die Klauen reißen. Würdet Ihr es für mich erlegen?"
   temp_success_hint_monster = "Oh, trari, trara, du bist wieder da! Und %DEF_MONSTER %MONSTER ist erledigt."

   temp_assign_hint_monster_item = "Du musst nochmal losziehen, %INDEF_MONSTER %MONSTER muss erlegt werden.Was ich brauche, ist %DEF_CARGO %CARGO frisch aus dem dampfenden Kadaver. Ich werde Dich angemessen belohnen."
   temp_success_hint_monster_item = "Ah, genau das habe ich gebraucht. Hier hast du Deine Entschädigung, %INDEF_PRIZE %PRIZE."

   temp_assign_hint_food_item = "Ich bin etwas hungrig: %INDEF_CARGO %CARGO ist es, wonach ich großes Verlangen habe. Würdest Du so nett sein und mir jetzt gleich etwas bringen?"
   temp_success_hint_food_item = "Oh, lecker! Ich danke Dir und hier hast du etwas: %INDEF_PRIZE %PRIZE."

   temp_assign_hint_E3_message = "Hilfst Du mir aus einer furchtbaren Verlegenheit? Ich war draußen hinter den Mauern Pilze suchen, als mich ein paar bösartige Avaren angriffen. Ich konnte zwar entkommen, habe aber Tepals Buch der Aasgeier-Beschwörung verloren. Könntest du es finden?"
   temp_success_hint_E3_message = "Da ist ja mein Buch! Tja, orkverdammtnochmal, ich dachte, es sei für immer verloren."
   temp_failure_hint_E3_message = "Hat Zala Dir nicht irgendwas gesagt, wie Du mein Buch zurückbringen kannst? Nun, das kannst Du vergessen. Ich will es nicht mehr. Und ich sage Dir was, es wird lange dauern, bis ich ihr mal wieder etwas leihe."
   temp_E3_trigger = "Guten Tag"

   duke_join1_trigger = "beitreten"
   duke_join2_assign = "So, Du möchtest gerne beweisen, dass Du mein Vertrauen wert bist? Du kannst damit anfangen, indem Du mir folgendes bringst: %INDEF_CARGO%CARGO."
   duke_join2_success = "Ah, gute Arbeit. Dein Dienst an unserer Sache wird nicht unbeachtet bleiben."
   duke_join2_failure = "Betreff: Du darfst unserer Gemeinschaft nicht beitreten, Knappe!\nPah! Du bist nicht vertrauenswürdig genug, um unserer Sache zu dienen!"

   duke_standard1_trigger = "Loyalität"
   duke_standard2_assign = "Ah, %NAME, gut Dich zu sehen. Ich erwarte, dass Du von %NPC alle fälligen Steuern kassierst. Sei in spätestens einer Stunde zurück."
   duke_standard2_failure = "Betreff: Deine Steuerzahlung\nIch konnte nicht länger warten, ich habe bereits einen anderen Boten geschickt, um die Steuern zu kassieren."
   duke_standard2_trigger = "Steuer"
   duke_standard3_assign = "Oh, ja, meine Steuerzahlung an den Herzog... Hier ist sie, %INDEF_CARGO%CARGO."
   duke_standard3_success = "Das hast Du gut gemacht."
   duke_standard3_failure = "Betreff: Widerruf Deiner Mitgliedschaft beim königlichen Hof\nDu hast für versagt. Ich werde nicht so dumm sein und mich in Zukunft wieder auf Deine Dienste verlassen."

   princess_join2_assign = "So, Du möchtest gerne beweisen, dass Du mein Vertrauen wert bist? Wärst Du so gütig und bringst ein offizielles Schreiben zu %NPC? Ich wäre äußerst dankbar."
   princess_standard2_assign = "Ah, %NAME, immer zu treuen Diensten, was? Wärt Ihr so gütig und bringt ein offizielles Schreiben zu %NPC? Ich wäre äußerst dankbar."
   princess_standard2_success = "Ein Brief von Ihrer Hoheit?! Exzellent. Danke sehr, %NAME."
   princess_standard2_failure = "Betreff: Widerruf Deiner Mitgliedschaft beim königlichen Hof\nIhr habt versagt. Ich werde nicht noch einmal so einfältig sein und mich auf Eure Dienste verlassen."

   rebel_join2_assign = "Du möchtest unseren Kampf für Freiheit unterstützen? Ich kann Dir nicht vertrauen, Du könntest ein Spion meiner Feinde sein. Beweise Deinen Wert und bringe mir %INDEF_CARGO%CARGO."
   rebel_join2_success = "Ausgezeichnete Arbeit! Dies wird unsere Truppen im Felde ausrüsten. Betrachte Dich als einen Kämpfer für Freiheit in diesem Land."
   rebel_join2_failure = "Betreff: Dein mangelnder Einsatz.\nDein Mangel an Einsatz bestätigt meine Ängste, dass Du ein Spion für die anderen schwächlichen Anführer bist. Belästige mich nicht wieder mit Deinen falschen Versprechungen, für wahre Freiheit zu kämpfen."
   rebel_standard2_assign = "Ah, %NAME, mein treuer Freiheitskämpfer. Meine Truppen benötigen mehr Ausrüstung. Das kostet uns sehr viel, und ich genieße nicht den Luxus großer Schätze wie die anderen Anführer. Bringe mir %INDEF_CARGO%CARGO und ich werde Deine Loyalität nicht vergessen."
   rebel_standard2_success = "Ah, ausgezeichnet. Ich werde dies ganz bestimmt gut verwenden können."
   rebel_standard2_failure = "Betreff: Du bist kein echter Rebell\nDu hast versagt, als ich Dich am meisten brauchte. Verkrieche Dich zu einem der anderen Thornanwärter, denn ich habe keine Verwendung mehr für jemanden wie Dich."

   disciple_trigger = "Anhänger"
   disciple_learn_success = "~ISo, Du möchtest also bei mir studieren?~I"
   disciple_assign = "~IEhe wir mit dem Lernen fortfahren, musst Du erst eine Eignungsprüfung ablegen. %CARGO soll Dein Ziel sein. Bring mir davon.~I"
   disciple_success = "~IDu hast Dich bewährt, mein Zögling. Du kannst jetzt weiter lernen.~I"
   disciple_failure = "Wie es scheint, brauchst Du noch mehr Erfahrung, bevor ich Dich als Schüler akzeptieren kann. Du solltest es demnächst mal wieder versuchen."

   kraanandisciple_assign = "~B~bDu hast zwei Stunden Zeit. %MONSTER muss getötet werden. Geh sofort los. Kehre zurück, wenn du das erledigt hast."
   kraanandisciple_success = "~B~bDu hast gut gearbeitet. Du bist ein würdiger Anhänger. Vielleicht kannst Du den Stein um Kraanans Seele aufbrechen. Such mich auf, wenn Du mehr über seine Lehre und seine Zauber wissen willst."
   kraanandisciple_failure = "Betreff: Deine Bündnistreue\nEs mangelt mir an Zutrauen in deine Fähigkeit, Kraanan zu dienen. Wir brauchen jene mit Berufung, Zielrichtung und Geschick. Kehre nur zurück, wenn Du Dir diese Eigenschaften erarbeitet hast."

   shalilledisciple_trigger = "Ihr und Euresgleichen, empfanget die Reinheit welches uns leitet in unserer Not und unserer Trauer. Ich verzeihe euch und euren Jüngern. Euer Leben ist dem Krieg gewidmet doch niemand anderes als die Gütige selbst wird euch nach eurem Tode richten."
   shalilledisciple_assign = "~bDu möchtest mehr lernen über das sanfte, heilende Wesen unserer guten Herrin. Du musst den Machenschaften von %NPC trotzen und Deine Absicht verkünden, jenen die Erbarmungslosigkeit und Brutalität zu vergeben. Heile sie, wenn Du kannst. Sage: \"%CARGO\"\nKehre danach zu mir zurück und berichte, dass du getan hast worum ich dich gebeten habe."
   shalilledisciple_success = "~bGesegnet sei dieser Tag. Heute wurde eine weitere Seele geboren, die sich mit dem Licht Sha-Lills erfüllen wird. Suche mich auf, wenn Du bereit bist, mehr über die Kunde der Gesegneten Mutter und ihren Zauber zu erfahren. Du bist dessen würdig."
   shalilledisciple_failure = "Betreff: Halt mir die Treue, Kind von Sha-Lill\nVersagen ist ein Teil des Lebens. Suche in Deinem Herzen und finde den Makel. Kehre zu mir zurück und wir werden dann  unsere Reise entlang der Straße der Harmonie von vorn antreten."

   farendisciple_trigger = "Ihr habt das Land mit Eurem Verhalten geschändet. Das Land schenkt Leben, doch Ihr behandelt es wie einen zu erobernden Feind. Ihr seid Narren, alle, wenn ihr weiterhin diesen frevelhaften Pfad beschreitet. Umarmt die Natur und behandelt sie nicht wie einen vergessenen Liebhaber. Überdenkt euer Handeln. Folgt dem Wort Farens. Lebt für die Natur und fordert sie nicht heraus."
   farendisciple_assign = "~B~gDu erbittest den Segen für das Land durch unseren Herrn Faren. Du musst beweisen, dass Du seinen Segen wert bist. Bring diese Nachricht zu %NPC: \"%CARGO\"\nKehre danach schnell zurück, um mir über den Erfolg zu berichten. Faren wird dich dann vielleicht mit Macht begünstigen."
   farendisciple_success = "~B~gDer Blick Farens liegt auf Dir. Du hast es gut gemacht. Komm zu mir, wenn du mehr über seinen Weg und seine Zauber erfahren möchtest. "
   farendisciple_failure = "Betreff: Entfache Dein Feuer, Kind\nFaren sieht jene nicht, die nicht das Feuer des Verlangens in sich tragen. Du solltest zurückkehren, wenn Du es in Dir gefunden hast, nicht früher."

   qordisciple_trigger = "Alles sollte in Dunkelheit gehüllt sein. Dann würde unsere Meisterin unter den Menschen im Schutz eines lichtlosen Himmels und eines blutigen Mondes wandeln. "
   qordisciple_assign = "~rDu möchtest umgeben sein von der unsterblichen Umarmung unserer Schutzpatronin. Dein Urteil ist scharfsinnig, doch was ist mit Deiner Loyalität? Um sie mir zu beweisen, solltest Du bei %NPC auf die Meisterin Qor zu sprechen kommen, und zwar mit diesen Worten: %CARGO\nKehre danach zurück, und wir werden die Schönheit der Fäulnis genießen."
   qordisciple_success = "~rDu hast meine Wünsche erfüllt. Du bist nicht nur weise, sondern auch hartnäckig. Komm zu mir, wenn Du mehr über Qors Zauber und Macht erfahren möchtest."
   qordisciple_failure = "Betreff: Du bist unwürdig, Qor zu dienen\nDu schwache, mitleiderregende Seele! Ich hatte gleich so einen Verdacht. Ich bin froh, dass ich Dir nichts von echtem Wert gegeben habe, sonst wäre es jetzt bestimmt verloren. Falls Du hierher zurückkehrst, werde ich Dir vielleicht eine neue Chance geben, Dich der Eliteklasse anzuschließen."

   scimitarlearn_trigger = "Schüler"
   scimitarlearn_assign_2 = "Du bist also ein Krieger? Ha! Für mich siehst du nicht sehr nach einem Krieger aus. Ehe ich also meine Zeit damit verbringe, Dich mit den vortrefflichen Eigenschaften des Säbels vertraut zu machen, musst Du Dich erst einmal als würdig erweisen. %INDEF_MONSTER%MONSTER wäre für Dich der passende Gegner, den Du vernichten sollst. Dann kehre zu mir zurück. "
   scimitarlearn_failure_2 = "Betreff: Lerne den Umgang mit dem Säbel\nMisserfolg gehören zum Lernen dazu. Misserfolg ist für einen Krieger wichtig. Man hat es versucht und das ist entscheidend, doch nun glaube bloß nicht, dass ich Dir irgend etwas beibringe. Jetzt muss ich an meine Arbeit zurück."
   scimitarlearn_assign_3 = "Das hat lange genug gedauert. Ich mag es überhaupt nicht, wenn man mich so lange warten läßt. Wegen dieser Extrazeit habe ich beschlossen, dass Du noch eine Bestie besiegen mußt, diesmal ist es %INDEF_MONSTER%MONSTER. Verschwende aber nicht wieder so viele Schläge mit dieser... Waffe. Geh jetzt."
   scimitarlearn_failure_3 = "Betreff: Lerne den Umgang mit dem Säbel\nTja, vielleicht habe ich von jemandem mit nur wenig Erfahrung einfach zu viel gefordert. Ich habe keine Zeit, um Dir die Grundlagen über Waffen im allgemeinen beizubringen. Komm' zurück, wenn hinter Deinem Gürtel etwas mehr Erfahrung steckt."
   scimitarlearn_assign_4 = "Du schon wieder! Ich dachte, die Unterwelt hätte dich überwältigt. Was hatte ich doch gleich von Dir gewollt? Oh ja, Du solltest so ein Biest erledigen; %INDEF_MONSTER%MONSTER lebt aber noch. Geh fort und tu es, dann werde ich Dich ausbilden. Keine Diskussion! Geh jetzt oder wir werden beide alt und sterben, ehe Du etwas über Seine Majestät, den Säbel erfährst. Deine neue Aufgabe, erlege: %MONSTER."
   scimitarlearn_success_4 = "Endlich. Das Allererste, was ich Dir beibringen muß, ist, ein bißchen zackiger zu werden. Komm her zu mir und wir werden mit dem Unterricht anfangen, wie man die großartigste Waffe im ganzen Land am sinnvollsten verwendet: den Säbel."
   scimitarlearn_failure_4 = "Betreff: Lerne den Umgang mit dem Säbel\nDurch Deinen Mangel an Geschicklichkeit und durch Deine grenzenlose Faulheit hast Du Dir die Chance verbaut, mit mir zu trainieren. Es ist eine Schande, Du warst so nah dran. Vielleicht hast Du zu lange am Rockzipfel Deiner Mutter gehangen. Übung, Novize, das ist es, was Du brauchst."

   fadelearn_trigger = "Schüler"
   fadelearn_assign_2 = "Ich bin froh, dass Ihr hier seid; ich möchte ein Geschäft vorschlagen. Ich bin über eine Formel gestolpert, durch die das Wachstum bestimmter Pflanzen beschleunigt wird, aber sie ist diesem Schurken %NPC in die Hände gefallen. Wenn Ihr möchtet, werde ich Euch die kleinen Zaubertricks beibringen, die ich kenne, doch Ihr müsst für mich diese Formel wieder auftreiben. Lasst Euch nicht täuschen, %NPC wünscht sich nichts mehr, als aus purem Eigennutz meine Ernte zu erschweren."
   fadelearn_trigger_2 = "Formel"
   fadelearn_failure_2 = "Betreff: Deine Pflanzen, Aufzucht und Pflege\nDie Pflanzen werden jetzt erst frühestens in einem Monat erntereif sein. Ihr habt völlig versagt und dem Land ein wertvolles Gegenmittel vorenthalten; mögen die Pocken Euch heimsuchen."
   fadelearn_assign_3 = "Ich besitze die Formel, von der Du sprichst. Doch ich zögere noch, sie Dir zu überlassen; weil ich glaube, dass Koldors Motive nicht so nobel sind, wie er vorgibt. Falls Du mir beweisen kannst, dass es Dir um der Sache willen ernst ist und %MONSTER Dir zum Opfer fällt, liegt es in Deinem Ermessen und ich werde mich Deiner Entscheidung unterwerfen. Nun beeile Dich, sonst wird Koldors hübsche Gifternte noch verzögert!"
   fadelearn_failure_3 = "Betreff: Du hast eine gute Wahl getroffen\nWie ich sehe, bist Du meiner Einschätzung Koldor betreffend gefolgt. Ich dachte mir, dass Dich Deine Aufgabe lange genug aufhält, um über die Sache nachzudenken. Da wir Koldors verfrühte Ernte jetzt verhindert haben, können wir uns jetzt ruhig zurücklehnen, weil wir wissen, dass kein neues Gift das Land verseucht, wenigstens im Moment nicht."
   fadelearn_assign_4 = "Also gut, hier ist die Formel. Ich bin nicht gerade begeistert davon, sie Dir zu geben. Ich glaube, dass damit ein wichtiger Ablauf der Ereignisse gestört wird. Aber damit hast Du nicht wirklich etwas zu tun. Du möchtest nur Deinen Zauberspruch erfahren und dann bist Du fort. Ja, ich finde, das solltest Du tun."
   fadelearn_success_4 = "Ah, endlich. Ihr habt nicht nur Euch selbst einen großen Dienst erwiesen, sondern auch dem gesamten Reich. Diese Pflanzen könnten den Verlauf der Geschichte verändern. Sie sind ein Gegenmittel für eine schreckliche Krankheit, die sich gerade über das ganze Land verbreitet. Kommt zu mir, wenn Ihr lernen wollt."
   fadelearn_failure_4 = "Betreff: Deine Pflanzen, Aufzucht und Pflege\nEure Tändelei hat nicht nur Euch selbst die Möglichkeit verbaut, an meiner Zauberkunst teilzuhaben, sondern auch dem ganzen Reich die Chance genommen, sich gegen eine neue Krankheit zu schützen, die sich langsam ausbreitet. Ich hoffe nur, dass Ihr Euch nicht selbst ansteckt. Das wäre wohl ausgleichende Gerechtigkeit, was? Nun stört mich nicht länger, Kindskopf."

   dementlearn_trigger = "Schüler"
   dementlearn_assign_2 = "Ich kann Dir das wenige in den magischen Dingen beibringen, das ich weiß, aber ich möchte, dass Du mir dafür einen Gefallen erweist. Ich benötige dringend , dass die Lieferung von: %CARGO, %NPC erreicht. Aber ich bin zu ängstlich um die Sache selbst zu erledigen. Weißt Du, %NPC ist erst kürzlich von einer unheiligen Kraft umgeben, die sich wie es scheint, von menschlicher Energie zu ernähren. Ich weiß nicht mehr, als dass %NPCs Gegenwart vielleicht einige schreckliche Wirkung auf Dich haben kann. Also mach das Treffen kurz Dir geschieht möglicherweise nichts. "
   dementlearn_success_2 = "Ich danke Dir, %NAME. %CARGO hilft hoffentlich dabei, die Macht zu vertreiben, vor der ich Dich gewarnt habe. Nun geh, wenn Du nicht auch befallen werden willst."
   dementlearn_failure_2 = "Betreff Lieferung: %CARGO\nIch verstehe Deine Sorge und Angst, Dich %NPC zu nähern. Trotz alledem hast Du versagt und unsere Abmachung ist daher Null und Nichtig."
   dementlearn_success_3 = "Aha, Du bist zurück und hast den Gang erledigt, %NAME. Das hast Du gut gemacht. Ich hoffe, Du hast nicht zu sehr unter dem Kontakt mit %SOURCE_NPC leiden müssen. Wie ich hörte, zeigen sich die Wirkungen nur vorübergehend. Außerdem hast Du Dich als würdig erwiesen, von mir unterrichtet zu werden. Komm zurück und ich bringe Dir den \"Verblödungs\"-Zauber bei."
   dementlearn_failure_3 = "Betreff: Verblödungs-Zauber\nDa ich so lange nichts von dir gehört habe, nehme ich an, dass Du nicht länger daran interessiert bist zu lernen. Komm später wieder, wenn Du Deine Meinung geändert hast."

   guildshield_intro = "Ich hörte, dass %QBNPC jemanden sucht, der an einer Bergwerksexpedition teilnimmt, und dass dieses Angebot besonders für Deine Gildenmitglieder von Interesse sein könnte. Vielleicht möchtest Du jemanden hinschicken, um dort nachzufragen."
   guildshield_initial_trigger = "Bergwerksexpedition"
   guildshield_assign = "Jawohl, jemanden, der mir gern diesen Gefallen tut. Du hast garantiert gehört, dass die Orkminen wieder geöffnet wurden. Nun, diese Orks bauen ein Eisenerz mit wesentlich besserer Qualität ab, als wir aus den Jasper-Minen herausholen können. Ich möchte gerne etwas mehr davon in die Finger kriegen, ehe die Prinzessin oder der Herzog oder wer sonst die Finger am Hebel hat die Höhlen wieder schließt. Bring mit etwas Erz und ich werde Dir aus dem Rest, den ich jetzt hier noch habe, ein Wappen fertigen."
   guildshield_success = "Oh, daraus werde ich ein paar anständige Waffen und Rüstungen herstellen können! Danke bestens, %NAME. Während Du fort warst, habe ich Dir einen Schild mit dem Wappen und den Farben Deiner Gilde entworfen. Trage es mit Stolz, denn Du hast heute Gutes für Deine Gilde getan."
   guildshield_failure = "Betreff: Erz von den Ork-Minen\nAch, gräme Dich nicht wegen des Erzes; ich habe bereits andere, verlässlichere Abmachungen getroffen."

   lutequest_trigger_1 = "Instrument"
   lutequest_assign_2 = "Natürlich wirst Du zum Spielen ein Instrument brauchen. Ich werde Dir sogar dabei helfen, eines zu beschaffen. Du musst nur zu %NPC gehen, und sagen \"%CARGO\"."
   lutequest_trigger_2a = "Parrin schickt mich"
   lutequest_trigger_2b = "Ich benötige ein Instrument"
   lutequest_trigger_2c = "Parrin sagte mir, ich solle Dich wegen einer Laute aufsuchen"
   lutequest_trigger_2d = "Könnte ich die Laute bekommen, die Du für Parrin aufbewahrst"
   lutequest_trigger_2e = "Parrin sagt, Du hättest eine Laute für ihn"
   lutequest_failure_2 = "Betreff: Deine Laute\nEs ist zu spät, %NPC hat die Laute bereits jemand anders gegeben. Wenn es Dir wirklich ernst damit ist, das Lautespielen zu erlernen, komm später wieder. Vielleicht weiß ich dann, wo wir eine andere herbekommen."
   lutequest_assign_3 = "Du wirst bei Parrin lernen?! Viel Glück! Ach, übrigens, Parrin schuldet mir einen Gefallen. Wenn Du etwas für mich tust, werde ich Dir die Laute geben. Hier, %CARGO muss schnellstens zu %NPC gebracht werden. Die Sache muss innerhalb von zwanzig Minuten zugestellt werden, sonst gebe ich Dir das Instrument nicht. Komm wieder, wenn Du es erledigt hast."
   lutequest_success_3 = "Ah, %NAME, ich warte schon ganz ungeduldig, dass mir %CARGO gebracht wird! Danke für die zügige Ablieferung."
   lutequest_failure_3 = "Betreff: Du hast den Termin verpasst\nDu hast zuviel Zeit vertrödelt, um zu %NPC zu gelangen. Jetzt geh mir bloß nicht wegen der Laute auf die Nerven. Nächstes Mal muss ich mir einen schnelleren Boten suchen."
   lutequest_success_4 = "Ich danke Dir, hier hast Du die Laute. Und erlerne das Lautenspiel gut, versprochen?"
   lutequest_failure_4 = "Betreff: Du hast die Laute nicht abgeholt!\n%NPC hat mir mitgeteilt, dass Du zurückkommen solltest um Deine Laute mitzunehmen. Ich denke %NPC hat bereits einen anderen Interessenten gefunden, dem er die Laute statt dessen geben wird. Tut mir leid, dass Du den ganzen Ärger hattest, aber nochmals danke, dass Du den Botengang gemacht hast."

   truthquest_trigger_1 = "Schüler"
   truthquest_trigger_2 = "singt"
   truthquest_assign_2 = "Bist du ehrlich bereit, die Magie aus Jalas Liedern zu studieren? Wenn ja, musst Du erst Deine Hingabe an die Kunst beweisen. Ich würde gern Deine Stimme überprüfen lassen. Gehe zu %NPC und ~Ising~I ein Lied. Ein Lied Deiner Wahl. Komm anschließend zurück und laß mich wissen, wie es war."
   truthquest_success_2 = "Meine Güte, das ist ja schrecklich. Hat Parrin Euch geschickt? Bittet ihn, Eure Stimme auszubilden, %NAME"
   truthquest_failure_2 = "Betreff: Dein Vorsingen \nWenn Du Dich nicht traust, ein einfaches Lied zu singen, wirst Du es gewiss niemals zum guten Bänkelsänger bringen. Ich fürchte, ich kann Dir die Jalazauber jetzt nicht beibringen.\n\n-Parrin Aragone"
   truthquest_failure_3 = "Betreff: Dein Vorsingen \nWo warst Du denn? Ich konnte nicht mehr länger auf Dich warten. Leider habe ich inzwischen andere Studenten aufgenommen. Vielleicht werde ich Dich zu einem anderen Zeitpunkt ausbilden.\n\n-Parrin Aragone"
   truthquest_trigger_4 = "schlecht"
   truthquest_assign_4 = "Ach, Du bist zurück. Was haben sie von Deinem Lied gehalten? War es gut oder schlecht?"
   truthquest_success_4 = "Tja, also, dann werden wir daran arbeiten. Und jetzt öffne Deine Seele für Jalas Natur; ich werde Deine Stimme ausbilden, wenn Du es möchtest."
   truthquest_failure_4 = "Betreff: Dein Vorsingen \nDu musst viel ehrlicher dir selbst gegenüber werden, was Deine Eignung betrifft, wenn ich dir die Wege von Jala aufzeigen soll."
   truthquest_trigger_5 = "gut"
   truthquest_success_5 = "Das wäre wirklich bemerkenswert für einen Grünschnabelbarden wie Dich. Bist Du Dir selbst gegenüber wirklich vollkommen ehrlich, %NAME?"

   bonepriestessquest_trigger_1 = "Riija"
   bonepriestessquest_assign_2 = "Wak-wak! Kopp von Höhlenscheff! Wak wak wa-ak!"
   bonepriestessquest_success_2 = "Chp chp chp chp chp chp chp!"
   bonepriestessquest_failure_2 = "Betreff: Ik ik ak\nWak wak Riija nich ak! Chp Chp kp ip!"

   madscientistquest_trigger_1 = "Kohuzotz"
   madscientistquest_assign_2 = "Ich brenne darauf, mit meinen Haustierchen zu experimentieren. Wenn Du mir ein lebendes Exemplar bringst, könnte ich Dir etwas Interessantes dafür als Gegenleistung geben."
   madscientistquest_success_2 = "Exzellent. Gute Arbeit, mein Lehrling."
   madscientistquest_failure_2 = "Betreff: Der Kohuzotz\nDu hast so ewig lange gebraucht, um mir ein Exemplar zu bringen, dass ich mir inzwischen eines auf anderem Weg besorgt habe. Ich werde jetzt ein Weilchen mit meinem frischen Geschöpf beschäftigt sein, also belästige mich bloß nicht mit noch einem."

   tradingpost_trigger_1 = "Inventar"
   tradingpost_assign_2 = "Ich suche Leute, die mir dabei helfen, meine Bestände aufzufüllen. Falls Du bereit wärst, mir etwas zu besorgen, kann ich dafür sorgen, dass der Weg sich lohnt. Es ist %INDEF_CARGO%CARGO. "
   tradingpost_success_2 = "Super. Hier, das brauche ich nicht."
   tradingpost_failure_2 = "Betreff Lieferung: %CARGO\nMach Dir nichts draus, ich habe einen anderen Lieferanten gefunden."

   bowmaker_trigger_1 = "Pfeile"
   bowmaker_assign_2 = "Ich verwende spezielle Materialien, um daraus meine besten Pfeile herzustellen. Die Schwanzfedern des avarischen Zauberers haben den Ruf, dass sie dem Pfeil, an dem sie befestigt werden, magische Eigenschaften verleihen. Geh, versuch einen Avar zu finden, der eine Schwanzfeder gegen etwas tauscht, das er wertvoll findet."
   bowmaker_success_2 = "Nyuk nyuk uk ak a-ak!"
   bowmaker_failure_2 = "Betreff: Avar-Feder\nWie sollte es anders sein, Du konntest keine Avarenfeder für mich auftreiben. Tja, was solls. Ich werde mich anderweitig umschauen."
   bowmaker_success_3 = "Danke. Hier, nimm dieses Stückchen Metall als Belohnung."
   bowmaker_assign_4 = "Ich verwende spezielle Materialien, um daraus meine besten Pfeile herzustellen. Die Schwanzfedern des avarischen Zauberers haben den Ruf, dass sie dem Pfeil, an dem sie befestigt werden, magische Eigenschaften verleihen. Geh nun und erlege avarische Schamanen, bis einer mit einer brauchbaren, unbeschädigten Schwanzfeder dabei ist."
   bowmaker_failure_4 = "Betreff: Avar-Feder\nNa klar, Du konntest keine Avarfeder für mich auftreiben. Wie ich hörte, sind die Schamanen der Avaren bemerkenswerte Gegner. Wenn Du magst, komm später wieder - vielleicht brauche ich noch mehr."

   chickensoupquest_trigger_2 = "Hühnersuppe"
   chickensoupquest_assign_2 = "Mir geht es nicht so gut. Ich vermute, Du kannst jetzt nicht zur Witwe Qesinos gehen und sie um eine Terrine ihrer Spezial-Hühnersuppe bitten, oder? Ich wäre Dir so dankbar."
   chickensoupquest_failure_2 = "Betreff: Hühnersuppe\nOh, nun... Ich schätze, Du hast Wichtigeres zu tun, als mir zu helfen. Ist schon in Ordnung, ich werde schon über meine Erkältung hinweg kommen."
   chickensoupquest_assign_3 = "Oh, selbstverständlich doch! Hier ist eine Terrine meiner Spezialsuppe für %NPC. Und gute Besserung."
   chickensoupquest_success_3 = "Besten Dank, ich fühle mich allein vom Wohlgeruch dieser schmackhaften Suppe besser! Hier, %PRIZE soll das Zeichen meiner Anerkennung sein."
   chickensoupquest_failure_3 = "Betreff: %NPCs Erkältung\nDu hast diese Terrine mit Suppe allein gegessen, was? Du solltest Dich schämen, %NAME! %NPC ist immer noch krank, armes Ding."

   stunteddwarf_trigger = "Verkümmerter Zwerg"
   stunteddwarf_assign_2 = "Heißer Tag, was. Wäre bestimmt ein großartiger Tag für einen verkümmerten Zwerg."
   stunteddwarf_assign_3 = "Ach, ein Getränk aus alten Überlieferungen. Eigentlich ging das Rezept dafür im Laufe der Zeit verloren, doch wie ich hörte, weiß %NPC vielleicht etwas darüber."
   stunteddwarf_trigger_4 = "Mythos"
   stunteddwarf_assign_4 = "Verkümmerter Zwerg? Ha! Das ist doch nur ein Mythos, Du musst auf jeden Fall erwähnen, dass ich das gesagt habe!"
   stunteddwarf_success_4 = "Ach, mmh. Falls du jemals irgend jemanden den verkümmerten Zwerg erwähnen hörst, musst Du unbedingt alles herausfinden, was Du kannst."
   stunteddwarf_assign_6 = "So, Du brauchst eine Bauanleitung für einen Gartenzwerg, was? Ich sag Dir mal was. Beweise mir, dass Du Draufgänger genug bist, um einen zu trinken, und ich werde Dir das Rezept geben. Los, bring einen Kriipa für mich um die Ecke."
   stunteddwarf_success_6 = "Gut gemacht, %NAME. Hier ist das Rezept."
   stunteddwarf_failure_6 = "Betreff:: Verkümmerter Zwerg\nWie ich sehe, hast Du Dir den verkümmerten Zwerg klugerweise aus dem Kopf geschlagen. Es ist schließlich auch kein Getränk für Hasenfüße oder Weicheier."
   stunteddwarf_success_7 = "Meine Anerkennung! Du musst ja ziemlich hartnäckig sein, %NAME. Dafür sollte ich Dir etwas genauso Seltenes geben."

   hypochondriac_assign_2 = "Gottseidank bist Du hier! Ich glaube, ich sterbe! Ich habe %CARGO! Geh zu %NPC und laß dir ein Medikament dagegen geben!"
   hypochondriac_trigger_2a = "Paragolisysie"
   hypochondriac_trigger_2b = "Miriatetosie"
   hypochondriac_trigger_2c = "Pelagalosilie"
   hypochondriac_trigger_2d = "die schwere Pilzkrankheit"
   hypochondriac_failure_2 = "Betreff: %CARGO\nIch bin so froh, dass jemand anders vorbeikam und mich von diesem Leiden befreit hat! Du hättest mich sicherlich liegenlassen, bis ich langsam und qualvoll den Tod gefunden hätte."
   hypochondriac_trigger_3 = "Sacchaqua"
   hypochondriac_assign_3 = "Oh, er stirbt, was? Naja, warum gehst Du nicht einfach zu %NPC und sagst, dass Frisconar einen neuen Sacchaqua-Trank braucht."
   hypochondriac_failure_3 = "Betreff: Frisconars endlose Leiden\nSchätze, du hast den alten Frisconar aufgegeben. Ich werfe dir nichts vor, ich habe für sein Getue auch kein Verständnis."
   hypochondriac_assign_4 = "Wie amüsant. Glaubst du etwa, dass ein qualifizierter Apotheker wie Frisconar nicht weiß, dass das nichts weiter als Zuckerwasser ist? Nun, bring es ihm."
   hypochondriac_success_4 = "Oh, den Göttern sei dank! Ich ... ich habe schon Sterne gesehen! Das Licht am Ende des Tunnels! Ich lebe! Hier, %PRIZE, das ist deine Belohnung - Ich schulde dir was, weil du mein Leben gerettet hast!"
   hypochondriac_failure_4 = "Betreff: Ich armer Tropf!\nWo bist du blos geblieben?! Ich bin erledigt, das ist sicher. Während ich dies hier schreibe, trübt sich mein Blick, bis ich kaum noch das Papier vor mir sehe. Mein Atem geht stossweise und bereitet mir unsägliche Schmerzen. Meine Suche nach einem Heilmittel für meine Krankheit muss fortgesetzt werden, doch du hast versagt. Ich sollte meine abgezehrten und zittrigen Hoffnungen auf jemand anders setzen und hoffen, dass er mich nicht wie du in Stich lässt. Lebewohl, vielleicht für immer."

   qoroffering_assign_2 = "~r%NAME, huldigst du unserer Meisterin des Blutigen Mondes und wirst du von dir selbst geben, auf dass deine Meisterin stärker werde?"
   qoroffering_trigger_2 = "Ja"
   qoroffering_assign_3 = "~rDann preise sie mit mir. Gemeinsam werden wir uns unseren eigenen Lebenssaft entziehen, damit ein Symbol der Macht unserer Meisterin geboren wird. Nur selten stehen die Sterne so günstig für das Ritual der Finsternis, das wir vollziehen werden, also lass sie uns schnell praktizieren. Sprich mit mir diese Worte: %CARGO"
   qoroffering_trigger_3 = "Beim Licht eines blutigen Mondes, rufe ich Euch, Qor, Meisterin der Dunkelheit"
   qoroffering_failure_3 = "Betreff: Narr!\nDas Zeitfenster hat sich vorbeibewegt und wir hatten beide darunter zu leiden, weil Du gezögert hast. Das begonnene, aber nicht vollendet und hat uns einen Teil unserer Macht entzogen. Ich bin über dich erzürnt, Wurm."
   qoroffering_assign_4 = "~r%CARGO!"
   qoroffering_success_5 = "~rAh, dies ist ein großer Tag für Qor! Geh nun, trage die Macht unserer Meisterin in in die weite Welt!"

   shalilleoffering_assign_2 = "~b%NAME, geläutert von unserer Herrin des Silberlichts, willst Du von Dir etwas abgeben, damit Deine Göttin gestärkt wird?"
   shalilleoffering_trigger_2 = "Ja"
   shalilleoffering_assign_3 = "~bDann bete mit mir. Wir werden gemeinsam mit unserem eigenen Lebenssaft ein Symbol der Reinheit unserer Herrin erschaffen. Selten genug stehen die Sterne so günstig für die heilige Zeremonie, die wir vollziehen werden, also lass sie uns schnell praktizieren. Sprich mit mir diese Worte: %CARGO"
   shalilleoffering_trigger_3 = "Beim Licht der strahlenden Sonne, wir flehen Dich an, Sha-Lill, schenke uns die Wiedergeburt"
   shalilleoffering_failure_3 = "Betreff: Schade\nAm heutigen Tage sind wir nicht hoch genug aufgestiegen, doch wir haben schon den Himmel berührt und das muss genug sein. Am heutigen Tage bleiben wir schwach und stehen mit leeren Händen da, aber zur rechten Zeit wird Sha-Lill uns erheben, mein Schützling."
   shalilleoffering_assign_4 = "~b%CARGO!"
   shalilleoffering_success_5 = "~bPreise Sha-Lill! Geh jetzt, trage das Symbol der Reinheit unserer Herrin hinaus in die Welt!"

   farenoffering_assign_2 = "~B~g%NAME, Kind unseres Herrn der Wildnis, willst Du von Dir etwas abgeben, damit Deine Mutter stärker wird?"
   farenoffering_trigger_2 = "Ja"
   farenoffering_assign_3 = "~B~gDann bete mit mir. Wir werden gemeinsam mit unserem eigenen Lebenssaft ein Symbol der Naturkraft bilden. Selten standen die Sterne so günstig für das Ritual, das wir vollziehen werden, also lass sie uns schnell praktizieren. Sprich mit mir diese Worte: %CARGO"
   farenoffering_trigger_3 = "Bei der Erde, den Winden, den Meeren und dem Feuer im Innern, ich rufe Dich, Faren, Herr der Wildnis"
   farenoffering_failure_3 = "Betreff: Die Sterne standen schlecht\nIch habe mich bei der Konstellation verschiedener Kräfte verrechnet; die Zeit war noch nicht reif für die Manifestation von Farens Macht. Vielleicht ein andermal, wenn die Himmelsuhr wieder die richtige Zeit anzeigt."
   farenoffering_assign_4 = "~B~g%CARGO!"
   farenoffering_success_5 = "~B~gSiehe, die Wildheit der Natur offenbart sich! Nun gehe los und trage die Macht unseres Herrn hinaus in die Welt!"

   kraananoffering_assign_2 = "~B~b%NAME, heldenhafte Kämpfernatur der Faust, willst Du von Dir etwas abgeben, damit Dein Herr gestärkt werden mag?"
   kraananoffering_trigger_2 = "Ja"
   kraananoffering_assign_3 = "~B~bDann bete mit mir. Wir werden gemeinsam mit unserem eigenen Lebenssaft ein Symbol der Macht unseres Herrn schmieden. Selten stehen die Sterne so günstig für die altüberlieferte Zeremonie, die wir vollziehen werden, also lass sie uns schnell praktizieren. Sprich mit mir diese Worte: %CARGO"
   kraananoffering_trigger_3 = "Bei dem Funken, der entspringt, wenn Stahl auf Stahl schlägt, rufe ich Dich herbei, Kraanan, die Faust"
   kraananoffering_failure_3 = "Betreff: Du musst stärker werden!\nDas Zeitfenster hat sich vorbeibewegt und wir hatten beide darunter zu leiden, weil Du gezögert hast. Das begonnene, aber unvollendete Ritual hat uns einen Teil unserer Macht entzogen. Du warst schwächer als ich angenommen hatte. Stähle Deinen Geist, auf dass wir an einem anderen Tage erfolgreich sein werden."
   kraananoffering_assign_4 = "~B~b%CARGO!"
   kraananoffering_success_5 = "~B~bAh, heute ist ein großer Tag für Kraanan! Geh jetzt, trage die Kraft unseres Herrn hinaus in die weite Welt!"

   riijaoffering_assign_2 = "%NAME, der Herr der Narren wünscht Dich zu stärken. Möchtest Du ihn mit mir besprechen?"
   riijaoffering_trigger_2 = "Ja"
   riijaoffering_assign_3 = "Dann sprich diese Worte mit mir: %CARGO. Fühle, wie Deine Macht mit jedem ausgesprochenen Wort größer wird."
   riijaoffering_trigger_3 = "Du sprichst weise Worte durch mich, mein Herr Riija"
   riijaoffering_failure_3 = "Betreff: Narr!\nJener, der am Rande einer Klippe steht und doch unbeirrt weitergeht, ist sowohl Gott als auch Narr. Geht weiter, Diener des Scheinbaren."
   riijaoffering_assign_4 = "%CARGO!"
   riijaoffering_success_5 = "Siehe da, die doppelseitige Gnade des Riija. Trage sie weit in die Welt hinaus und ernte das Chaos, das sie sät! Denk immer an diese uralten weisen Worte: Morgens wird es immer weh tun."

   sporeburstlearn_assign_2 = "%NAME, %LORDLADY, es ist ~Iwirklich~I eine Freude, Dich zu sehen. Ich habe Deinen Fortschritt beim Studium des Obskuren mit großem Interesse verfolgt; ich begegnete nur wenige Male jemandem, der meiner Lehre so würdig war. Du weißt vielleicht von meinen Forschungen auf dem Gebiet der Zauberei. Nun, endlich konnte ich einen vollkommen neuen Zauber ausarbeiten, zusammengefügt aus den Energiefeldern, die das religiöse Gesindel Faren und Qor nennen würde. Ich werde Dir meine neue Zauberformel beibringen, wenn Du für mich eine kleine Aufgabe erledigst: Objekt meines Interesses ist %INDEF_CARGO%CARGO, ich brauche davon, um die mystischen Eigenschaften untersuchen zu können."
   sporeburstlearn_assign_2_h = "%NAME, %LORDLADY, es ist ~Iwirklich~I eine Freude, Dich zu sehen. Ich habe Deinen Fortschritt beim Studium des Obskuren mit großem Interesse verfolgt; ich begegnete nur wenige Male jemandem, der meiner Lehre so würdig war. Du weißt vielleicht von meinen Forschungen auf dem Gebiet der Zauberei. Nun, endlich konnte ich einen vollkommen neuen Zauber ausarbeiten. Ich will Dir meine neue Zauberformel beibringen, wenn Du für mich eine kleine Aufgabe erledigst: Objekt meines Interesses ist %INDEF_CARGO%CARGO, ich brauche davon, um die mystischen Eigenschaften untersuchen zu können."
   sporeburstlearn_failure_2 = "Betreff: Schwacher Narr!\nIch hatte Dich falsch eingeschätzt, %NAME. Ich glaubte, Du seiest fähig zu großartigen Dingen, Höhepunkten der Macht, die schon die Geisterbeschwörer des Altertums einst nicht erreichten. Wie ich jetzt feststellen muß, habe ich mich geirrt."
   sporeburstlearn_success_2 = "Du bist wahrhaftig ein würdiger Zögling, %NAME. Ah, %INDEF_CARGO%CARGO! Kannst Du die Magie ~Ispüren~I, die schubweise davon ausgeht? Die darin eingeschlossene Macht liegt weit über der belanglosen religiösen Bedeutung, die diese Priesterinnen mit ihnen verbinden. Das ist der Stoff aus dem das Universum erschaffen wurde! ..."
   sporeburstlearn_assign_3 = "Ach ja, der Spruch, der Zauberspruch. Sporenwolke! Mir fehlt noch %INDEF_CARGO%CARGO und dann werde ich ihn Dir erklären und mehr noch - kürzlich habe ich noch einen anderen faszinierenden Zauber entdeckt."
   sporeburstlearn_assign_3_h = "Ach ja, der Spruch, der Zauberspruch. Waffe verfluchen! Bring mir schnell %INDEF_CARGO%CARGO und ich werde Dich lehren."
   sporeburstlearn_success_3 = "Es ist schon viele Monde her, seit %INDEF_CARGO%CARGO zuletzt meine Lippen berührte. Hättest Du nicht auch gern einen Schluck? Ist ~Isehr~I erfrischend. Tja, dann komm zurück, wenn Du den Zauber Sporenentladung erlernen möchtest und wir werden einen kleinen Toast ausbringen - ~IAuf die einfältigen Massen, die ihre willenlosen Körper aus Blut und Knochen anbieten, damit sie von schweigenden Steinen oder herumhüpfenden trügerischen Marionettengöttern verschlungen werden.~I"
   sporeburstlearn_success_3_h = "Es ist schon viele Monde her, seit %INDEF_CARGO%CARGO zuletzt meine Lippen berührte. Hättest Du nicht auch ein wenig davon ab? Es ist ~Isehr~I erfrischend. Nun, komm zurück, wenn Du den Waffen verluchen Zauber lernen möchtest und wir werden einen kleinen Toast ausbringen - ~IAuf die einfältigen Massen, die ihre willenlosen Körper aus Blut und Knochen anbieten, damit sie von schweigenden Steinen oder herumhüpfenden trügerischen Marionettengöttern verschlungen werden.~I"

   polishquest_assign = "Entschuldigung. Ich habe mich mit der Veredelung von Juwelen auseinandergesetzt und ich wüßte gerne, ob Du vielleicht irgendwelche ungeschliffenen Steine besitzt. Wenn ja, würde ich sie gerne polieren und Dir dann einen fertigen zurückgeben"
   polishquest_success = "Oh, danke. Erlaube mir, Dich zu belohnen."
   polishquest_failure = "Betreff: Edelsteine polieren\nMach Dir keine Gedanken wegen der ungeschliffenen Steine, ich habe von jemand anderem welche bekommen. Danke trotzdem."

   priestessinsignia_trigger = "Abzeichen"
   priestessinsignia_assign_2 = "~IWie ich sehe, besitzt Du einen nicht gekennzeichneten Schild. Ich bin mehr als bereit dazu, meine Insignien tapferen Zauberern anzubieten, vorausgesetzt, sie geben mir ihr Zehntes ab.~I"
   priestessinsignia_trigger_2 = "Zehntes"
   priestessinsignia_assign_3 = "~IIch hörte von einem Tor, das sich in eine andere Welt auftut. Ich bin sehr interessiert an magischen Reagenzien aus diesem Land - vielleicht bewirkt ihr Eintreffen, dass die Magie der guten Zauberer wie Du und ich gestärkt werden kann. Zieh los, %CARGO wartet darauf, für mich gefunden zu werden.~I"
   priestessinsignia_success_3 = "~IExzellent. Die Ewigen danken für Dein Wohlwollen.~I"
   priestessinsignia_failure_3 = "Betreff: Abzeichen\nIch hatte einen besseren Eindruck von Dir. Nun gut. Ich werde nach einem geeigneteren Kreuzritter Ausschau halten."

   monkinsignia_trigger = "Abzeichen"
   monkinsignia_assign_2 = "~gIch ~rsehe, ~bDu hast ~reinen ~gnicht ~bgekennzeichneten ~kSchild. ~rIch bin mehr ~bals ~gbereit ~bdazu, ~gmeine ~bInsignien ~reinem tapferen ~gB~be~kt~br~rü~kg~ge~br ~kanzubieten,~r vorausgesetzt, man bietet ~b~Bmir~B~r den Zehnten dafür.~k"
   monkinsignia_trigger_2 = "Zehnten"
   monkinsignia_assign_3 = "~IIch hörte von einem ~gTor ~k, das sich in eine andere Welt auftut. ~bIch ~kbin sehr interessiert an magischen ~rReagenzien ~kaus diesem Land - vielleicht bewirkt ~gihr Eintreffen, ~kdaß die Magie ~kder guten Zauberer wie Du und ich ~rgestärkt~g wird . ~rGeh - %CARGO ~b liegt schon irgendwo für mich bereit."
   monkinsignia_success_3 = "~B~bEx~rzell~gent. ~kDer Betrüger ~rdankt~k Dir für Dein Wohlwollen.~B"
   monkinsignia_failure_3 = "Betreff: Abzeichen\nIch hatte wirklich Besseres von Dir erwartet. Nun gut. Ich werde nach einem geeigneteren Narren Ausschau halten."

   factioninsignia_trigger = "Abzeichen"
   factioninsignia_assign_2 = "Wie ich sehe, trägst Du zwar ein Schild mit Farben, aber ohne Insignien. Wenn Du Dir vielleicht meine erarbeiten möchtest, hätte ich einen Auftrag für Dich."
   factioninsignia_trigger_2 = "Auftrag"
   factioninsignia_assign_3 = "Inmitten dieses politischen Chaos solidarisieren sich verschiedene Subjekte in aller Öffentlichkeit gegen mich. Glücklicherweise habe ich vor Ort meine Spione, die diese Umtriebe im Auge behalten. Wie verlautet, hat %NPC sich mit %CARGO beraten, und ich bin natürlich ganz neugierig darauf, worüber da gesprochen wurde. Tu mir einen Gefallen, erwähne den Namen dieser Person doch mal gegenüber unserem Freund %NPC und wiederhole mir Wort für Wort, was Dir gesagt wurde."
   factioninsignia_trigger_3a = "Esseldi"
   factioninsignia_trigger_3b = "Drex"
   factioninsignia_trigger_3c = "Bei Naq"
   factioninsignia_trigger_3d = "Zylill"
   factioninsignia_trigger_3e = "Alzahakar"
   factioninsignia_trigger_3f = "Priesterin Qertina"
   factioninsignia_trigger_3g = "Priesterin Xiana"
   factioninsignia_trigger_3h = "Jonas d'Accor"
   factioninsignia_failure_3 = "Betreff: Abzeichen Auftrag\nMeine Enttäuschung sitzt tief. Ich hatte gedacht, dass Du ganz bestimmt verlässlicher wärest als diese gemeinen Schläger und unberechenbaren Schweinehunde aus meinem Spionagering. Offenbar stehst Du rangmäßig noch viel tiefer."
   factioninsignia_assign_4 = "%CARGO."
   factioninsignia_trigger_4a = "Äh... ich weiß wirklich nicht, wovon Du sprichst"
   factioninsignia_trigger_4b = "Eine herausragende Persönlichkeit unserer Stadt. Sehr lang her, seit wir uns das letzte mal unterhalten haben"
   factioninsignia_trigger_4c = "Ah, ja! Wir plauderten darüber, welch gute Arbeit die Prinzessin leistet"
   factioninsignia_trigger_4d = "Ah, ja! Wir plauderten darüber, welch gute Arbeit der Herzog leistet"
   factioninsignia_trigger_4e = "Dieser Idiot hat mir letzte Woche bei einem Zoxila-Spiel alles abgenommen, was ich besaß "
   factioninsignia_trigger_4f = "Wer? Der Name hört sich nicht geläufig an"
   factioninsignia_success_4 = "Hmmm, faszinierend. Ich muss meine Spione weiter in ihre Kristallkugeln schauen lassen, doch deine Information brachte die Erkenntnis, die ich gebraucht habe. Hier, bitte nimm meine Insignien als Zeichen meiner Wertschätzung an."
   factioninsignia_failure_4 = "Betreff: Abzeichen Auftrag\nIch fürchte, Du bist bei der kleinen Prüfung durchgefallen, die Dein Lehnsherr und ich uns ausgedacht hatten. Wie wir erwartet hatten, ist deine Loyalität fragwürdig."

   mysterymonster_assign_2 = "Würdet Ihr etwas für mich tun? Ich werde Euch auch entlohnen. Ich habe Probleme mit Insekten, ja, wirklich."
   mysterymonster_trigger_2 = "Insekt"
   mysterymonster_assign_3 = "Fürwahr, irgendein großes Insekt hatte sich eine Zeitlang in meinem Lagerraum eingenistet. Ich schaffte es dann, es zu vertreiben. Ich hatte ein kleines Feuer gemacht und den Qualm hineingeblasen. Als sich der Rauch verzogen hatte, durchsuchte ich meine dort in Sicherheit gebrachte Sammlung von Schnittmustern und eines fehlte!"
   mysterymonster_trigger_3 = "Schnittmuster"
   mysterymonster_assign_4 = "Ich ~Imuß~I das Schnittmuster zurück haben und ich wette, es hängt am Rückenpanzer dieses Insektes fest. Könntet Ihr es für mich zurückholen? Zu allem Unglück konnte ich bei all dem Qualm nicht richtig sehen, was für eine Sorte Käfer es war, als er wegrannte. Doch er kann noch nicht besonders weit weg sein."
   mysterymonster_success_4 = "Du bist ein Engel, Kind! Hier, dieses Gewand ist nach einem meiner anderen Spezialschnittmuster gefertigt. Es hat wahrhaftig eine sehr altertümliche Machart. Trage es in Ehren."
   mysterymonster_failure_4 = "Betreff: Fehlendes Schnittmuster\nIch habe eine Kopie des verschwundenen Schnittmusters gefunden. Macht Euch also keine Gedanken mehr um das verlorene. Ich danke Euch trotzdem, dass Ihr es versucht habt."

   moxalscam1_assign_2 = "Oh, Spezi und Glücksritter! Ich glaube, ich habe für uns das perfekte Sprungbrett ins Glück gefunden! Es kann nicht schief gehen! Bestimmt möchtest Du mehr über diese glänzende Gelegenheit erfahren!"
   moxalscam1_trigger_2 = "Gelegenheit"
   moxalscam1_assign_3 = "Ganz einfach! Bring diesen Brief zu %NPC. Ehe Du es merkst, fängt der Rubel an zu rollen!"
   moxalscam1_failure_3 = "Betreff: Mein launischer Partner!\nIch vermute, Dir ist es nicht ernst genug mit dem Geld... Das ist sehr schade. Komm' zurück, wenn Du wirklich tief im Herzen sicher bist, dass es Zeit ist, reich zu werden!"
   moxalscam1_assign_4 = "Hmmm... Hiernach erwartet man von uns, dass wir den Brief an jemand anderen weitergeben sollen und dann werden wir reich. OK, warum bringst Du ihn nicht zu %NPC?"
   moxalscam1_failure_4 = "Betreff: Wo ist mein Geld?!?!\nDu hast mir Schillinge versprochen, Mengen davon! Wo sind sie? Du hast sie für Dich behalten, stimmts? Ich werde Deinen Vertrauensbruch nicht vergessen... Pass auf Dich auf, Langfinger."
   moxalscam1_success_5 = "Hmmm... Anscheinend glaubt diese Person, ich sei ein kompletter Idiot. Irgendwie bin ich überrascht, dass DU darauf reingefallen bist. Nun gut, da Du Dich wegen des ganzen Ärgers aufgerieben hast, möchte ich Dir eine Kleinigkeit geben. Hier."
   moxalscam2_assign_2 = "Anfang letzter Woche hatte ich einen großartigen Einfall und ich versuche seitdem, %NPC zu überzeugen, mir bei der Finanzierung zu helfen. Schau, wenn Du %NPC überreden kannst, werde ich die Einnahmen zwischen Euch beiden mehr als gerecht aufteilen."
   moxalscam2_failure = "Betreff: Mein launischer Partner!\nNun, beruhige Dich wieder! Du musstest mir nicht helfen, aber Du hast gesagt, dass Du es willst... Ich meine, niemand hat Dich dafür in die Zange genommen, oder? Also, komm' wieder, wenn Dir Dein Gefühl sagt, dass die Zeit gekommen ist, um ernsthaft ein paar Schillinge zu verdienen."
   moxalscam2_assign_3 = "Oh, Riija, laß mich raten. Moxal schickt Dich. Jawohl, sag ihm NOCH MAL, dass ich nicht interessiert bin."
   moxalscam2_trigger_3 = "Nicht interessiert"
   moxalscam2_assign_4 = "Nun mal sachte. Vermutlich hast Du Dich nicht genügend angestrengt. Versuch's nochmal und denk dran, %NPC an den zehnfachen - nein, HUNDERTFACHEN - Ertrag zu erinnern."
   moxalscam2_assign_5 = "VERFLIXT, WAS IST MIT EUCH LEUTEN LOS? Schau, Moxal ist entweder ein blauäugiger Narr oder ein vortrefflicher Dieb. Ich habe noch nicht herausgefunden, was, aber nur ein kompletter Idiot würde ihm Geld geben. Sag ihm, ich bin NICHT INTERESSIERT."
   moxalscam2_success_5 = "*-seufz-* Na gut, ich denke, %SOURCE_NPC hat wohl nicht das nötige Stehvermögen für sowas. Ich glaube nicht, dass DU 100.000 Schillinge besitzt, die in eine einigermaßen riskante Unternehmung investiert werden können?"

   letter_trigger = "Bote benötigt"
   council_letter_assign = "Warum? Ja, ich benötige jemanden. Nimm diesen Brief und Bringe ihn so schnell als möglich zu dem Ratsmitglied %NPC. Er wird Deinen Dienst bezahlen."
   council_letter_success = "Ich habe diesen Brief erwartet. Danke, %NAME. Hier ist Dein Geld."
   council_letter_failure = "Betreff: Der Brief, den ich Dir anvertraut habe\n%NPC erhielt meinen Brief nicht rechtzeitig. In Zukunft muss ich mir einen anderen Boten suchen."

   chess_assign_2 = "Ich spiele Schach mit einem Freund. Wärest Du bereit, meinem Gegner meinen nächsten Zug zu überbringen?"
   chess_trigger = "Ja"
   chess_assign_3 = "Wunderbar! Bitte teile %NPC mit, dass mein nächster Zug %CARGO ist."
   chess_assign_4 = "Ein interessantes Manöver, aber einfach zu kontern. Sage %NPC, dass mein Zug %CARGO lautet."
   chess_success_4 = "Ganz gerissen! Darüber muss ich erstmal ein wenig nachdenken, ehe ich erwidere. Danke für Deine Hilfe, unser Spiel durchzuführen, hier hast Du eine Kleinigkeit für Deine Mühe."
   chess_failure = "Betreff: Mein Schachzug\nMach Dir keinen Kopf über die Ablieferung meines Zuges; ich habe bereits einen anderen Kurier gefunden."
   chess_checkmate_assign_5 = "Ha! %NPC ist genau in meine Falle getappt! Sag, dass mein nächster Zug %CARGO lautet. Oh, und erwähne auch, dass ich damit ein 'schachmatt' erreicht habe."
   chess_checkmate_success_5 = "Oh. Ja, ich hätte das merken müssen. Ach, nun gut. Danke, dass Du uns als Bote unterstützt hast. Gemäß meiner Absprache mit %SOURCE_NPC muss ich die Kosten für den Kurier für das Spiel übernehmen. Bitte nimm dies als Entschädigung für Deine Mühen."

   love_letter_1_assign = "Ja, in der Tat, dieser %INDEF_CARGO%CARGO hier ist für meinen Liebling %NPC. Bitte überbringe es ihr und versichere sie meiner Liebe. Sag ihr, dass ich sie vermisse, machst Du das? Und dass ich mich nach dem Augenblick sehne, wenn wir uns wiedersehen. Nun geh schnell, sonst denkt sie noch, dass meine Liebe zu ihr nur flüchtig und launenhaft ist."
   love_letter_1_success = "Ah, noch ein Brief von %SOURCE_NPC. Wie wunderbar. Bitte nehmt dies für Eure Bemühungen."
   love_letter_failure = "Betreff: Du hast meinen Brief nicht abgegeben!\nDank Eurer Nachlässigkeit muss mein Liebling %NPC glauben, dass ich keine Lust mehr habe. In Zukunft werde ich mich um einen verlässlicheren Boten bemühen!"
 
   love_letter_2_assign = "Ja, tatsächlich habe ich gerade ein Sendschreiben, das zugestellt werden muß. Wenn Ihr diesen Brief hier zu %NPC bringt, wäre ich sehr dankbar."
   love_letter_2_success = "Ah, ein Brief von meiner hübschen %SOURCE_NPC! Es wird mir warm ums Herz zu hören, dass sie an mich denkt. Bitte nehmt dies als Zeichen meiner Dankbarkeit."

   necroguild_assign_2 = "Ich wünsche mir, auf Deine Ebene der Existenz zurückzukehren, mein dunkles Kind. Wirst Du mir helfen, wieder aufzuerstehen?"
   necroguild_trigger_2 = "Ja"
   necroguild_assign_3 = "Hervorragend. Meine Seele dürstet nach dem Blut der Unschuldigen. Bringe mir das, damit ich Meridian erneut beherrschen kann!"
   necroguild_failure_3 = "Betreff: Du hast versagt.\nDu hast vor mir versagt. Ich werde mir jemand anderen suchen, der mich zurück in diese Welt bringt."
   necroguild_success_3 = "Ah! LEBEN!! Ich mit meinen dunklen Orden der Nekromanten bin wiedergeboren! Für Deine treuen Dienste an mir erhebe ich Dich zu dem Meister des Ordens."
     
   aphrodesiac_assign_2 = "Ja, ich brauche dringend einen Kurier. Ich möchte das vertraulich behandelt wissen. Ich habe ... äh ... Probleme mit ... gut äh, Männerprobleme. Mir wurde erzählt, dass %NPC ein mächtiges Mittel besitzt. Bitte beeile Dich und frage dort nach."
   aphrodesiac_failure_2 = "Betreff: Dein Gefallen\nIch denke, Du hast mich betrogen. Ich werde mir einen anderen suchen, der meinen Auftrag erfüllt."
   aphrodesiac_trigger_2 = "Mittel"
   aphrodesiac_assign_3 = "Ja, ich weiß ein starkes Mittel: Das Ei einer Spinnenkönigin. Besorg mir eines und ich werde ein Gebräu daraus machen."
   aphrodesiac_failure_3 = "Betreff: Das Spinnenei\nIch nehme an, Du konntest kein Spinnenei auftreiben. Nun gut, ich werde selbst eines finden und das Gebräu überbringen. Mach Dir keine Gedanken mehr darüber."
   aphrodesiac_assign_4 = "Eine gute Probe! Bringe diesen Trank %NPC. Ich bin sicher, sie wird mit den Ergebnissen sehr zufrieden sein."
   aphrodesiac_failure_4 = "Betreff: Die Flasche mit dem Mittel\nIch denke Du hast Dich entschieden, die Flasche selbst zu benutzen. Möge sie Dir gut genutzt haben."
   aphrodesiac_success_4 = "Du bist mein Retter, %NAME. Segen über Dich. Hier, ein Geschenk als Zeichen meines Dankes."

   necrowarning_assign_2 = "Ja, ich brauche einen Boten. Es sieht so aus, als hätten wir eine neue Kraft im Land oder besser eine sehr alte, voll der Dunkelheit. Möglicherweise bekommen die Narren in den Tempel nun, was sie für ihre Arroganz verdienen. Wie können sie wirklich denken, dass ihre Götter die einzigen Götter sind? Hoffentlich hilft dieser Brief, das Unvermeidbare zu beschleunigen. Bringe ihn zu %NPC und komm zu mir zurück für Deine ... Belohnung. Versage und Du wirst leiden."
   necrowarning_success_2 = "Du warst das Werkzeug einer unvernünftigen Person. Ich habe das von ihm erwartet, aber es gibt keine Entschuldigung für Deine Verderbtheit. Kannst Du nicht einen besseren Geldgeber für Deine Begeisterung finden? Mmh, möglicherweise nicht."
   necrowarning_failure_2 = "Betreff: Mein Brief\nSo, Du willst also ein Spiel mit mir treiben? Deine Unverschämtheit ist entweder ein Akt eines Narren oder der eines Feiglings. Wie dem auch sei, Du solltest hoffen, dass wir uns nicht wieder begegnen. Bitte nimm diesen Fluch als ein Zeichen meines Mißfallens."
   necrowarning_success_3 = "Ich denke, Du bist zurückgekommen, um Dir Deine Belohnung abzuholen. In Wahrheit ist Deine Belohnung das Wissen um die überbrachte Botschaft. Aber... Ich verstehe die materiellen Wünsche von Leuten wie Dir. Hier also die Belohnung."

   barrestock_assign_2 = "Ja, ich habe fast keine Vorräte mehr. %NPC weiß, was ich brauche, und es ist bereits bezahlt. Frage einfach %HIMHER_NPC nach der Lieferung und beeile Dich!"
   barrestock_trigger_2 = "Lieferung"
   barrestock_failure_2 = "Betreff: Meine Lieferung an Vorräten\nDenke nicht mehr an die Lieferung. Ich werde einen anderen Kurier finden."
   barrestock_assign_3 = "Ah ja, die Lieferung ist fertig zum Versenden. Beeile Dich mit diesen %INDEF_CARGO%CARGO und liefere es %NPC. Unterstehe Dich, unehrlich zu sein, oder ich muss Dich dem Justiziar als gesetzlos melden."
   barrestock_assign_3_h = "Ah ja, die Lieferung ist fertig zum Versenden. Beeile Dich mit diesen %INDEF_CARGO%CARGO und liefere es %NPC. Unterstehe Dich, unehrlich zu sein, oder ich muss Dich dem Justiziar als gesetzlos melden."
   barrestock_success_3 = "Vielen Dank, %NAME, Du hast mir heute einen großen Gefallen getan. Nimm dieses kleine Geschenk als Zeichen meines Dankes."
   barrestock_failure_3 = "Betreff: Dieb!\nIch habe dem Justiziar den Diebstahl von %CARGO gemeldet und seitdem wirst Du als Gesetzloser angesehen."
   barrestock_failure_3_h = "Betreff: Dieb!\nIch habe einem befreundeten Zauberer berichtet, dass Du %CARGO gestohlen hast, und er hat mir garantiert, dass Du für Deine Unehrlichkeit bezahlen wirst."

   catering_assign_2 = "Vielleicht kannst Du mir helfen. Ich habe eine kleine private Feier und mein Laufbursche ist krank geworden. Wirst Du mir helfen, das Essen zu liefern? %NPC organisiert das Essen und weiß, wohin es geliefert werden muß. Frage einfach %HIMHER_NPC nach der Lieferung. Du wirst großzügig belohnt, wenn Du die Lieferung ausgeführt hast. Bitte beeile Dich."
   catering_failure_2 = "Betreff: Catering\nIch habe jemand anderen gefunden, der das erledigt."
   catering_trigger_2 = "Lieferung"
   catering_assign_3 = "Ja, die Party! Ich war schon verunsichert, ob jemals jemand deswegen kommen würde. Hier ist das Essen, %INDEF_CARGO%CARGO. Bitte bringe es zu %NPC, wo die Partyvorbereitungen erledigt werden%HIMHER_NPC. Bitte verliere nichts von dem Essen, da dieses Geschäft sehr wichtig für mich ist. Sollte die Lieferung %NPC niemals erreichen, bin ich gezwungen, Dich beim Justiziar wegen Diebstahls zu melden. Ich bin mir aber sicher, dass das nicht nötig sein wird..."
   catering_assign_3_h = "Ja, die Party! Ich war schon verunsichert, ob jemals jemand deswegen kommen würde. Hier ist das Essen, %INDEF_CARGO%CARGO. Bitte bringe es zu %NPC, wo die Partyvorbereitungen erledigt werden%HIMHER_NPC. Bitte verliere nichts von dem Essen, da dieses Geschäft sehr wichtig für mich ist. Sollte die Lieferung %NPC niemals erreichen, bin ich gezwungen, mit einem befreundeten Zauberer sprechen zu müssen. Selbst wenn ich sicher bin, dass es nicht nötig ist."
   catering_failure_3 = "Betreff: Du hast das Essen für die Party gestohlen!\nIch habe Dich beim Justiziar wegen des Diebstahls gemeldet und Du bist fortan als Gesetzloser bekannt."
   catering_failure_3_h = "Betreff: Du hast das Essen für die Party gestohlen!\nIch habe mit einem befreundeten Zauberer gesprochen und er hat mir garantiert, dass Du für Deine Unehrlichkeit bezahlen wirst."
   catering_success_3 = "Ah, was für eine Auswahl! Mir läuft das Wasser im Munde zusammen. Hier ist Dein Entgeld. Danke für die schnelle Erledigung."

   apothecary_assign_2 = "Bitte bringe %INDEF_CARGO%CARGO zu %NPC. Ein Diebstahl dieser Gegenstände führt dazu, dass Du zum Gesetzlosen erklärt wirst. Ich habe bereits mit %NPC gesprochen und vereinbart, dass er Dich für Deine Mühe entlohnt. Du hast einen meridianischen Tag, um die Sachen abzuliefern."
   apothecary_assign_2_h = "Bitte bringe %INDEF_CARGO%CARGO zu %NPC. Der Diebstahl jeder dieser Gegenstände wird zu großem Unglück führen. Ich habe bereits mit %NPC gesprochen und vereinbart, dass er Dich für Deine Mühe entlohnt. Du hast einen meridianischen Tag, um die Sachen abzuliefern."
   apothecary_success_2 = "Danke für die pünkliche Lieferung. Das Geschäft boomt zur Zeit! Ich frage mich warum? Oh, richtig, hier ist Deine Bezahlung. Komm vielleicht später nochmal vorbei, wenn Du daran interessiert bist, diesen Auftrag nochmal zu erledigen. Du hast der Beziehung zwischen mir und %SOURCE_NPC geholfen."
   apothecary_failure_2 = "Betreff: Dieb!\nDein Diebstahl von %INDEF_CARGO%CARGO hat Dich zum Gesetzlosen gemacht."
   apothecary_failure_2_h = "Betreff: Dieb!\nNachdem Du %INDEF_CARGO%CARGO gestohlen hast, bin ich gezwungen, Dich mit einem Fluch zu belegen. Ertrage ihn tapfer."

   ore_assign_2 = "%NPC hat kein Erz mehr. Bitte nimm dieses Erz und überbringe es schnellstmöglich! Es wäre unklug, mich betrügen zu wollen. Diebe werden angezeigt und enden als Gesetzlose. Beeile Dich. %NPC wird Dich für Deine Mühe bezahlen. "
   ore_assign_2_h = "%NPC hat kein Erz mehr. Bitte nimm dieses Erz und überbringe es schnellstmöglich! Es wäre unklug, mich zu betrügen. Der Diebstahl wird für uns beide in großem Unglück enden. Beeile Dich. %NPC wird Dich für Deine Mühe bezahlen. "
   ore_success_2 = "Danke für das Erz. Hier Deine Belohnung. Vielleicht können wir später nochmals ins Geschäft kommen."
   ore_failure_2 = "Betreff: Dieb!\nDein Erzdiebstahl wurde gemeldet und Du wurdest zum Gesetzlosen erklärt. Wende Dich an die zuständige Autorität, um das zu klären."
   ore_failure_2_h = "Betreff: Dieb!\nEs wurde berichtet, dass Du das Erz gestohlen hast. Ich habe mit einem befreundeten Zauberer gesprochen und er hat garantiert, dass Du für Deine Unehrlichkeit bezahlen wirst."

   vaulttax_assign_2 = "Ja, ich brauche einen Boten. %NPC bekommt eine sichere prozentuale Beteiligung meiner Geschäftseinnahmen. Bitte nimm diesen zehnten Teil %INDEF_CARGO%CARGO und liefere das ab. Ich bin zu beschäftigt, um das zu erledigen. Sei gewarnt! Diebstahl wird von mir sofort gemeldet und Du wirst zum Gesetzlosen. Möglicherweise sogar noch schlimmer, denn wie ich gehört habe, hat sich %NPC nun mit einem Zauberer verbündet. Ich habe arrangiert, dass %NPC Dich für Deine Mühe bezahlen wird. "
   vaulttax_assign_2_h = "Ja, ich brauche einen Boten. %NPC bekommt eine sichere prozentuale Beteiligung meiner Geschäftseinnahmen. Bitte nimm diesen zehnten Teil %INDEF_CARGO%CARGO und liefere das ab. Ich bin zu beschäftigt, um das zu erledigen. Sei Dir sicher, dass jeder Diebstahl gemeldet wird und ich davon höre werde.hat sich %NPC nun mit einem Zauberer verbündet. Ich habe arrangiert, dass %NPC Dich für Deine Mühe bezahlen wird. "
   vaulttax_success_2 = "Ahh, sehr gut, %SOURCE_NPC liefert diese Woche pünktlich. Danke für Deine Schnelligkeit und Ehrlichkeit. %SOURCE_NPC sollte Dich häufiger beauftragen."
   vaulttax_failure_2 = "Betreff: Dieb!\nDein Diebstahl von %CARGO hat Dich wegen %NPC zum Gesetzlosen gemacht."
   vaulttax_failure_2_h = "Betreff: Dieb!\nIch habe mit einem befreundeten Zauberer gesprochen und er hat mir garantiert, dass Du für Deine Unehrlichkeit bezahlen wirst."

   merchanttax_assign_2 = "Würdest Du meine Steuern zu %NPC bringen? Ich bin diesmal wirklich spät dran und brauche Dich um diese %INDEF_CARGO%CARGO zu %NPC zu bringen. Solltest Du stehlen, wirst Du schneller als Du denkst zum Gesetzlosen erklärt - also denke nicht einmal an so etwas. Ich habe veranlasst, dass du für diesen Dienst bezahlt wirst."
   merchanttax_assign_2_h = "Würdest Du meine Steuern zu %NPC bringen? Ich bin diesmal wirklich spät dran und brauche Dich um diese %INDEF_CARGO%CARGO zu %NPC zu bringen. Solltest Du stehlen, wirst Du schneller als Du denkst zum Gesetzlosen erklärt - also denke nicht einmal an so etwas. Ich habe veranlasst, dass du für diesen Dienst bezahlt wirst."
   merchanttax_success_2 = "Ah, ich habe mich schon gewundert, wann %SOURCE_NPC mir einen Besuch abstatten würde. Hier Deine Bezahlung für ... für Deinen schnellen Dienst."
   merchanttax_failure_2 = "Betreff: Dieb!\nDein Diebstahl von %CARGO hat Dich wegen %NPC zum Gesetzlosen gemacht."

   latetax_assign_2 = "Eine dringende Angelegenheit hat meine Aufmerksamkeit erweckt. Vertraute Besitzer und Geschäftsinhaber in der Gemeinschaft haben ihre Pflichten vernachlässigt und ihre Steuern nicht bezahlt. Würdest Du bitte diesen Brief umgehend zu %NPC bringen. Sei gewarnt, dieser Brief ist Eigentum des Reichs und sollte er nicht in einer gewissen Zeit überbracht werden, wirst Du zum Gesetzlosen erklärt. Hier etwas für Deine Mühe. Und nun beeile Dich."
   latetax_assign_2_h = "Eine dringende Angelegenheit hat meine Aufmerksamkeit erweckt. Vertraute Besitzer und Geschäftsinhaber in der Gemeinschaft haben ihre Pflichten vernachlässigt und ihre Steuern nicht bezahlt. Würdest Du bitte diesen Brief umgehend zu %NPC bringen. Sei gewarnt, dieser Brief ist Eigentum des Reichs und sollte er nicht in einer gewissen Zeit überbracht werden, wirst Du zum Gesetzlosen erklärt. Hier etwas für Deine Mühe. Hier ist etwas gegen deine Probleme. Und jetzt beeile dich."
   latetax_success_2 = "Was ist das? Weißt Du, es ist seltsam, wie streng %SOURCE_NPC beim Steuereintreiben geworden ist. Ich vermute, da steckt mehr dahinter, als es scheint. Ich habe einen Verdacht, aber das geht Dich nichts an."
   latetax_failure_2 = "Betreff: Du bist nun ein Gesetzloser\nDu bist zum Gesetzlosen erklärt worden, weil Du %NPC den Steuerbrief nicht überbracht hast."
   latetax_failure_2_h = "Betreff: Dafür wirst Du nun bezahlen, Dieb!\nIch habe mit einem befreundeten Zauberer gesprochen und er hat mir garantiert, dass Du für Deine Unehrlichkeit bezahlen wirst."

   kocweapon_assign_2 = "Ich brauche eine verbürgte Lieferung zum Festland. Es ist eine Regierungsangelegenheit, deshalb würde eine nicht durchgeführte Zustellung in einem Gesetzlosenstatus enden. Bist Du bereit, diese Bedingungen anzunehmen?"
   kocweapon_assign_2_h = "Ich brauche eine verbürgte Lieferung zum Festland. Es ist eine Regierungsangelegenheit, deshalb würde eine versäumte Übergabe böse enden würde. Bist du bereit, diese Bedingungen zu akzeptieren?"
   kocweapon_failure_2 = "Betreff: Ich sollte mir einen anderen Kurier suchen\nIch verstehe Deinen Widerwillen, Dich auf solch eine lange Reise zu begeben. Trotzdem Danke."
   kocweapon_assign_3 = "%NPC fragte mich nach meinen Diensten für %HIMHER_NPC, um die Splittertruppen zu versorgen. Unglücklicherweise habe ich niemanden, der diese Ladung zu %HIMHER_NPC bringt. Hier sind die %INDEF_CARGO%CARGO für die Lieferung; Ich bin mir sicher, dass %NPC Dich für deine Mühe belohnen wird. Denke daran, dass Du gesetzlich verpflichtet bist diese Lieferung zu überbringen. Ein Versagen würde Dich zum Gesetzlosen machen. Aus irgendeinem Grunde vertraue ich Dir jedoch."
   kocweapon_assign_3_h = "%NPC fragte mich nach meinen Diensten für %HIMHER_NPC, um die Splittertruppen zu versorgen. Unglücklicherweise habe ich niemanden, der diese Ladung zu %HIMHER_NPC bringt. Hier sind die %INDEF_CARGO%CARGO für die Lieferung; Ich bin mir sicher, dass %NPC Dich für deine Mühe belohnen wird. Denke daran, dass Du gesetzlich verpflichtet bist diese Lieferung zu überbringen. eine versäumte Übergabe wird böse enden."
   kocweapon_failure_3 = "Betreff: Dieb!\nDer Diebstahl der Sachen von %NPC hat Dich zum Gesetzlosen gemacht."
   kocweapon_failure_3_h = "Betreff: Dieb!\nDas Unglück, das Du durch Deine böse Tat verursacht hast, möge Dir folgen, wo immer Du hingehst."
   kocweapon_success_3 = "Danke Dir. Das ist die erste Lieferung von vielen. Möge es eine gute Handelsbeziehungen für die kommenden Jahre pflegen. Hier, bitte nimm %INDEF_CARGO%CARGO."

   kocale_assign_2 = "Ich brauche eine garantierte Lieferung zu der Insel. Eine unterlassene Lieferung macht Dich zum Gesetzlosen. Bist Du bereit, diese Bedingungen zu akzeptieren?"
   kocale_assign_2_h = "Ich brauche eine garantierte Lieferung zu der Insel. Eine unterlassene Lieferung macht Dich zum Gesetzlosen. Bist Du bereit, diese Bedingungen zu akzeptieren?"
   kocale_failure_2 = "Betreff: Ich sollte mir einen anderen Kurier suchen\nIch verstehe Deinen Widerwillen, Dich auf solch eine lange Reise zu begeben. Trotzdem Danke."
   kocale_assign_3 = "%NPC in Kocatan hat Bedarf an unserer Ware für seine Kunden auf der anderen Seite. Bitte bringe diese %INDEF_CARGO%CARGO zu %NPC. Ich habe arrangiert, dass %NPC Dich für die Reise bezahlen wird. Stehle nicht meine Waren! Das wird Dich nicht nur zum Gesetzlosen machen - ich habe auch einen Freund, einen Zauberer, der sehr gut im Verfluchen ist. Aber laß uns nicht über solche Dinge sprechen ...Das kann der Anfang von etwas sein, das für alle sehr profitabel ist, mein Freund!"
   kocale_assign_3_h = "%NPC in Kocatan hat Bedarf an unserer Ware für seine Kunden auf der anderen Seite. Bitte bringe diese %INDEF_CARGO%CARGO zu %NPC. Ich habe arrangiert, dass %NPC Dich für die Reise bezahlen wird. Beklaue mich nicht;  Ich habe einen Freund, einen Zauberer, der sehr gut im Verfluchen ist. Aber laß uns nicht über solche Dinge sprechen ...Das kann der Anfang von etwas sein, das für alle sehr profitabel ist, mein Freund!"
   kocale_failure_3 = "Betreff: Dieb!\nDein Diebstahl hat Dich durch das Urteil des Herzogs zum Gesetzlosen gemacht."
   kocale_failure_3_h = "Betreff: Dieb!\nDas Unglück, das Du durch Deine böse Tat verursacht hast, möge Dir folgen, wo immer Du hingehst."
   kocale_success_3 = "Ich sehe, dass %SOURCE_NPC sein Wort gehalten hat. Das ist sehr gut. Ich bin mir sicher, dass das der Anfang einer für alle zufriedigendstellenden Beziehung ist. Hier ist ein Zeichen meiner Wertschätzung."

   necrowarning2_assign_2 = "Ich habe Neuigkeiten von großer Dringlichkeit. Meine Reisen haben mich zu vielen Orten gebracht und ich habe viele fremdartige Dinge gesehen. Doch keine so gefährlichen wie diese verdorbenen Nekromanten. Bitte bring diesen Brief schnell zu %NPC. Ich glaube, dass diese Kreaturen eine Bedrohung für ganz Meridian darstellen. Sie kommen von einer Kraft, die älter als unsere Götter ist, auch wenn diese Gewalten in irgendeiner Art verknüpft sein könnten."
   necrowarning2_success_2 = "Du bringst mir das Geschwätz einer einfältigen Seele mit einem mitleiderregenden Gehirnzustand? Ich habe momentan wichtigere Dinge zu tun. Verlasse mich, ich habe Dir nichts zu sagen."
   necrowarning2_failure_2 = "Betreff: Mein Brief\n\nDu hast vor Deinen Freunden und dem Volk von Meridian für die Jahre, die kommen werden, versagt. Sie sind verdammt zu einem Leben in bösartiger Verdorbenheit und Du hast Dich entschlossen, ihnen nicht einmal eine Warnung zukommen zu lassen? Deine Verfehlung wird Leben kosten. Ich hoffe, Du kannst damit leben."
   necrowarning2_success_3 = "Sie hört nicht, aber das ist gleichgültig. Sie wurde gewarnt. Dank an Dich, mutige Seele. Nimm das als materielle Belohnung für Deinen Dienst an den Bewohner von Meridian."

   warletter_trigger1 = "Bote benötigt"
   warletter_assign = "Ah ja! Ich habe gerade diesen Brief an %NPC geschrieben. Bitte liefere ihn aus. Ich schlage vor, dass Du einen Leibwächter anheuerst. Ich bin sicher, dass die Belohnung für Dich und einen Wächter reichen wird."
   warletter_success = "Oh, Danke! Ich habe keinen Brief von %SOURCE_NPC erwartet, aber ich nehme ihn gerne.Bitte nimm dies als Zeichen meiner Wertschätzung."
   warletter_failure = "Betreff: Mein Brief?\nIch habe aus verlässlicher Quelle gehört, dass Du es nicht nur versäumt hast, meinen Brief zu überbringen, sondern dass Du ihn geöffnet und gelesen hast! Wie konntest Du! Nächstes Mal werde ich Dich dem Richter melden."

   identify_trigger = "Bote benötigt"

   potion_identify_assign_1 = "Tatsächlich! Ich habe vor kurzem diesen Zaubertrank erhalten! Ich habe versucht, ihn mit Hilfe von Magie zu identifizieren, aber er scheint meinen Bemühungen zu widerstehen. Könntest Du ihn zu %NPC bringen und %HIMHER_NPC fragen, ob sie ihn identifizieren können? Komm' zurück, falls Du weisst, was es ist, und ich werde dich dafür belohnen."
   potion_identify_assign_2 = "Hmm, ein sehr interessantes Exemplar. Lass mich nur ein paar Tropfen für die Analyse entnehmen... Ah ja, es scheint ein %CARGO zu sein. Lass mich ein Etikett darauf machen, damit %NPC weiß, was es ist."
   potion_identify_success = "Sehr gut, ich bin sicher, dass ich eine gute Verwendung für ein %CARGO finden werde. Hier, bitte nimm das in Zahlung."
   potion_identify_failure_1 = "Betreff: Der merkwürdige Trank\nHast Du Dich verlaufen? Mach Dir nichts draus. Das passiert Leuten, die neu in dieser Gegend sind, öfters. Der Zaubertrank war vermutlich gar nicht so wichtig. Vielleicht hab ich andere Aufgaben für Dich, wenn Du in Zukunft mal wieder hier vorbeikommst. Pass' auf Dich auf!"
   potion_identify_failure_2 = "Betreff: Der merkwürdige Trank\nHast Du Dich verlaufen? Mach Dir nicht draus. Das passiert Leuten, die neu in dieser Gegend sind, öfters. %NPC hat mich angesprochen und mir gesagt, dass der Zaubertrank sowieso nicht wichtig war. Schmeiss' dieses %CARGO einfach weg, nachdem sein Verfallsdatum schon lange abgelaufen ist."

   wand_identify_assign_1 = "Doch, jetzt wo Du es sagst. Ich hab vor Tagen einen solchen Zauberstab  gefunden, aber ich komme nicht darauf, was es mit ihm auf sich hat - scheinbar kann er Magie abwehren. Würde es Dir etwas ausmachen, ihn zu %NPC zu bringen, damit %HIMHER_NPC ihn für mich identifziert?  Ich wäre Dir sehr zu Dank verpflichtet."
   wand_identify_assign_2 = "Einen Zauberstab, was? Mhhh, zeig mal her ... aha! Siehst du die Runen hier ... da, am Griff ... Es muss %CARGO sein. Lass mich die Überstzung als Beschriftung auf dem Zauberstab anbringen, damit %NPC weiß, worum es sich handelt."
   wand_identify_success = "Wunderbar!  Ein %CARGO würde sicher ganz gelegen kommen. Ich werde Dir etwas für Deine Bemühungen geben."
   wand_identify_failure_1 = "Betreff: Der merkwürdige Stab\nZu diesem Zauberstab fällt mir ein, dass er ein ziemlich nutzloser Gegenstand ist. Bemühe Dich nicht, ihn zu identifizieren, ich bin sicher, dass es das nicht wert ist. Ich habe bestimmt andere Aufgaben für Dich zu erledigen, wenn Du in Zukunft mal wieder vorbeikommst. Bis später!"
   wand_identify_failure_2 = "Betreff: Der merkwürdige Stab\n%NPC hat mir gesagt, dass dieser Zauberstab sowieso nicht wichtig war. Mach Dir keine Sorgen über die Rückgabe. Wenn ich Du wäre, würde ich ihn eigentlich wegwerfen. Obwohl ich sagen könnte, was es war, hat es nicht so ausgesehen, als ob es gut funktionieren würde."

   jala_necklace_trigger = "Halskette"
   jala_necklace_assign_1 = "Ein Halsband Jalas? Ich habe von solchen feinen Dingen gehört, aber ich habe selbst leider keines. Gerüchte besagen, dass %NPC vor kurzem mit so einem angegeben hat. Vielleicht solltest du %HIMHER_NPC über das Halsband befragen?"
   jala_necklace_assign_2 = "Oh, JA! Ich bin froh, dich zu sehen, Freund. Schau, ich habe die beste Idee der Welt! Du singst doch, nicht wahr? Warum gehst du nicht und fragst %NPC ob %HIMHER_NPC sich nicht über etwas ~IUnterhaltung~I freuen würde? Ich werde als dein Agent agieren, und wir können den Gewinn fair teilen. Oh, und ich gebe dir auch dieses Halsband, das du willst."
   jala_necklace_trigger_2 = "Unterhaltung"
   jala_necklace_assign_3 = "Du singst hier? HA! Es gibt KEINEN Weg, dasss ich diesem Idiot Moxal traue. Geh und sprich mit %NPC und frage %HIMHER_NPC über diesen ~IVorschlag~I von Moxal."
   jala_necklace_trigger_3 = "Vorschlag"
   jala_necklace_assign_4 = "Warum hat %NPC dich hergeschickt? Geh und sage %HIMHER_NPC, dass er endlich aufhören soll, so dumm zu sein und dich ~Isingen~I zu lassen."
   jala_necklace_trigger_4 = "singen"
   jala_necklace_assign_5 = "Fein. Geh, hol' dein %CARGO und spiel ein Lied, dann gib %CARGO mir."
   jala_necklace_assign_6 = "Exzellent! Nach dieser Vorführung werden die Leute mir gutes Geld für die Laute eines solch berümhten Barden zahlen. Geh und erzähle %NPC, dass du dich wacker geschlagen hast."
   jala_necklace_success = "Du hast es geschafft? Die Bezahlung war geringer als ich erwartet hatte, also muss ich alles einbehalten um meine Kosten zu decken. Aber, hier ist das Halsband was ich dir versprochen habe. Komm bald zurück!"
   jala_necklace_failure_1 = "Du bist wohl verlorengegangen, hm? Weisst du nicht, dass %NPC auf dem Eiland lebt?"
   jala_necklace_failure_2 = "Ohje! Du bist nicht rechtzeitig für die Aufführung erschienen! %NPC teilte mir mit, dass eine andere Veranstaltung arrangierd wurde."
   jala_necklace_failure_3 = "Ich wusste es, das war wieder eine von Moxals Maschen. Lass dich nicht noch einmal auf ihn ein, mein Freund!"
   jala_necklace_failure_4 = "Hast du die Nerven verloren? Du musst %NPC das nächste Mal die Stirn bieten!"
   jala_necklace_failure_5 = "Nicht interessiert? Fein, ich werde jemand anders finden, er es ist."
   jala_necklace_failure_6 = "Du hast Moxal nicht aufgesucht? Ich habe gehört, wie er darüber lachte, was für einen Trottel er doch gefunden hat. Sei darauf vorbereitet, dass er dich wieder ausnutzt!"

   faction_soldier_trigger = "Soldat"

   duke_faction_soldier_assign_1 = "Ja, vielleicht kannst du es wirklich. Beweise deine Loyalität und ermorde %INDEF_MONSTER%MONSTER. Du kannst normalerweise welche finden, die Flaggenmasten bewachen. Komm danach hierher zurück, um von deinen Taten zu erzählen."
   duke_faction_soldier_assign_2 = "Exzellent. Zeige mir nun deine Missachtung für meine Gegner indem du %INDEF_MONSTER%MONSTER umbringst. Komm zu mir zurück wenn du diese Tat vollbracht hast."
   duke_faction_soldier_success = "Gut gemacht, mein Soldat. Willkommen in den Rängen der Elite. Bringe meinen Einfluss und meine Macht zu denen dieses Landes!"
   duke_faction_soldier_failure = "Du hast die Nerven verloren? Wie kannst du daran denken, auf dem Schlachtfeld zu überleben, wenn du das Töten nicht erträgst?"

   princess_faction_soldier_assign_1 = "Ich benötige Verbündete. Bitte, zeige deine Loyalität, indem du %INDEF_MONSTER%MONSTER bekämpfst. Du solltest einen finden, der einen Flaggenmast in der Nähe bewacht. Komm zurück und lass mich wissen, wenn du das erledigt hast."
   princess_faction_soldier_assign_2 = "Ich bin froh über deine Rückehr. Bitte kämpfe gegen %INDEF_MONSTER%MONSTER. Berichte mir, wenn du damit Erfolg hattest und ich werde dich zum Soldat machen."
   princess_faction_soldier_success = "Es ist gut, dass wir auf dich als Verbündeten zählen können. Nimm dies als Symbol deiner Verpflichtung zum Kampf."
   princess_faction_soldier_failure = "Ja, dieser Krieg ist hässlich und furchtbar, und es ist keine Schande, dich von der grässlichen Ausgabe abzuwenden, die dir auferlegt wurde. Dennoch brauche ich Soldaten, die das königliche Recht auf den Thron auf dem Schlachtfeld verteidigen. Suche mich wieder auf, wenn du genug Nerven hast, unseren Gegner zu bekämpfen."

   rebel_faction_soldier_assign_1 = "Ich glaube an dich. Geh und erledige %INDEF_MONSTER%MONSTER nahe einem Flaggenmast, erstatte mir danach Bericht über deinen Kampf, dann reden wir über deine Zukunft als Soldat."
   rebel_faction_soldier_assign_2 = "Ja, ich habe Geschichten über deinen Kampf gehört. Nun geh besiege %INDEF_MONSTER%MONSTER, und du sollst dich uns als Gleicher anschließen wenn du das erledigt hast."
   rebel_faction_soldier_success = "Ich wusste, du bist ein geeigneter Soldat. Jetzt schließt du dich uns an im Kampf für Freiheit und gegen Tyrannei!"
   rebel_faction_soldier_failure = "Ich bin von dir enttäuscht. Ich habe mehr von einem loyalen Anhänger erwartet. Solltest du gewillt sein, gegen die Unterstützer der Tyrannei zu kämpfen: Du weisst, wo du mich findest."

   murder_trigger = "Mörder"
   murder_say = "%CARGO"
   murder_princess_assign = "Genau wie die übrigen Leute in meinem schönen Land bin ich neugierig, zu erfahren, wer den ehemaligen Herzog getötet hat. Obwohl er und ich oft Rivalen waren, hat es mich traurig gemacht, ihn so gewaltsam sterben zu sehen. Wenn Du willst, kannst Du meine Suche unterstützen, indem Du %NPC nach jeglicher Information über den Mörder fragt und mir die Antwort übermittelst."
   murder_princess_success = "Ich weiß nicht, ob wir den Gerüchten glauben können. Ich danke Dir für Deine Hilfe; je mehr wir nachforschen, desto näher werden wir der Wahrheit kommen. Bitte nimm dies als Zeichen meiner Wertschätzung."
   murder_jonas_assign = "Nachdem anscheinend nicht ausführlich nach dem Mörder des ehemaligen Herzogs gesucht wird, habe ich es selbst übernommen, den Mörder zu entlarven. Wer auch immer die Tat begangen hat, dürfte immer noch sehr stark sein und könnte wieder zuschlagen. Frag %NPC nach dem Mörder und teile mir jede nützliche Information mit."
   murder_jonas_success = "Hmm, vielleicht ist das die Information, nach der ich gesucht habe. Danke für Deine Hilfe bei dieser Sache. Nimm dies mit meinem Dank."
   murder_duke_assign = "Der Tod meines Onkels bedrückt mich sehr. Tag und Nacht kann ich an nichts anderes denken! Ich muss dafür sorgen, dass jemand für dieses grausame Verbrechen zahlt. Bitte hilf mir bei der Suche, indem Du %NPC nach Informationen über den Mörder fragst. Teile mir unbedingt mit, was %NPC zu sagen hat."
   murder_duke_success = "Ah, ein weiteres Mosaiksteinchen im komplizierten Fall des Todes meines Onkels. Nimm dies mit meinem Dank und meiner Wertschätzung, mein treuer Gefährte."
   murder_princess_w_1 = "Wenn Du mich fragst, sieht es aus, als ob die Prinzessin nur sehr wenige bewaffnete Truppen besitzt. Warum läßt sie mobil machen, wenn sie kein Versteck hat?"
   murder_princess_w_2 = "Ich habe ehrlich keine Ahnung. Der Herzog wurde durch eine Waffe und nicht durch einen Zauber getötet, oder?"
   murder_princess_w_3 = "Die Ermordung des Herzogs ist eine Tragödie. Ich denke, dass niemand frei von Verdacht ist, nicht einmal die schöne Prinzessin. Aber welche Art von Waffe würde sie benutzen?"
   murder_princess_w_4 = "Ich habe gehört, dass die Prinzessin sowohl in Waffenfertigkeit als auch in Magie ausgebildet wurde. Obwohl sie seit Jahren keines von beiden benutzt hat, habe ich gehört, dass sie immer noch ein Profi im Umgang mit dem Schwert ist."
   murder_princess_w_5 = "Oh, ich bezweifle, dass derjenige, der den Herzog getötet hat, die Tat alleine begangen hat. Ich bin sicher, dass jeder, auch die Prinzessin, eine zwielichtige Gestalt angeheuert haben könnte, um kaltblütig zu morden."
   murder_princess_m_1 = "Offensichtlich war der Tod des Herzogs durch Macht motiviert. Es gibt keinen Zweifel, dass irgendjemand mit Einfluß, wie die Prinzessin, ihn aus dem Weg schaffen wollte, um seine eigene Macht zu vergrößern."
   murder_princess_m_2 = "Was außer Geld könnte das Motiv sein? Durch die schockierenden Nachrichten vom Tod des Herzogs können die Leute an der Macht seinen Besitz angreifen und Geld erbeuten. Schau Dir die ganzen Truppen an, die durch das Land ziehen. Die sind nicht billig, weißt Du."
   murder_princess_m_3 = "Es ist bedauerlich, aber ich bin sicher, dass die treibende Kraft hinter dem traurigen Ende des Herzogs etwas mit Steuern zu tun hat. Möglicherweise hatte es jemand satt, die hohen Steuern zu zahlen, oder jemand anderes wollte das Steuergeld für sich selbst?"
   murder_princess_m_4 = "Die Leute sagen, dass die starke Abneigung des Herzogs gegen die arme Prinzessin in dieser dunklen Nacht eine Rolle gespielt hat. Ich bezweifle, dass dies der Fall ist. Obwohl einen solche Gefühle zu unüberlegten Aktionen treiben können, denke ich nicht, dass die junge Prinzessin ihn angegriffen hat."
   murder_princess_m_5 = "Ich fürchte, dass die Konkurrenz zwischen dem Herzog und der Prinzessin in dem Mordkomplott eine große Rolle spielt. Die Prinzessin könnte erkannt haben, dass es leichter sein würde, Unschuld vorzutäuschen, den richtigen Augenblick abzuwarten und dann, wenn der Moment günstig ist, zuzuschlagen."
   murder_princess_c_1 = "Nun, ich finde, es ist ein bißchen seltsam, dass der Rat von Meridian sich nachts regelmäßig getroffen hat in der Woche vor dem blutigen Tod des armen Herzogs."
   murder_princess_c_2 = "Nur ein Blinder würde nicht bemerken, dass die Prinzessin auffälligerweise abwesend war in der Nacht des Mordes. Können wir ihren Aussagen trauen?"
   murder_princess_c_3 = "Ich verdächtige jeden, der ein zu starkes Alibi hat. Wie bei der Prinzessin. Ist es nicht verdächtig, dass fast der ganze Rat schwört, zu dieser Zeit bei einem Treffen gewesen zu sein?"
   murder_princess_c_4 = "Ist es nicht seltsam, dass niemand etwas gehört oder gesehen haben will, obwohl der Herzog so brutal umgebracht wurde? Vielleicht war in dieser Nacht eine fremde Magie tätig."
   murder_princess_c_5 = "Ich denke, ich habe eine Priesterin sagen hören, dass in dieser Nacht merkwürdige magische Kräfte aktiv waren. Ich frage mich, ob die Prinzessin irgendetwas darüber weiß?"
   murder_jonas_w_1 = "Ich habe gehört, dass Jonas nie mehr sein Schwert in der Öffentlichkeit reinigt, wie er es ab und zu vor der Ermordung des Herzogs getan hat. Was will er verbergen?"
   murder_jonas_w_2 = "Nun, Jonas ist ein Meister verschiedener Waffen, wie er uns oft unter Beweis stellt. Ich bin sicher, dass er ein Meister der Waffe ist, die bei der Ermordung des Herzogs benutzt wurde."
   murder_jonas_w_3 = "Ich habe gehört, wie jemand zu einem meiner Freunde gesagt hat, dass Jonas keine echte Waffe handhaben kann, um sein Leben zu schützen, und dass alle seine Geschichten Lügen seien."
   murder_jonas_w_4 = "Ran'er Zen hat kürzlich gesagt, dass der Mord mit einem Löffel begangen wurde. Hat Jonas nicht erzählt, dass er sich mit einem Löffel verteidigt hat, als er einmal in einem Gasthof angegriffen wurde?"
   murder_jonas_w_5 = "Jemand hat mir erzählt, dass Hat er den Herzog mit seinem eigenen Schwert getötet?"
   murder_jonas_m_1 = "Hast Du die Gerüchte darüber gehört, dass Jonas davon spricht, dass der Adel das Volk unterdrückt? Ich finde das wichtig."
   murder_jonas_m_2 = "Ich habe irgendwo gehört, dass Jonas davon redet, dass er das Volk besser führen könnte als der Herzog. Vielleicht hat er gehofft, den Platz des Herzogs einzunehmen."
   murder_jonas_m_3 = "Hey, hat Jonas nicht sehr großzügig dem Tempel von Kranan der Faust gespendet?  Ich frage mich, ob sein Wohlstand in Gefahr ist."
   murder_jonas_m_4 = "Jonas hat irgendjemandem erzählt, dass er selbst eine Armee ausheben will. Das könnte teuer werden. Ich frage mich, woher er das Geld bekommen will."
   murder_jonas_m_5 = "Jemand hat erzählt, dass die Prinzessin und Jonas vor kurzem gute Freunde geworden sind. Vielleicht hat sie ihn angeheuert, um den Herzog zu töten? Er versucht immer, seine Kampfqualitäten unter Beweis zu stellen."
   murder_jonas_c_1 = "Ich finde es seltsam, dass man Jonas nie findet, wenn man ihn braucht. Er ist so ein aalglatter Typ, der sich schnell aus dem Staub machen kann."
   murder_jonas_c_2 = "Jonas erklärte, er sei im Kraanan-Tempel gewesen, als der Herzog brutal ermordet wurde, aber Priesterin Quertina sagt, dass sie sich nicht daran erinnert, ob er dort war oder nicht."
   murder_jonas_c_3 = "Ich dachte, ich hätte gehört, dass Jonas Roluk als Mörder beschuldigt wurde. Ist es nicht komisch, dass er versuchen sollte, Roluk Ärger einzuhandeln, vor allem, wenn man ihre gemeinsame Vergangenheit bedenkt?"
   murder_jonas_c_4 = "Ich habe gehört, dass Jonas die Prinzessin so eingeschüchtert hat, dass sie sich gegen den Herzog gewandt hat. Wenn man bedenkt, was er alles zu gewinnen hat, könnte das gut möglich sein."
   murder_jonas_c_5 = "Ich glaube, ich habe Jonas am Tempel von Kranaan gesehen, ungefähr zu der Zeit, als der Herzog ermordet wurde, aber ich bin mir nicht sicher."
   murder_miriana_w_1 = "Nun, Reisende erzählten mir, dass sie Miriana in den Wäldern gesehen haben, tanzend und mit einem Messer bewaffnet. Woher hatte sie eine Waffe?"
   murder_miriana_w_2 = "Irgendwer sagte, dass Miriande einmal eine Spinne in zwei Hälften zerteilte - mit irgend einem mächtigen Zauber. Die Wunde sah eher nach einer Waffenverletzung aus als nach einem typischen magischen Schaden, sagten sie."
   murder_miriana_w_3 = "Ich habe mit angehört, wie jemand erzählt hat, dass er Miriana durch den Wald habe rennen hören, irgendetwas von Faren schreiend und ihre Waffe zurückfordernd. Was könnte das bedeuten?"
   murder_miriana_w_4 = "Jemand hat gesagt, dass Miriana die wahre Macht des Zaubers, der \"Magisches Opfer\" genannt wird, kennt. Ich frage mich, was sie mit all dieser Macht tut?"
   murder_miriana_w_5 = "Ich habe mal gehört, dass die Waldschrate ihre Lichtblitze auf Miriana geschleudert haben und dass sie sie mit noch größerer Kraft wieder zurückgeworfen hat. Könnte sie diese Macht gegen den Herzog eingesetzt haben?"
   murder_miriana_m_1 = "Ich habe mit angehört, wie ein Wächter gesagt hat, dass er mit einer kleinen Gruppe von Wächtern in den Wald gezogen ist, um Miriana zu suchen. Als sie sie gefunden hatten, haben sie versucht, ihr eine Nachricht des Herzogs mitzuteilen, aber sie wurde zornig und ging weg. Hat sie den Herzog gehaßt?"
   murder_miriana_m_2 = "Ein Zauberer hat mir einmal erzählt, dass die Prinzessin heimlich Miriana unterstützt, weil sie weiß, wie man sich die Macht der Magie verschafft. Könnten sie gemeinsam den Komplott gegen den Herzog geschmiedet haben?"
   murder_miriana_m_3 = "Ich erinnere mich daran, wie der Herzog sich darüber lustig gemacht hat, dass Miriana Tiere als Freunde hat, weil das die einzigen sind, die sie ertragen können. Danach gab es einen lauten Donnerschlag außerhalb der Mauern des Schlosses. Kann an dieser Geschichte etwas Wahres sein?"
   murder_miriana_m_4 = "Die Leute sagen, dass Miriana seit Generationen einen Groll gegen die Familie des Herzogs hegt. Kann sie so alt sein?"
   murder_miriana_m_5 = "Vor einigen Jahren habe ich die Geschichte gehört, dass Miriana einmal den Herzog besucht und ihn vor irgendeiner Gefahr gewarnt hat. Nachdem das Ereignis, das sie vorhergesagt hatte, eingetreten war, klagte sie der Herzog des Mordversuchs an ihm an. Ich frage mich, ob sie jetzt zurückgekehrt ist, um den Job zu beenden?"
   murder_miriana_c_1 = "Einer meiner Freunde hat mir erzählt, dass Miriana eines Tages im Wald war und plötzlich ohne Grund schrie: 'Ich habe es getan, meine Gebieterin. Er ist tot.' ich frage mich, ob sie den Herzog gemeint hat?"
   murder_miriana_c_2 = "Ich weiß überhaupt nichts darüber, was in jener Nacht im Schloß des Herzogs passiert ist. Ich war im Wald beim Pilzesammeln, während ich Miriana aus dem Weg gegangen bin."
   murder_miriana_c_3 = "Ich habe in der Nacht, als der Herzog starb, im Wald in der Nähe von Tos eine seltsame Gestalt gesehen. Es war eine kleine Person, etwa so groß wie ein junges Mädchen."
   murder_miriana_c_4 = "Ich bin vor kurzem in den Wald gegangen, um Kräuter zu suchen, als ich einen Abenteurer mit Miriana sprechen hörte. Als er den Herzog erwähnt hat, wurde sie sehr böse und weigerte sich, ihm die Zaubersprüche zu lehren, die er wollte."
   murder_miriana_c_5 = "Ich habe die Leute behaupten hören, dass Miriana hinter der Ermordung des Herzogs steckt. Ich finde die Vorstellung, dass ein kleines Mädchen hinter einem solchen Mord steckt, lächerlich."
   murder_lich_c_1 = "Nun, ich habe gehört, dass einer der Wirte Bier an den herzöglichen Hof auslieferte, für das große Festmahl. Scheinbar hat sich eine neugierige Frau bei den Gespannen herumgetrieben, als sie die Fässer hineinschafften. Sie hatte einen ganz bleichen Teint und trug ein merkürdig aussehendes Amulett."
   murder_lich_c_2 = "Ich habe von einem Handelsreisenden erfahren, dass Blitze und seltsamer Lärm aus den Hügeln von Brax kamen, in der Nacht, als der Herzog starb."
   murder_lich_c_3 = "Manche Leute vermuten, dass die Königin von Lich den Herzog getötet haben könnte, aber wenn man darüber nachdenkt, hat der Herzog nicht viel getan, womit er der Königin in die Quere hätte kommen können. Wenn er eine Armee nach Brax geschickt hätte, wie es einige Leute wollten, wäre es eine andere Geschichte."
   murder_lich_c_4 = "Also ich weiß absolut nichts über diese Sache. Ich habe meine Mutter besucht; ihr geht es nicht besonders. Aber wenn ich es mir so überlege: Die Nekromanten haben sich auffallend ruhig verhalten die letzte Zeit, zu ruhig für meinen Geschmack."
   murder_lich_c_5 = "Gut, ich kann nicht sicher sein weißt Du, aber ich habe gehört, dass eine große Gruppe von Nekromanten gesehen wurde, die ungefähr eine Woche vor dem Mord durch die Berge nach Tos kam."
   murder_lich_w_1 = "Eigentlich sollte ich es dir nicht erzählen, aber ich habe einen Freund, bei der Herzogswache und der sagt, dass sie einer großen Enthüllung auf der Spur sind. Der Herzog gar nicht ermordet!  Sondern er hat sich selbst gerichtet bei dem Versuch, ein Amulett der Drei abzunehmen!"
   murder_lich_w_2 = "Ich weiß nichts von einer Waffe, aber die Festhalle war verschlossen - keine Chance, rein oder raus zu kommen. Also wer ihn umbrachte, konnte teleportieren. Und die einzigen Menschen, von denen ich weiß, dass sie so etwas können, sind die Nekromanten."
   murder_lich_w_3 = "Ich habe gehört, dass unmittelbar bevor sie die Leiche fanden, einige der Wachen des Herzogs von gehörnten Skeletten angegriffen wurden!"
   murder_lich_w_4 = "Ein Freundin von mir arbeitet für die Prinzessin, und sie ist überzeugt, dass der Herzog ein Nekromant geworden war."
   murder_lich_w_5 = "Ich habe gehört, dass einer der Wachen jemanden gesehen hat, der aussah wie der Herzog, und das Schloss verlassen hat, nach dem der Herzog tot war. Er wollte sich die Sache näher ansehen, aber die Person hat sich einfach in Luft aufgelöst. Übrig blieb nur eine schleimige Pfütze."
   murder_lich_m_1 = "Ich habe gehört, dass der Herzog beim Festmahl eine Großoffensive gegen Brax ankündigen wollte, um die dunkle Königin und die Nekromanten auszulöschen. Vielleicht ist sie ihm zuvorgekommen."
   murder_lich_m_2 = "Hmmm... es ist ja kein Geheimnis, dass sich die Nekromanten und ihre Königin von nichts auf der Welt davon abbringen lassen würden, uns zu schaden."
   murder_lich_m_3 = "Naja, eigentlich ging es dem alten Herzog gar nicht schlecht, bis Venya'cyr aufgetaucht ist. Also wenn du mich fragst, sie hatte ihre Finger im Spiel."
   murder_lich_m_4 = "Ein paar Leute behaupten, dass die Lich Königin den Herzog umgebracht hat, dabei weiß doch jeder, dass sie Brax seit Ewigkeiten nicht verlassen hat."
   murder_lich_m_5 = "Hat nicht Venya'cyr geschworen, beide, Herzog und Prinzessin zu töten?  Kateriina sollte aufpassen, sie könnte als nächste dran sein!"
   murder_akardius_c_1 = "Erzähl Herzog Arkadius bloß nichts davon, dass du es von mir hast, aber ich kann mir niemand sonst vorstellen, der Zugang zur Festhalle hatte, oder?"
   murder_akardius_c_2 = "Alles was ich weiß ist, dass der neue Herzog verdammt schnell reagiert hat, nach dem Tod seines Onkels. Fast so, als wäre alles gaplant gewesen ..."
   murder_akardius_c_3 = "Jeder der den Ausdruck auf dem Gesicht des armen Jungen gesehen hat, als er vor der Leiche seines Onkels stand, weiß, dass er es nicht gewesen sein kann."
   murder_akardius_c_4 = "Man sagt sich, dass der Herzog das Festmahl zu Ehren seines Neffen abhielt. Er wollte ihn zurück auf dem Festland willkommen heißen, und ihn zu seinem Erben einsetzen."
   murder_akardius_c_5 = "Dieser Herzog Arkadius hat irgend ein Geheimnis; hast du dich je gefragt, wo er sich all die Jahre  herumgetrieben hat? Auf der Insel, als Schüler im Riija Tempel, so schaut es aus! Und einem Anhänger des Gottes des Betrugs kann man nicht trauen."
   murder_akardius_w_1 = "Nachdem was ich weiß, wurde der Herzog weder mit einer Waffe noch mit Magie umgebracht, sondern mit Gift. Macht man das nicht so in adeligen Kreisen?"
   murder_akardius_w_2 = "Man sagt sich, dass sich Arkadius am Tag nach dem Mord am Herzog ein neues Schwert aus der Waffenkammer besorgt hat. Warum wollte er bloß sein Altes nicht mehr tragen..."
   murder_akardius_w_3 = "Ich habe gehört, dass Herzog Arkadius während seiner Abwesenheit Schüler am Riija Tempel war. Und bestimmt lernst du dort als Fortgeschrittener mehr als einfache Trugbilder. Ist nicht Riija der Gott der Tricks; manche Tricks können tödlich sein."
   murder_akardius_w_4 = "Ich weiß, dass kurz nach dem Mord am Herzog, alle Waffen der Wachen überprüft wurden. Und ich habe gehört, Herzog Arkadius bot sich freiwillig an, als Vorbild für seine Männer."
   murder_akardius_w_5 = "Man sagt sich, dass Herzog Arkadius ein vollendeter Schwertkämpfer war. Nicht dass viel dazu gehört hätte, seinen Onkel umzulegen. Naja, er war doch ein bißchen, ähm ... kräftig."
   murder_akardius_m_1 = "Der Volksmund sagt: Suche den, der den größten Nutzen hatte."
   murder_akardius_m_2 = "Ich habe gehört, dass Herzog Arkadius gar nicht auf die Insel gehen wollte, aber sein Onkel hat ihn einfach fortgeschickt, als er noch jung war. Vielleicht hat er ihn dafür gehasst."
   murder_akardius_m_3 = "Ich habe gehört, der Herzog soll Jonas wegen dessen militärischem Geschick gelobt und gesagt haben, er gebe einen guten Erben ab. Vielleicht wurde Arkadius ja eifersüchtig."
   murder_akardius_m_4 = "Madelia hat mir erzählt, dass sie mit Arkadius auf einem Picknick war, und er danach völlig aufgelöst wegrannte und rief \"Oh, wie konnte ich das Prinzessin Kateriina nur antun?\"  Waren sie vielleicht verliebt?  Der alte Herzog hätte das nie zugelassen!"
   murder_akardius_m_5 = "Jeder weiß doch, dass der Herzog Akardius sowieso zu seinem Erben einsetzen wollte. Warum also sollte er seinem Onkel, der ihm so viel Gutes getan hatte, etwas antun wollen."
   murder_maleval_c_1 = "Hmm... ich muss immer daran denken, dass Maleval freien Zutritt zu den Gemächern des Herzogs hatte. Keine Ahnung wie Kalior seine Nähe ertrug. Mich graust vor ihm ."
   murder_maleval_c_2 = "Eine der Wachen des Herzogs erzählte mir, dass Maleval immer in Zimmer auftaucht, die eigentlich verschlossen sein sollten. Vielleicht hat er einen eigenen Schlüsselbund."
   murder_maleval_c_3 = "Der Bruder der Frau meiner Kusine weiß sicher, dass Maleval  in der Nacht des Mordes am Qor Tempel war ... ähm ... also, nicht dass sie da je hingehen würde. Keiner in meiner Familie hängt Qor an. Niemand!"
   murder_maleval_c_4 = "Einer der Bediensteten des Herzogs erzählte mir, dass Kalior auf dem Festmahl Arkadius zu seinem neuen Berater ernennen wollte. Das konnte Maleval bestimmt nicht gefallen!"
   murder_maleval_c_5 = "Ein Freund von mir pflegt die Burggärten und während er die Hecken unter dem Fenster des Herzogs schnitt hörte er Maleval sagen, \"Vorsichtig Kalior. Du willst doch nicht meine Geduld prüfen.\"  Davor hatten sie eine Auseinandersetzung über ein geplante Offensive gegen Brax."
   murder_maleval_w_1 = "Wer weiß es schon? Aber wenn Magie mit im Spiel war, fällt mein erster Verdacht auf Maleval. Er wäre dazu fähig."
   murder_maleval_w_2 = "Die Tage hörte ich Ran er'Zen sagen, \"Eiskalt, eisgekühlt ... Hat sich Herzöglein gefühlt.\"  Könnte das bedeuten, Kalior wurde mit Eisigem Griff getötet?"
   murder_maleval_w_3 = "Ich kenn mich zwar nicht aus, aber ich kann mir schon vorstellen, dass man für so ein Vorhaben ziemlich mächtige Magie braucht."
   murder_maleval_w_4 = "Aus offiziöser Quelle habe ich vernommen, Kalior sei zu Tode geprügelt worden, aber ich hab das keine Sekunde geglaubt. Das war bestimmt Maleval und Schläge sind nicht seine Art."
   murder_maleval_w_5 = "Ein Freund sagt, der arme Kalior wurde erstickt, aber er konnte sich die Leiche nicht näher ansehen, weil er dauernd niesen musste."
   murder_maleval_m_1 = "Ich hatte schon immer das Gefühl, dass Maleval die graue Eminenz war. Vielleicht hat ihn seine Marionette gelangweilt."
   murder_maleval_m_2 = "Maleval scheint den jungen Arakdius wirklich zu mögen. Er wirkt so beschützend. Eigentlich nur verständlich, nachdem was Kalior zugestoßen ist."
   murder_maleval_m_3 = "Egal was manche sagen, ich glaube Maleval kommt nicht in Betracht. Er hatte Kalior eh in der Hand. Warum ihn also töten? Ein Riija-Schüler ist doch bestimmt schwerer zu kontrollieren!"
   murder_maleval_m_4 = "Es gibt Gerüchte über den finsteren Zauberer Maleval... Ich denke, die Leute haben nur Angst vor ihm, weil er so rätselhaft ist."
   murder_maleval_m_5 = "Angenommen, Maleval dachte, Kalior hätte nicht genug Respekt vor Magie. Vielleicht hat er ihm eine kleine Demonstration  vorgeführt."
   murder_roq_m_1 = "Gibt es da nicht einen professionellen Mörder, der in der Kanalisation von Barloque lebt?  Er scheint der perfekte Verdächtige zu sein. Ich bin überrascht, dass er noch nicht festgenommen worden ist!"
   murder_roq_m_2 = "Ich habe in Barloque Gerüchte gehört, dass Truppen in die Kanalisation geschickt werden sollen, um sie zu säubern, aber für mich hört sich das nach Hexenjagd an. Jeder weiß, dass sich Roq vor Jahren zur Ruhe gesetzt hat."
   murder_roq_m_3 = "Warum glaubst Du, dass Roq sich in der Kanalisation versteckt?  Ein Gerücht besagt, dass er vor Jahren Königin Katria getötet hat und sich immer noch versteckt hält. Meine Tante pflegt zu sagen, dass es Kalior selbst war, der ihn dazu angestiftet hat, vielleicht wurde also die Gerechtigkeit gewahrt."
   murder_roq_m_4 = "Es gab eine Zeit, da war Roq ein häufiger Gast aus Schloß Blackstone. Viele Leute haben sogar gedacht, dass er Kalior manipuliert. Ich frage mich, wie er sich gefühlt hat, als er nicht mehr Kaliors vertrauenswürdiger Berater war."
   murder_roq_m_5 = "Logisch gesprochen scheint der einfachste Weg jemanden zu beseitigen, der einen Meuchelmörder anzuheuern, zu sein. Das ist ja nicht Deine Schuld. Aber ich habe nie einen Mord geplant, also woher soll ich sowas wissen?"
   murder_roq_w_1 = "Ich habe gehört, dass der Herzog scheinbar durch einen Stich mit einem kleinen Messer zwischen die Schulterblätter getötet wurde."
   murder_roq_w_2 = "Von dem was ich gehört habe, war die eigentliche Wunde des Herzogs gar nicht so schlimm. Aber sie hat sich in sekundenschnelle entzündet und ihn in Minuten aufgefressen. Kam die Wunde von irgendeiner magisch verfluchten Waffe?"
   murder_roq_w_3 = "Einer der Wachen des Herzogs sagte, dass Kalior und Akardius ein Meuchelmörderspiel vor dem Festessen planten. Was, wenn jemand den schwarzen Dolch von Akardius vertauschte?"
   murder_roq_w_4 = "Jemand erzählt mir, dass er Roq am Tag nach dem Mord am Herzog mit nur einem Messer gesehen hat. Hat er nicht normalerweise zwei?"
   murder_roq_w_5 = "Ein Freund erzählt, dass der Herzog genau vier Mal geschrien hat. Heißt das, dass mehrfach auf ihn eingestochen wurde? "
   murder_roq_c_1 = "Ich hörte irgendwen erzählen, dass er kürzlich Roq gesehen hat, als er ein paar neue Waffen gekauft hat. Ich frage mich, wo er das Geld her hat?"
   murder_roq_c_2 = "Ich habe gehört, wie Leute erzählten, dass Roq den Herzog umgebracht haben soll, weil er eben ein Meuchelmörder ist. Ich denke das ist Unsinn. Und überhaupt, Roq kann es gar nicht gemacht haben, weil ich ein Messer von ihm gekauft habe während der Zeit des Mordes. Wobei, ein Freund erzählte mir, er kaufte eines. Ein kleines."
   murder_roq_c_3 = "Ein Freund sagt, dass er eine schattenhafte Figur durch die verschlungenen Pfade hat laufen sehen in der Nacht des Mordes. Er rief einen lauten Gruß, als es ihm mit rot glühenden Augen ansah und dann verschwand."
   murder_roq_c_4 = "Jemand erzählte mir, dass er Roq eine beträchtliche Summe in Oberts Obhut gab - erst kurz nach dem Mord. Es war in Kleidung eingewickelt, war aber sehr schwer und machte klimpernde Geräusche."
            % (Obert, when asked, will say that he must honor the privacy of his customers - but later in
            %  the mystery, players will be given a search warrant and will be able to retrieve the
            %  deposit.)
   murder_roq_c_5 = "Einer der Wächter des Herzogs erzählte mir, dass Roq Burg Schwarzstein an jenem Abend einen frühen Besuch abstattete. Maleval traf ihn auf den Stufen und nach ein paar harschen Worten, endete die Konversation damit, dass der dunkle Zauberer in die Nacht davonstürmte."
            % (any of the guards questioned will refuse to speak about that night)
   murder_random_w_1 = "Ach was! Die ganze Geschichte ist merkwürdig. Die Wahrheit ist, dass der Herzog es nicht erwarten konnte, das Fest zu eröffnen und Akardius zu feige ist zuzugeben, dass sich sein Onkel zu Tode gefressen hat."
   murder_random_c_1 = "Ich habe gehört, dass Akardius den Körper des Herzogs zu einem Heiler getragen hat - und das obwohl er schon tot war. Ich denke er war wie verrückt um ihn zu retten."
   murder_random_m_1 = "Nun, es gibt haufenweise Gerüchte über Maleval oder die Prinzessin oder das was Du sagtest. Einige Narren verdächtigen möglicherweise mich. Aber es würde mich nicht überraschen, wenn der Herzog eine heimliche Liebschaft gehabt hätte. Es sieht für mich wie eine Eifersuchtstat aus."

   questEngine_report_sender = "Das Rätsel"
   questEngine_report_1 = "Betreff: Status der Quest %q\nQuest %q hat %q aktive Instanzen.\n%q sind niemandem zugewiesen.\n%q sind bereits an %q vergeben worden."
   questEngine_report_2 = ",\n"

classvars:

properties:

	piQuestTimerDelay = 5 * 60 * 1000    %	used to check if deadlines met and schedule new quests
	piQuestDeadlineTimerDelay = 60 * 1000     %  goes off once a minute
	piQuestHistoryRecentTime = 4 * 3600       %  4 hrs - defines what 'recently' means in history restrictions

	piDebug = FALSE
	piActive = TRUE                           % set to FALSE to suspend scheduling of new quests
	ptQuestTimer = $
	ptQuestDeadlineTimer = $
	plChessPiecesCaptured = $
	plChessPieces = $
	plChessPiecesFiles = $
	plChessPiecesRanks = $

	piDefaultNumPlayers = 1
	piDefaultQuestType = Q_TYPE_COMPETITIVE		% not used for single-player quests
	piDefaultPlayerRestrict = Q_PLAYER_NOTTRIED_RECENTLY	% not tried this quest for 24 hrs. of logged in time
	plDefaultQuestNodes = $	
	piDefaultMaxNumberActive = 1				% allow only 1 active at a time
	piDefaultRescheduleChance = 50				% 50/50 chance of scheduling a new quest each time timer fires
	plDefaultPlayerRestrict2 = $

	% QuestTemplate is
	%	[	number of players,
	%		type of quest,
	%		eligible player restrictions,
	%		quest nodes,
	%		max number active,
	%		currently active quests,
	%		percent chance of scheduling (on timer firing)
	%     special restrictions]

	plQuestTemplates = $

	plDefaultNPCList = $
	piDefaultNPCModifier = $	
	piDefaultQuestNodeType = $
	plDefaultCargoList = $
	plDefaultMonsterList = $		
	plDefaultPrizeList = $
	plDefaultPenaltyList = $
	piDefaultTimeLimit	= 600	% ten minutes

	% QuestNodeTemplate is
	%	[	NPC list,
	%		NPC modifier,
	%		questnode type,
	%		cargo list,
	%		monster list,
	%		prizelist,
	%		penaltylist,
	%		assign hint,
	%		success hint,
	%		failure hint,
	%		time limit	]

	plQuestNodeTemplates = $
	plQuestNodesAwaitingMonsterDeath = $
	
   piCensusTallyDeleted = 0
   piCensusTallyActive = 0
   piCensusTallyActiveOrphaned = 0
   piCensusTallyActiveDuplicate = 0

messages:

Constructor()
{
   send( self, @Recreate );
   return;
}

Delete()
{
   if( ptQuestTimer <> $ )
   {
      DeleteTimer( ptQuestTimer );
      ptQuestTimer = $;
   }
   if( ptQuestDeadlineTimer <> $ )
   {
      DeleteTimer( ptQuestDeadlineTimer );
      ptQuestDeadlineTimer = $;
   }
   
   propagate;
}

% does not start timer
% after this call, call RecreateQuestNodes to create questnodes and start timer
Recreate()
{
   local i;
   
   if( ptQuestTimer <> $ )
   {
      DeleteTimer( ptQuestTimer );
      ptQuestTimer = $;
   }
   if( ptQuestDeadlineTimer <> $ )
   {
      DeleteTimer( ptQuestDeadlineTimer );
      ptQuestDeadlineTimer = $;
   }
   
   plChessPiecesCaptured = [ pawn1, pawn2, pawn3, pawn4, pawn5, pawn6, pawn7, pawn8, rook1, rook2, knight1, knight2, bishop1, bishop2, queen ];
   plChessPieces = [ pawn, rook, knight, bishop, queen, king ];
   plChessPiecesFiles = [ rook1, rook2, knight1, knight2, bishop1, bishop2, queen, king ];
   plChessPiecesRanks = [ two, three, four, five, six, seven ];
	
   piDefaultNumPlayers = 1;
   piDefaultQuestType = Q_TYPE_COMPETITIVE;	% not used for single-player quests
   piDefaultPlayerRestrict = Q_PLAYER_NOTTRIED_RECENTLY;	 % not tried this quest for 24 hrs. of logged in time
   plDefaultQuestNodes = [ 1 ];			% only one node, the first
   piDefaultMaxNumberActive = 5;		% for testing, have 5 active at a time
   piDefaultRescheduleChance = 50;		% 50/50 chance of scheduling a new quest each time timer fires
	plDefaultPlayerRestrict2 = $;

   plDefaultNPCList = $;
   piDefaultNPCModifier = QN_NPCMOD_NONE;
   piDefaultQuestNodeType = QN_TYPE_SHOWUP;
   plDefaultCargoList = [];
   plDefaultMonsterList = [];
   plDefaultPrizeList = [];	
   plDefaultPenaltyList = [];

	% QuestTemplate is
	%	[	number of players,
	%		type of quest,
	%		eligible player restrictions,
	%		quest nodes,
	%		max number active,
	%		currently active quests,
	%		percent chance of scheduling (on timer firing)
	%     special restrictions]
%% Permanent quests, index is determined by constants from old quest setup
   % QST_ID_SHALILLE_DISCIPLE
   plQuestTemplates =	[  [  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 12, 13, 14 ],\
			      30,\
			      [],\
			      100 ] ];
   % QST_ID_KRAANAN_DISCIPLE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 10, 11 ],\
			      30,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_FAREN_DISCIPLE
   plQuestTemplates = cons([  piDefaultNumPlayers,\   
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 15, 16, 17 ],\
			      30,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_QOR_DISCIPLE
   plQuestTemplates = cons([  piDefaultNumPlayers,\   
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 42, 43, 44 ],\
			      30,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_SCIMITAR_PROF
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 45, 46, 47, 48 ],\
			      30,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_DEMENTIA_SPELL
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 92, 93, 94 ],\
			      20,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_FADE_SPELL
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 88, 89, 90, 91 ],\
			      20,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_PRINCESS_SERVICE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_FACTION_PRINCESS | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 8, 9 ],\
			      1,\
			      [],\
			      0 ], plQuestTemplates );
   % QST_ID_DUKE_SERVICE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_FACTION_DUKE | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 5, 6, 7 ],\
			      1,\
			      [],\
			      0 ], plQuestTemplates );
   % QST_ID_PRINCESS_JOIN
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_INTRIGUING | Q_PLAYER_FACTION_NEUTRAL | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 3, 4 ],\
			      30,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_DUKE_JOIN
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_INTRIGUING | Q_PLAYER_FACTION_NEUTRAL | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 1, 2 ],\
			      30,\
			      [],\
			      100 ], plQuestTemplates );
   % QST_ID_GUILDSHIELD
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      0,\
			      [ 18, 19 ],\
			      30,\
			      [],\
			      100,\
			      [ [ Q_R2_QN_ASSIGNABLE, FALSE ], [ Q_R2_IS_GUILD_MEMBER_OF, $ ] ]
			                                    ], plQuestTemplates );
   % QST_ID_GUILDSHIELD_INTRO
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_GUILDMASTER,\
			      [ 20 ],\
			      15,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_LUTE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE,\
			      [ 21, 22, 23, 24 ],\
			      20,\
			      [],\
			      4,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_TRUTH_SPELL_ENDBRANCH
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      0,\
			      [ 30 ],\
			      20,\
			      [],\
			      0,
			      [ [ Q_R2_QN_ASSIGNABLE, FALSE ], [ Q_R2_IS_PLAYER, $ ] ]
			                                    ], plQuestTemplates );
	% QST_ID_TRUTH_SPELL
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 25, 26, 27, 28 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_BONE_PRIESTESS
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 31, 32 ],\
			      20,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_MAD_SCIENTIST
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 33, 34 ],\
			      20,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_TRADING_POST_GOOD
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_GOOD,\
			      [ 35, 36 ],\
			      20,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_TRADING_POST_EVIL
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_EVIL,\
			      [ 35, 37 ],\
			      20,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_BOW_MAKER_GOOD
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_GOOD,\
			      [ 38, 39, 40 ],\
			      20,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_BOW_MAKER_EVIL
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_EVIL,\
			      [ 38, 41 ],\
			      20,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_CHICKEN_SOUP
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 49, 50, 51 ],\
			      40,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_STUNTED_DWARF
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED,\
			      [ 52, 53, 54, 55, 56, 57, 58 ],\
			      20,\
			      [],\
			      2,
			      [ [ Q_R2_HAS_SKILL, SKID_BRAWLING, 50 ], [ Q_R2_HAS_SKILL, SKID_PROFICIENCY_SCIMITAR, 25 ] ]
			                                    ], plQuestTemplates );
	% QST_ID_HYPOCHONDRIAC
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 59, 60, 61, 62 ],\
			      5,\
			      [],\
			      10,
			      [ ]
			                                    ], plQuestTemplates );
	% QST_ID_QOR_OFFERING
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_EVIL | Q_PLAYER_NOTNEWBIE,\
			      [ 63, 64, 65, 66, 66, 66, 67 ],\
			      1,\
			      [],\
			      10,
			      [ [ Q_R2_HAS_SPELL_SCHOOL, SS_QOR, 15 ] ]
			                                    ], plQuestTemplates );
	% QST_ID_SHALILLE_OFFERING
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_GOOD | Q_PLAYER_NOTNEWBIE,\
			      [ 68, 69, 70, 71, 71, 71, 72 ],\
			      1,\
			      [],\
			      10,
			      [ [ Q_R2_HAS_SPELL_SCHOOL, SS_SHALILLE, 15 ] ]
			                                    ], plQuestTemplates );
	% QST_ID_FAREN_OFFERING
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_KARMA_NEUTRAL | Q_PLAYER_NOTNEWBIE,\
			      [ 73, 74, 75, 76, 76, 76, 77 ],\
			      1,\
			      [],\
			      10,
			      [ [ Q_R2_HAS_SPELL_SCHOOL, SS_FAREN, 15 ] ]
			                                    ], plQuestTemplates );
	% QST_ID_KRAANAN_OFFERING
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE,\
			      [ 78, 79, 80, 81, 81, 81, 82 ],\
			      1,\
			      [],\
			      10,
			      [ [ Q_R2_HAS_SPELL_SCHOOL, SS_KRAANAN, 15 ] ]
			                                    ], plQuestTemplates );
	% QST_ID_RIIJA_OFFERING
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE,\
			      [ 83, 84, 85, 86, 86, 86, 87 ],\
			      1,\
			      [],\
			      10,
			      [ [ Q_R2_HAS_SPELL_SCHOOL, SS_RIIJA, 8 ] ]
			                                    ], plQuestTemplates );
	% QST_ID_SPOREBURST_LEARN
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY,\
			      [ 95, 96, 97 ],\
			      10,\
			      [],\
			      4,
			      [ [ Q_R2_HAS_SPELL, SID_HOLD, 75 ] ]
			                                    ], plQuestTemplates );
   % QST_ID_POLISH_SERAPHYM
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE,\
			      [ 98, 99 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_PRIESTESS_INSIGNIA
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 100, 101, 102 ],\
			      80,\
			      [],\
			      100,
			      [ [ Q_R2_HAS_ITEM, &GuildShield ] ]
			                                    ], plQuestTemplates );
   % QST_ID_MONK_INSIGNIA
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 103, 104, 105 ],\
			      20,\
			      [],\
			      100,
			      [ [ Q_R2_HAS_ITEM, &GuildShield ] ]
			                                    ], plQuestTemplates );
   % QST_ID_FACTION_INSIGNIA
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_SAME,\
			      [ 106, 107, 108, 109 ],\
			      40,\
			      [],\
			      100,
			      [ [ Q_R2_HAS_ITEM, &GuildShield ] ]
			                                    ], plQuestTemplates );
   % QST_ID_MYSTERY_MONSTER
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 110, 111, 112, 113 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MOXAL_SCAM_1
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 114, 115, 116, 117, 117, 118 ],\
			      30,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MOXAL_SCAM_2
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 119, 120, 121, 122, 123 ],\
			      30,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_COUNCIL_LETTER
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 124, 125 ],\
			      40,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_CHESS
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 126, 127, 128, 129 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_CHESS_CHECKMATE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 130, 131, 132, 133, 134 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_LOVE_LETTER_1
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 135, 136 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_LOVE_LETTER_2
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 137, 138 ],\
			      20,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_ESTABLISH_NECROGUILD
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE,\
			      [ 139, 140, 141 ],\
			      1,\
			      [],\
			      100,
			      [ [ Q_R2_USING_ITEM, &NecromancerAmulet ], [ Q_R2_NUM_AMULETS, 5 ] ]
			                                    ], plQuestTemplates );
   % QST_ID_APHRODESIAC
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 142, 143, 144, 145 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_NECRO_WARNING
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE | Q_PLAYER_KARMA_EVIL,\
			      [ 146, 147, 148 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_BAR_RESTOCK
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 149, 150, 151 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_PARTY
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 152, 153, 154 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_ORE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 155, 156 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_APOTHECARY
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 157, 158 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_VAULT_TAX
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 159, 160 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_MERCHANT_TAX
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 161, 162 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_LATE_TAX
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 163, 164 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_KOC_WEAPON_TRADE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 165, 166, 167 ],\
			      20,\
			      [],\
			      50,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_KOC_ALE_TRADE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_LAWFUL | Q_PLAYER_NOTNEWBIE,\
			      [ 168, 169, 170 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_NECRO_WARNING_2
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE | Q_PLAYER_KARMA_GOOD,\
			      [ 171, 172, 173 ],\
			      20,\
			      [],\
			      100,
			      [  ]
			                                    ], plQuestTemplates );
   % QST_ID_WARLETTER
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NOTNEWBIE,\
			      [ 174, 175 ],\
			      40,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_POTION_ID
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 176, 177, 178 ],\
			      40,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_WAND_ID
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_NEWBIE,\
			      [ 179, 180, 181 ],\
			      40,\
			      [],\
			      100,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_PRINCESS_1
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_PRINCESS,\
			      [ 182, 183, 184 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_PRINCESS_2
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_PRINCESS,\
			      [ 182, 183, 185 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_PRINCESS_3
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_PRINCESS,\
			      [ 182, 183, 186 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_DUKE_1
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_DUKE,\
			      [ 187, 188, 189 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_DUKE_2
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_DUKE,\
			      [ 187, 188, 190 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_DUKE_3
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_DUKE,\
			      [ 187, 188, 191 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_JONAS_1
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 192, 193, 194 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_JONAS_2
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 192, 193, 195 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_MURDER_JONAS_3
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 192, 193, 196 ],\
			      30,\
			      [],\
			      0,
			      [ ]
			                                    ], plQuestTemplates );
   % QST_ID_REBEL_SERVICE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_FACTION_REBEL | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 197, 198 ],\
			      1,\
			      [],\
			      0,
			      [ ]                           ], plQuestTemplates );
   % QST_ID_REBEL_JOIN
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_INTRIGUING | Q_PLAYER_FACTION_NEUTRAL | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 199, 200 ],\
			      30,\
			      [],\
			      100,
			      [ ]                           ], plQuestTemplates );
   % QST_ID_JALA_NECKLACE
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 201, 202, 203, 204, 205, 206, 207 ],\
			      5,\
			      [],\
			      100,                 % TODO: Increase the spell school number below when we add new Jala spells
			      [[ Q_R2_HAS_SPELL_SCHOOL, SS_JALA, 11 ], [ Q_R2_DOES_NOT_HAVE_ITEM, &JalaNecklace ]]
			                                    ], plQuestTemplates );
   % QST_ID_DUKE_SOLDIER
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_FACTION_DUKE | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 208, 209, 210 ],\
			      30,\
			      [],\
			      100,
			      [[ Q_R2_HAS_HEALTH_LEVEL, 75 ], [ Q_R2_DOES_NOT_HAVE_ITEM, &DukeShield ]]
			                                    ], plQuestTemplates );
   % QST_ID_PRINCESS_SOLDIER
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_FACTION_PRINCESS | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 211, 212, 213 ],\
			      30,\
			      [],\
			      100,
			      [[ Q_R2_HAS_HEALTH_LEVEL, 75 ], [ Q_R2_DOES_NOT_HAVE_ITEM, &PrincessShield ]]
			                                    ], plQuestTemplates );
   % QST_ID_REBEL_SOLDIER
   plQuestTemplates = cons([  piDefaultNumPlayers,\
			      piDefaultQuestType,\
			      Q_PLAYER_FACTION_REBEL | Q_PLAYER_NOTTRIED_RECENTLY,\
			      [ 214, 215, 216 ],\
			      30,\
			      [],\
			      100,
			      [[ Q_R2_HAS_HEALTH_LEVEL, 75 ], [ Q_R2_DOES_NOT_HAVE_ITEM, &RebelShield ]]
			                                    ], plQuestTemplates );


   % now we fix up the faction service quests, since they need to have as many scheduled as members
   for i in Send(Send(SYS,@GetParliament),@GetFactionList) {
      if nth(i,1) = FACTION_PRINCESS {
         send(self,@SetQuestMaxActive,#index = QST_ID_PRINCESS_SERVICE, #new_max = (1+length(nth(i,2))) );
      }
      if nth(i,1) = FACTION_DUKE {
         send(self,@SetQuestMaxActive,#index = QST_ID_DUKE_SERVICE, #new_max = (1+length(nth(i,2))) );
      }
      if nth(i,1) = FACTION_REBEL {
         send(self,@SetQuestMaxActive,#index = QST_ID_REBEL_SERVICE, #new_max = (1+length(nth(i,2))) );
      }
   }
	
   return;
}

% recreate quest nodes and start timer
RecreateQuestNodes()
{
   local i, iMax, bOK, lNPCs, oNPC, lCargo, lCargo2;

   plDefaultNPCList = [ send( send( SYS, @GetLibrary ), @SelectQuester ),\
			send( send( SYS, @GetLibrary ), @SelectQuester ),\
			send( send( SYS, @GetLibrary ), @SelectQuester ),\
			send( send( SYS, @GetLibrary ), @SelectQuester ),\
			send( send( SYS, @GetLibrary ), @SelectQuester ) ];   % use old quest engine to select a random NPC

   piDefaultNPCModifier = QN_NPCMOD_NONE;
   piDefaultQuestNodeType = QN_TYPE_SHOWUP;										% show your face
   plDefaultCargoList = [ default_message ];										% list of messages
   plDefaultMonsterList = [ &SpiderBaby, &Centipede, &Ant, &FungusBeast, &Scorpion,\
			    &Slime, &Spider, &Troll, &Orc ];	% list of monster classes
   plDefaultPrizeList = [[[ QN_PRIZETYPE_ITEMCLASS, &Money, 10 ],\ 
			[ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ],\
			[ QN_PRIZETYPE_ITEMCLASS, &Emerald, 5 ],\
			[ QN_PRIZETYPE_ITEMCLASS, &Ruby, 5 ],\
			[ QN_PRIZETYPE_ITEMCLASS, &Diamond, 5 ],\
			[ QN_PRIZETYPE_ITEMCLASS, &Sapphire, 5 ],\
			[ QN_PRIZETYPE_ITEMCLASS, &EntrootBerry, 5 ],\
			[ QN_PRIZETYPE_ITEMCLASS, &OrcTooth, 5 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, 10, 1 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT, 10, 1 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AIM, 10, 1 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_STAMINA, 10, 1 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY, 10, 1 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM, 10, 1 ],\
			[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_STRENGTH, 10, 1 ]%,\
			%[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_HITPOINTS, 10, 1 ],\
			%[ QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MANA, 10, 1 ]
			] ];	
   plDefaultPenaltyList = [];	% none

   % QuestNodeTemplate is
   %	[	NPC list,
   %		NPC modifier,
   %		questnode type,
   %		cargo list,
   %		monster list,
   %		prizelist,
   %		penaltylist,
   %		assign hint,
   %		success hint,
   %		failure hint
   %		time limit	]

  % Will recreate questnodetemplates, including creating strings to hold the hints

   % template #1 is 1st Duke Join node, say "join" to Duke
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ duke_join1_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 1,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
                     #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &DukeLiege ) );
   }
   else
   {
      debug( "Error building QN #1" );
   }

   % template # 2 is 2nd Duke Join node, bring an item to me
   if send( self, @AddQuestNodeTemplate,\
	    #NPC_modifier = QN_NPCMOD_SAME,\
	    #questnode_type = QN_TYPE_ITEMFINDCLASS,\
	    #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Sapphire, 1 ],\
			   [ QN_PRIZETYPE_ITEMCLASS, &Ruby, 1 ],\
			   [ QN_PRIZETYPE_ITEMCLASS, &Emerald, 1 ],\
			   [ QN_PRIZETYPE_ITEMCLASS, &Diamond, 1 ] ],\
	    #prizelist = [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_DUKE ] ],
	    #timelimit = 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 2, #new_hint = duke_join2_assign);
      send( self, @SetQuestNodeSuccessHint, #index = 2, #new_hint = duke_join2_success );
      send( self, @SetQuestNodeFailureHint, #index = 2, #new_hint = duke_join2_failure );
   }
   else
   {
      debug( "Error building QN #2" );
   }
   
   % template #3 is 1st Princess Join node, say "join" to Princess
   if send( self, @AddQuestNodeTemplate,\
	    #questnode_type = QN_TYPE_MESSAGE,\
	    #cargolist = [ duke_join1_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 3,
	    #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
				  #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &PrincessLiege ) );
   }
   else
   {
      debug( "Error building QN #3" );
   }

   % template #4 is 2nd princess join node, deliver letter for her (placeholder)
   if send( self, @AddQuestNodeTemplate,
	    #questnode_type = QN_TYPE_ITEM,
    	    #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Letter, 1 ] ],
	    #prizelist = [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_PRINCESS ] ],
	    #timelimit = 3600 )    % an hour
   {
      lNPCs = $;
      % Xiana
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess ) ), lNPCs );
      % Alzahakar
      %lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor ) ), lNPCs );
      % Lady Aftyn
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) ), lNPCs );
      % Herbutte
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) ), lNPCs );
      % Esseldi
      %lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor ) ), lNPCs );
      send( self, @SetQuestNodeNPCList, #index = 4, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 4, #new_hint = princess_join2_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 4, #new_hint = princess_standard2_success );
      send( self, @SetQuestNodeFailureHint, #index = 4, #new_hint = princess_standard2_failure );
   }
   else
   {
      debug( "Error building QN #4" );
   }

   % template #5 is 1st Duke Standard node, say "loyalty" to Duke
   if send( self, @AddQuestNodeTemplate,\
	    #questnode_type = QN_TYPE_MESSAGE,\
	    #cargolist = [ duke_standard1_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 5,
	    #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
				  #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &DukeLiege ) );
   }
   else
   {
      debug( "Error building QN #5" );
   }

   % template #6 is 2nd Duke Standard node, say "tax" to an NPC
   if send( self, @AddQuestNodeTemplate,
	    #questnode_type = QN_TYPE_MESSAGE,
    	    #cargolist = [ duke_standard2_trigger ],
	    #timelimit = 1800 )    % half an hour
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosTown )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothTown )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperTown )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_BARD,
		           #cNPC_class = &Minstrel )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      send( self, @SetQuestNodeNPCList, #index = 6, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 6, #new_hint = duke_standard2_assign );
      send( self, @SetQuestNodeFailureHint, #index = 6, #new_hint = duke_standard2_failure );
   }
   else
   {
      debug( "Error building QN #6" );
   }

   % template #7 is 3rd Duke Standard node, bring tax $$ back to Duke
   if send( self, @AddQuestNodeTemplate,
            #questnode_type = QN_TYPE_ITEMCLASS,
                #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Money, 2 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Money, 3 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Money, 4 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Money, 5 ] ],
            #prizelist = [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_UPDATE ],
                          [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_DUKE_SERVICE ] ],
            #penaltylist = [ [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_NEUTRAL ] ] ],
            #timelimit = 1800 )    % half an hour
   {
      send( self, @SetQuestNodeNPCList, #index = 7,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
			          #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &DukeLiege ) );
      send( self, @SetQuestNodeAssignHint, #index = 7, #new_hint = duke_standard3_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 7, #new_hint = duke_standard3_success );
      send( self, @SetQuestNodeFailureHint, #index = 7, #new_hint = duke_standard3_failure );
   }
   else
   {
      debug( "Error building QN #7" );
   }

   % template #8 is 1st Princess Standard node, say "loyalty" to Princess
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ duke_standard1_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 8,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
			          #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &PrincessLiege ) );
   }
   else
   {
      debug( "Error building QN #8" );
   }

   % template #9 is 2nd princess Standard node, deliver letter for her
   if send( self, @AddQuestNodeTemplate,
            #questnode_type = QN_TYPE_ITEM,
                #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Letter, 1 ] ],
            #prizelist = [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_UPDATE ],
                          [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_PRINCESS_SERVICE ] ],
            #penaltylist = [ [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_NEUTRAL ] ] ],
            #timelimit = 3600 )    % an hour
   {
      lNPCs = $;
      % Xiana
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess ) ), lNPCs );
      % Alzahakar
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor ) ), lNPCs );
      % Lady Aftyn
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) ), lNPCs );
      % Herbutte
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) ), lNPCs );
      % Esseldi
      lNPCs = cons( first( send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor ) ), lNPCs );
      send( self, @SetQuestNodeNPCList, #index = 9, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 9, #new_hint = princess_standard2_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 9, #new_hint = princess_standard2_success );
      send( self, @SetQuestNodeFailureHint, #index = 9, #new_hint = princess_standard2_failure );
   }
   else
   {
      debug( "Error building QN #9" );
   }

   % template #10 is kraanan disciple quest kickoff, "favor"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ disciple_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 10,
       #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KraananPriestess ) );
   }
   else
   {
      debug( "Error building QN #10" );
   }
   % template #11 is kraanan disciple quest, kill monster
   if send( self, @AddQuestNodeTemplate,#questnode_type = QN_TYPE_MONSTER,#NPC_modifier = QN_NPCMOD_SAME,
         #monsterlist = [ &FungusBeast, &RedAnt, &Skeleton ],
         #timelimit = 2 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 11, #new_hint = kraanandisciple_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 11, #new_hint = kraanandisciple_success );
      send( self, @SetQuestNodeFailureHint, #index = 11, #new_hint = kraanandisciple_failure );
   }
   else
   {
      debug( "Error building QN #11" );
   }
   
   % template #12 is shal'ille disciple quest kickoff, "favor"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ disciple_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 12,
         #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess ) );
   }
   else
   {
      debug( "Error building QN #12" );
   }
   % template #13 is shal'ille disciple quest, deliver message
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ shalilledisciple_trigger ], #timelimit = 3 * 3600 )
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &QorPriestess )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FarenPriestess )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 13, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 13, #new_hint = shalilledisciple_assign );
      send( self, @SetQuestNodeFailureHint, #index = 13, #new_hint = shalilledisciple_failure );
   }
   else
   {
      debug( "Error building QN #13" );
   }
   % template #14 is shal'ille disciple quest, come back
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 14, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeSuccessHint, #index = 14, #new_hint = shalilledisciple_success );
      send( self, @SetQuestNodeFailureHint, #index = 14, #new_hint = shalilledisciple_failure );
   }
   else
   {
      debug( "Error building QN #14" );
   }
   % template #15 is faren disciple quest kickoff, "favor"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ disciple_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 15,
         #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FarenPriestess ) );
   }
   else
   {
      debug( "Error building QN #15" );
   }
   % template #16 is faren disciple quest, deliver message
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ farendisciple_trigger ], #timelimit = 3 * 3600 )
   {
      lNPCs = send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_BARTENDER, #onIsland = FALSE );
      send( self, @SetQuestNodeNPCList, #index = 16, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 16, #new_hint = farendisciple_assign );
      send( self, @SetQuestNodeFailureHint, #index = 16, #new_hint = farendisciple_failure );
   }
   else
   {
      debug( "Error building QN #16" );
   }
   % template #17 is faren disciple quest, come back
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 17, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeSuccessHint, #index = 17, #new_hint = farendisciple_success );
      send( self, @SetQuestNodeFailureHint, #index = 17, #new_hint = farendisciple_failure );
   }
   else
   {
      debug( "Error building QN #14" );
   }
   % template #18 is guild shield quest kickoff, "mining expedition"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ guildshield_initial_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 18,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_BLACKSMITH, #onIsland = FALSE ) );
      send( self, @SetQuestNodeSuccessHint, #index = 18,
            #new_hint = guildshield_assign );
   }
   else
   {
      debug( "Error building QN #18" );
   }
   % template #19 is guild shield quest finale, return ore to same blacksmith
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &OreChunk, 1 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &GuildShield, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 19, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeSuccessHint, #index = 19, #new_hint = guildshield_success );
      send( self, @SetQuestNodeFailureHint, #index = 19, #new_hint = guildshield_failure );
      send( self, @SetQuestNodeTimeLimit, #index = 19, #new_limit = 2* 3600 ); % 2 hrs
   }
   else
   {
      debug( "Error building QN #19" );
   }
   % template #20 is guild shield intro quest, guildmaster shows up to be told which blacksmith to go to
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP,
         #prizelist = [ 
               [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_GUILDSHIELD ], 
               [ QN_PRIZETYPE_ACTIVATE_QUEST, QST_ID_GUILDSHIELD ],
               [ QN_PRIZETYPE_PASS_QUEST_RESTRICT2, Q_R2_IS_GUILD_MEMBER_OF, 1] ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 20,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_BARTENDER, #onIsland = FALSE  ));
      send( self, @SetQuestNodeSuccessHint, #index = 20, #new_hint = guildshield_intro );
      %send( self, @SetQuestNodeFailureHint, #index = 20, #new_hint = guildshield_failure );
   }
   else
   {
      debug( "Error building QN #20" );
   }
   % template #21 is lute quest, show up to be told who to go to, what to say
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ lutequest_trigger_1 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 21,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel));
   }
   else
   {
      debug( "Error building QN #21" );
   }
   % template #22 is lute quest, say what parrin told you to
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ lutequest_trigger_2a, lutequest_trigger_2b, lutequest_trigger_2c,
                        lutequest_trigger_2d, lutequest_trigger_2e ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperMerchant )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TwoCouncilor )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor )
      {
         lNPCs = cons( oNPC, lNPCs );
      }
      send( self, @SetQuestNodeNPCList, #index = 22, #new_NPC_list = lNPCs);
      send( self, @SetQuestNodeAssignHint, #index = 22, #new_hint = lutequest_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 22, #new_hint = lutequest_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 22, #new_limit = 60 * 60 ); % one hour
   }
   else
   {
      debug( "Error building QN #22" );
   }
   % template #23 is lute quest, deliver the priority item.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Book, 1  ], [ QN_PRIZETYPE_ITEMCLASS, &Scroll, 1  ],
                        [ QN_PRIZETYPE_ITEMCLASS, &CurePoisonPotion, 1  ], [ QN_PRIZETYPE_ITEMCLASS, &Sacchaqua, 1  ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Rose, 1  ] ] )
   {
      % lNPCs was set in the previous node
      send( self, @SetQuestNodeNPCList, #index = 23, #new_NPC_list = lNPCs);
      send( self, @SetQuestNodeNPCModifier, #index = 23, #new_mod = QN_NPCMOD_DIFFERENT );
      send( self, @SetQuestNodeAssignHint, #index = 23, #new_hint = lutequest_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 23, #new_hint = lutequest_success_3  );
      send( self, @SetQuestNodeFailureHint, #index = 23, #new_hint = lutequest_failure_3 );
      send( self, @SetQuestNodeTimeLimit, #index = 23, #new_limit = 20 * 60 );
   }
   else
   {
      debug( "Error building QN #23" );
   }
   % template #24 is lute quest, come back to get your prize.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Lute, 1 ] ] )
   {
      %send( self, @SetQuestNodeNPCList, #index = 24, #new_NPC_list = lNPCs);
      send( self, @SetQuestNodeNPCModifier, #index = 24, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeSuccessHint, #index = 24, #new_hint = lutequest_success_4  );
      send( self, @SetQuestNodeFailureHint, #index = 24, #new_hint = lutequest_failure_4 );
      %send( self, @SetQuestNodeTimeLimit, #index = 24, #new_limit = 20 * 60 );
   }
   else
   {
      debug( "Error building QN #24" );
   }
   
   % template #25 is truth song quest, say truth
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ truthquest_trigger_1 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 25,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel));
   }
   else
   {
      debug( "Error building QN #25" );
   }
   % template #26 is truth song quest,
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ truthquest_trigger_2 ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &barloqueVaultman ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &GuildCreator ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Barloquetailor ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothSergeant ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueClerk ) {
         lNPCs = cons( oNPC, lNPCs );
      }
      send( self, @SetQuestNodeNPCList, #index = 26, #new_NPC_list = lNPCs);
      send( self, @SetQuestNodeAssignHint, #index = 26, #new_hint = truthquest_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 26, #new_hint = truthquest_success_2  );
      send( self, @SetQuestNodeFailureHint, #index = 26, #new_hint = truthquest_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 26, #new_limit = 2 * 24 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #26" );
   }
   % template #27 is truth song quest, go back to parrin
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP ,
         #prizelist = [ [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_TRUTH_SPELL_ENDBRANCH ],
               [ QN_PRIZETYPE_ACTIVATE_QUEST, QST_ID_TRUTH_SPELL_ENDBRANCH ],
               [ QN_PRIZETYPE_PASS_QUEST_RESTRICT2, Q_R2_IS_PLAYER, 1]%,
               %[ QN_PRIZETYPE_PASS_NPC ]
               ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 27, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeFailureHint, #index = 27, #new_hint = truthquest_failure_3 );
      send( self, @SetQuestNodeTimeLimit, #index = 27, #new_limit = 2 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #27" );
   }
   % template #28 is truth song quest, say 'bad' to proceed
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ truthquest_trigger_4 ] )
   {
      %send( self, @SetQuestNodeNPCList, #index = 28, #new_NPC_list = lNPCs);
      send( self, @SetQuestNodeNPCModifier, #index = 28, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 28, #new_hint = truthquest_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 28, #new_hint = truthquest_success_4  );
      send( self, @SetQuestNodeFailureHint, #index = 28, #new_hint = truthquest_failure_4 );
      send( self, @SetQuestNodeTimeLimit, #index = 28, #new_limit = 60 * 1000 );
   }
   else
   {
      debug( "Error building QN #28" );
   }
   % template #29 is truth song quest, 'good' branch kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      %send( self, @SetQuestNodeNPCModifier, #index = 29, #new_mod = QN_NPCMOD_PASSED );
      send( self, @SetQuestNodeNPCList, #index = 29,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel));
   }
   else
   {
      debug( "Error building QN #29" );
   }
   % template #30 is truth song quest, 'good' branch
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ truthquest_trigger_5 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 30,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel));
      %send( self, @SetQuestNodeNPCModifier, #index = 30, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeSuccessHint, #index = 30, #new_hint = truthquest_success_5  );
      send( self, @SetQuestNodeTimeLimit, #index = 30, #new_limit = 60 );
   }
   else
   {
      debug( "Error building QN #30" );
   }

   % template #31 is bone priestess quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ bonepriestessquest_trigger_1 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 31,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBonePriestess));
   }
   else
   {
      debug( "Error building QN #31" );
   }
   % template #32 is bone priestess quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &OrcPitBossHead, 1  ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &SwordShardA, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 32, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 32, #new_hint = bonepriestessquest_assign_2  );
      send( self, @SetQuestNodeSuccessHint, #index = 32, #new_hint = bonepriestessquest_success_2  );
      send( self, @SetQuestNodeFailureHint, #index = 32, #new_hint = bonepriestessquest_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 32, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #32" );
   }

   % template #33 is mad scientist quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ madscientistquest_trigger_1 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 33,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanMadScientist));
   }
   else
   {
      debug( "Error building QN #33" );
   }
   % template #34 is mad scientist quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MONSTER_BRING,
         #monsterlist = [ &DragonFlyQueen ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &SwordShardB, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 34, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 34, #new_hint = madscientistquest_assign_2  );
      send( self, @SetQuestNodeSuccessHint, #index = 34, #new_hint = madscientistquest_success_2  );
      send( self, @SetQuestNodeFailureHint, #index = 34, #new_hint = madscientistquest_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 34, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #34" );
   }

   % template #35 is trading post quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ tradingpost_trigger_1 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 35,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &kocatanTradeMaster));
   }
   else
   {
      debug( "Error building QN #35" );
   }
   % template #36 is trading post quest (good)
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Meatpie, 50 ], [ QN_PRIZETYPE_ITEMCLASS, &Waterskin, 70 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Apple, 150 ], [ QN_PRIZETYPE_ITEMCLASS, &Grapes, 200 ], 
                        [ QN_PRIZETYPE_ITEMCLASS, &ElderBerry, 350 ], [ QN_PRIZETYPE_ITEMCLASS, &Herbs, 250 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Mushroom, 200 ], [ QN_PRIZETYPE_ITEMCLASS, &JewelofFroz, 1 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &SwordShardC, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 36, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 36, #new_hint = tradingpost_assign_2  );
      send( self, @SetQuestNodeSuccessHint, #index = 36, #new_hint = tradingpost_success_2  );
      send( self, @SetQuestNodeFailureHint, #index = 36, #new_hint = tradingpost_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 36, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #36" );
   }
   % template #37 is trading post quest (evil)
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &MysticSword, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &PlateArmor, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &StoutGoblet, 100 ], [ QN_PRIZETYPE_ITEMCLASS, &NeruditeOreChunk, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &WineGoblet, 70 ], [ QN_PRIZETYPE_ITEMCLASS, &Goblet, 70 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &SwordShardC, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 37, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 37, #new_hint = tradingpost_assign_2  );
      send( self, @SetQuestNodeSuccessHint, #index = 37, #new_hint = tradingpost_success_2  );
      send( self, @SetQuestNodeFailureHint, #index = 37, #new_hint = tradingpost_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 37, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #37" );
   }

   % template #38 is bow maker quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ bowmaker_trigger_1 ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 38,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBowMaker));
   }
   else
   {
      debug( "Error building QN #38" );
   }
   % template #39 is bow maker quest (good)
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &NeruditeOreChunk, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 39,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBonePriestess));
      send( self, @SetQuestNodeAssignHint, #index = 39, #new_hint = bowmaker_assign_2  );
      send( self, @SetQuestNodeSuccessHint, #index = 39, #new_hint = bowmaker_success_2  );
      send( self, @SetQuestNodeFailureHint, #index = 39, #new_hint = bowmaker_failure_2 );
      send( self, @SetQuestNodeTimeLimit, #index = 39, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #39" );
   }
   % template #40 is bow maker quest (good)
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &AvarShamanFeather, 1 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &SwordShardD, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 40, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeSuccessHint, #index = 40, #new_hint = bowmaker_success_3  );
      %send( self, @SetQuestNodeFailureHint, #index = 40, #new_hint = bowmaker_failure_3 );
      send( self, @SetQuestNodeTimeLimit, #index = 40, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #40" );
   }
   % template #41 is bow maker quest (evil)
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MONSTER_ITEMCLASS,
         #monsterlist = [ &AvarShaman ],
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &AvarShamanFeather, 1 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &SwordShardD, 1 ] ] )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 41, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 41, #new_hint = bowmaker_assign_4  );
      send( self, @SetQuestNodeSuccessHint, #index = 41, #new_hint = bowmaker_success_3  );
      send( self, @SetQuestNodeFailureHint, #index = 41, #new_hint = bowmaker_failure_4 );
      send( self, @SetQuestNodeTimeLimit, #index = 41, #new_limit = 1 * 60 * 60 );
   }
   else
   {
      debug( "Error building QN #41" );
   }

   % template #42 is qor disciple quest kickoff, "favor"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ disciple_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 42,
         #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &QorPriestess ) );
   }
   else
   {
      debug( "Error building QN #42" );
   }
   % template #43 is qor disciple quest, deliver message
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ qordisciple_trigger ], #timelimit = 2 * 3600 )
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueBlacksmith )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperInnKeeper )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 43, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 43, #new_hint = qordisciple_assign );
      send( self, @SetQuestNodeFailureHint, #index = 43, #new_hint = qordisciple_failure );
   }
   else
   {
      debug( "Error building QN #43" );
   }
   % template #44 is qor disciple quest, come back
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeNPCModifier, #index = 44, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeSuccessHint, #index = 44, #new_hint = qordisciple_success );
      send( self, @SetQuestNodeFailureHint, #index = 44, #new_hint = qordisciple_failure );
   }
   else
   {
      debug( "Error building QN #44" );
   }

   % template #45 is scimitar learn quest kickoff, "scimitar"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ scimitarlearn_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 45,
       #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBlacksmith ) );
   }
   else
   {
      debug( "Error building QN #45" );
   }
   % template #46 is scimitar learn quest, kill cave orc
   if send( self, @AddQuestNodeTemplate,#questnode_type = QN_TYPE_MONSTER,#NPC_modifier = QN_NPCMOD_SAME,
         #monsterlist = [ &CaveOrc ],
         #timelimit = 12 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 46, #new_hint = scimitarlearn_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 46, #new_hint = scimitarlearn_failure_2 );
   }
   else
   {
      debug( "Error building QN #46" );
   }
   % template #47 is scimitar learn quest, kill Yeti
   if send( self, @AddQuestNodeTemplate,#questnode_type = QN_TYPE_MONSTER,#NPC_modifier = QN_NPCMOD_SAME,
         #monsterlist = [ &Yeti ],
         #timelimit = 12 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 47, #new_hint = scimitarlearn_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 47, #new_hint = scimitarlearn_failure_3 );
   }
   else
   {
      debug( "Error building QN #47" );
   }
   % template #48 is scimitar learn quest, kill Yeti... again.
   if send( self, @AddQuestNodeTemplate,#questnode_type = QN_TYPE_MONSTER,#NPC_modifier = QN_NPCMOD_SAME,
         #monsterlist = [ &Yeti ],
         #timelimit = 12 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 48, #new_hint = scimitarlearn_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 48, #new_hint = scimitarlearn_success_4 );
      send( self, @SetQuestNodeFailureHint, #index = 48, #new_hint = scimitarlearn_failure_4 );
   }
   else
   {
      debug( "Error building QN #48" );
   }
   % template #49 is chicken soup quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothTown ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 49, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #49" );
   }
   % template #50 is chicken soup quest, say "chicken soup"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ chickensoupquest_trigger_2 ],
         #timelimit = 3600 )    % an hour
   {
      send( self, @SetQuestNodeNPCList, #index = 50,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperInnKeeper ) );
      send( self, @SetQuestNodeAssignHint, #index = 50, #new_hint = chickensoupquest_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 50, #new_hint = chickensoupquest_failure_2 );
   }
   else
   {
      debug( "Error building QN #50" );
   }
   % template #51 is chicken soup quest, bring the soup back
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,#NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &ChickenSoup, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Hammer, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &LongSword, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &Axe, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &ScaleArmor, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &FireRing, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &ColdRing, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &ShockRing, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &AcidRing, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &RingInvisibility, 1 ] ] ],
         #timelimit = 3600 )    % an hour
   {
     send( self, @SetQuestNodeAssignHint, #index = 51, #new_hint = chickensoupquest_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 51, #new_hint = chickensoupquest_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 51, #new_hint = chickensoupquest_failure_3 );
   }
   else
   {
      debug( "Error building QN #51" );
   }
   % template #52 is stunted dwarf quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_BARTENDER ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 52, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #52" );
   }
   % template #53 is stunted dwarf quest, say "stunted dwarf"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,#NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ stunteddwarf_trigger ],
         #timelimit = 5 * 60 )  % 5 minutes
   {
      send( self, @SetQuestNodeAssignHint, #index = 53, #new_hint = stunteddwarf_assign_2 );
   }
   else
   {
      debug( "Error building QN #53" );
   }
   % template #54 is stunted dwarf quest, say "stunted dwarf"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,#NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ stunteddwarf_trigger ],
         #timelimit = 24 * 3600 )    % a day
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionTown ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 54, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 54, #new_hint = stunteddwarf_assign_3 );
   }
   else
   {
      debug( "Error building QN #54" );
   }
   % template #55 is stunted dwarf quest, say "myth"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,#NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ stunteddwarf_trigger_4 ],
         #timelimit = 24 * 3600 )    % a day
   {
      send( self, @SetQuestNodeAssignHint, #index = 55, #new_hint = stunteddwarf_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 55, #new_hint = stunteddwarf_success_4 );
   }
   else
   {
      debug( "Error building QN #55" );
   }
   % template #56 is stunted dwarf quest, say "stunted dwarf" to island npc
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ stunteddwarf_trigger ],
         #timelimit = 2 * 24 * 3600 )    % 2 days
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanTown ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 56, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #56" );
   }
   % template #57 is stunted dwarf quest, go kill a kriipa
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MONSTER, #NPC_modifier = QN_NPCMOD_SAME,
         #monsterlist = [ &Kriipa ],
         #timelimit = 2 * 3600 )   %2 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 57, #new_hint = stunteddwarf_assign_6 );
      send( self, @SetQuestNodeSuccessHint, #index = 57, #new_hint = stunteddwarf_success_6 );
      send( self, @SetQuestNodeFailureHint, #index = 57, #new_hint = stunteddwarf_failure_6 );
   }
   else
   {
      debug( "Error building QN #57" );
   }
   % template #58 is stunted dwarf quest, give recipe to original npc
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ [ QN_PRIZETYPE_ITEM, &RecipeScroll, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingShalille, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &OfferingRiija, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OfferingQor, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &OfferingFaren, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OfferingKraanan, 1 ] ] ],
         #timelimit = 4 * 24 * 3600 )    % 4 days
   {
      send( self, @SetQuestNodeSuccessHint, #index = 58, #new_hint = stunteddwarf_success_7 );
   }
   else
   {
      debug( "Error building QN #58" );
   }

   % template #59 is hypochondriac quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 59,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) );
   }
   else
   {
      debug( "Error building QN #59" );
   }
   % template #60 is hypochondriac quest, say disease name to npc
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ hypochondriac_trigger_2a, hypochondriac_trigger_2b,
                        hypochondriac_trigger_2c, hypochondriac_trigger_2d ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperTown ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 60, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 60, #new_hint = hypochondriac_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 60, #new_hint = hypochondriac_failure_2 );
   }
   else
   {
      debug( "Error building QN #60" );
   }
   % template #61 is hypochondriac quest, say "sacchaqua" to npc
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ hypochondriac_trigger_3 ],
         #timelimit = 3600 )    % 1 hour
   {
      send( self, @SetQuestNodeNPCModifier, #index = 61, #new_mod = QN_NPCMOD_DIFFERENT );
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 61, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 61, #new_hint = hypochondriac_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 61, #new_hint = hypochondriac_failure_3 );
   }
   else
   {
      debug( "Error building QN #61" );
   }
   % template #62 is hypochondriac quest, bring the cure back to frisconar
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEM, &Sacchaqua, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &ScaleArmor, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &PlateArmor, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &FineLute, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Rose, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &BerserkerRing, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Gauntlet, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &EnfeebleWand, 1 ] ] ],
         #timelimit = 3600 )    % 1 hour
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 62, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 62, #new_hint = hypochondriac_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 62, #new_hint = hypochondriac_success_4 );
      send( self, @SetQuestNodeFailureHint, #index = 62, #new_hint = hypochondriac_failure_4 );
   }
   else
   {
      debug( "Error building QN #62" );
   }
   % template #63 is qor offering quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 63,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &QorPriestess ) );
   }
   else
   {
      debug( "Error building QN #63" );
   }
   % template #64 is qor offering quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ qoroffering_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 64, #new_hint = qoroffering_assign_2 );
   }
   else
   {
      debug( "Error building QN #64" );
   }
   % template #65 is qor offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ qoroffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 30 seconds
   {
      send( self, @SetQuestNodeAssignHint, #index = 65, #new_hint = qoroffering_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 65, #new_hint = qoroffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #65" );
   }
   % template #66 is qor offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ qoroffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 66, #new_hint = qoroffering_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 66, #new_hint = qoroffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #66" );
   }
   % template #67 is qor offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ qoroffering_trigger_3 ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingQor, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 67, #new_hint = qoroffering_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 67, #new_hint = qoroffering_success_5 );
      send( self, @SetQuestNodeFailureHint, #index = 67, #new_hint = qoroffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #67" );
   }

   % template #68 is shal'ille offering quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 68,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess ) );
   }
   else
   {
      debug( "Error building QN #68" );
   }
   % template #69 is shal'ille offering quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ shalilleoffering_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 69, #new_hint = shalilleoffering_assign_2 );
   }
   else
   {
      debug( "Error building QN #69" );
   }
   % template #70 is shal'ille offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ shalilleoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 30 seconds
   {
      send( self, @SetQuestNodeAssignHint, #index = 70, #new_hint = shalilleoffering_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 70, #new_hint = shalilleoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #70" );
   }
   % template #71 is shal'ille offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ shalilleoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 71, #new_hint = shalilleoffering_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 71, #new_hint = shalilleoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #71" );
   }
   % template #72 is shal'ille offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ shalilleoffering_trigger_3 ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingShalille, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 72, #new_hint = shalilleoffering_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 72, #new_hint = shalilleoffering_success_5 );
      send( self, @SetQuestNodeFailureHint, #index = 72, #new_hint = shalilleoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #72" );
   }

   % template #73 is faren offering quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 73,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FarenPriestess ) );
   }
   else
   {
      debug( "Error building QN #73" );
   }
   % template #74 is faren offering quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ farenoffering_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 74, #new_hint = farenoffering_assign_2 );
   }
   else
   {
      debug( "Error building QN #74" );
   }
   % template #75 is faren offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ farenoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 30 seconds
   {
      send( self, @SetQuestNodeAssignHint, #index = 75, #new_hint = farenoffering_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 75, #new_hint = farenoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #75" );
   }
   % template #76 is faren offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ farenoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 76, #new_hint = farenoffering_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 76, #new_hint = farenoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #76" );
   }
   % template #77 is faren offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ farenoffering_trigger_3 ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingFaren, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 77, #new_hint = farenoffering_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 77, #new_hint = farenoffering_success_5 );
      send( self, @SetQuestNodeFailureHint, #index = 77, #new_hint = farenoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #77" );
   }

   % template #78 is kraanan offering quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 78,
         #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KraananPriestess ) );
   }
   else
   {
      debug( "Error building QN #78" );
   }
   % template #79 is kraanan offering quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ kraananoffering_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 79, #new_hint = kraananoffering_assign_2 );
   }
   else
   {
      debug( "Error building QN #79" );
   }
   % template #80 is kraanan offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ kraananoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 30 seconds
   {
      send( self, @SetQuestNodeAssignHint, #index = 80, #new_hint = kraananoffering_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 80, #new_hint = kraananoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #80" );
   }
   % template #81 is kraanan offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ kraananoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 81, #new_hint = kraananoffering_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 81, #new_hint = kraananoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #81" );
   }
   % template #82 is kraanan offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ kraananoffering_trigger_3 ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingKraanan, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -4, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -1, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_AGILITY , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 66 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 82, #new_hint = kraananoffering_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 82, #new_hint = kraananoffering_success_5 );
      send( self, @SetQuestNodeFailureHint, #index = 82, #new_hint = kraananoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #82" );
   }

   % template #83 is riija offering quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 83,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RiijaMonk ) );
   }
   else
   {
      debug( "Error building QN #83" );
   }
   % template #84 is riija offering quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ riijaoffering_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 84, #new_hint = riijaoffering_assign_2 );
   }
   else
   {
      debug( "Error building QN #84" );
   }
   % template #85 is riija offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ riijaoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , 3, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -2, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, 2, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 30 seconds
   {
      send( self, @SetQuestNodeAssignHint, #index = 85, #new_hint = riijaoffering_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 85, #new_hint = riijaoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #85" );
   }
   % template #86 is riija offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ riijaoffering_trigger_3 ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , 3, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -2, 7 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, 2, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -1, 7 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -5, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -5, 2 ] ],
         #timelimit = 30 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 86, #new_hint = riijaoffering_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 86, #new_hint = riijaoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #86" );
   }
   % template #87 is riija offering quest, incant
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ riijaoffering_trigger_3 ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingRiija, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , 25, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -24, 4 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, 35, 1 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -34, 4 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -6, 2 ],
                        [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -6, 2 ] ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 87, #new_hint = riijaoffering_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 87, #new_hint = riijaoffering_success_5 );
      send( self, @SetQuestNodeFailureHint, #index = 87, #new_hint = riijaoffering_failure_3 );
   }
   else
   {
      debug( "Error building QN #87" );
   }
   
   % template #88 is fade learn quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ fadelearn_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index =88 , #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #88" );
   }
   % template #89 is fade learn quest, ask about formula
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ fadelearn_trigger_2 ],
         #timelimit = 3 * 3600 )    % 3 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Heretic ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 89, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 89, #new_hint = fadelearn_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 89, #new_hint = fadelearn_failure_2 );
   }
   else
   {
      debug( "Error building QN #89" );
   }
   % template #90 is fade learn quest, prove resolve by killing monster
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MONSTER, #NPC_modifier = QN_NPCMOD_SAME,
         #monsterlist = [ &CaveOrc, &Troll ],
         #timelimit = 3600 )    % 1 hr
   {
      send( self, @SetQuestNodeAssignHint, #index = 90, #new_hint = fadelearn_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 90, #new_hint = fadelearn_failure_3 );
   }
   else
   {
      debug( "Error building QN #90" );
   }
   % template #91 is fade learn quest, return formula
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &FormulaScroll, 1 ] ],
         #timelimit = 3600 )    % 1 hr
   {
      send( self, @SetQuestNodeAssignHint, #index = 91, #new_hint = fadelearn_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 91, #new_hint = fadelearn_success_4 );
      send( self, @SetQuestNodeFailureHint, #index = 91, #new_hint = fadelearn_failure_4 );
   }
   else
   {
      debug( "Error building QN #91" );
   }
    
   % template #92 is dement learn quest kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ dementlearn_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 92 , #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #92" );
   }
   % template #93 is dement learn quest, deliver item
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Book, 1  ], [ QN_PRIZETYPE_ITEMCLASS, &Scroll, 1  ],
                        [ QN_PRIZETYPE_ITEMCLASS, &CureDiseasePotion, 1  ], [ QN_PRIZETYPE_ITEMCLASS, &Sacchaqua, 1  ] ],
         #prizelist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -5, 2 ] ],
         #timelimit = 4 * 3600 )    % 4 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DarkWizard ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 93, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 93, #new_hint = dementlearn_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 93, #new_hint = dementlearn_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 93, #new_hint = dementlearn_failure_2 );
   }
   else
   {
      debug( "Error building QN #93" );
   }
   % template #94 is dement learn quest, come back
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #timelimit = 24 * 3600 )    % 1 day
   {
      send( self, @SetQuestNodeSuccessHint, #index = 94, #new_hint = dementlearn_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 94, #new_hint = dementlearn_failure_3 );
   }
   else
   {
      debug( "Error building QN #94" );
   }

   % template #95 is sporeburst learn quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DarkWizard ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 95, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #95" );
   }
   % template #96 is sporeburst learn quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingShalille, 1 ],[ QN_PRIZETYPE_ITEMCLASS, &OfferingFaren, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OfferingKraanan, 1 ],[ QN_PRIZETYPE_ITEMCLASS, &OfferingRiija, 1 ] ],
         #timelimit = 2 * 24 * 3600 )    % 2 days
   {
      send( self, @SetQuestNodeAssignHint, #index = 96, #new_hint = sporeburstlearn_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 96, #new_hint = sporeburstlearn_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 96, #new_hint = sporeburstlearn_failure_2 );
   }
   else
   {
      debug( "Error building QN #96" );
   }
   % template #97 is sporeburst learn quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingQor, 1 ] ],
         #timelimit = 2 * 24 * 3600 )    % 2 days
   {
      send( self, @SetQuestNodeAssignHint, #index = 97, #new_hint = sporeburstlearn_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 97, #new_hint = sporeburstlearn_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 97, #new_hint = sporeburstlearn_failure_2 );
   }
   else
   {
      debug( "Error building QN #97" );
   }

   % template #98 is polish seraphym quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanShopkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 98, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #98" );
   }
   % template #99 is polish seraphym quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &UncutSeraphym, 3 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &PolishedSeraphym, 1 ] ],
         #timelimit = 12 * 3600 )    % 12 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 99, #new_hint = polishquest_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 99, #new_hint = polishquest_success );
      send( self, @SetQuestNodeFailureHint, #index = 99, #new_hint = polishquest_failure );
   }
   else
   {
      debug( "Error building QN #99" );
   }
   
   % template #100 is priestess insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ priestessinsignia_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Temples, #onIsland=false ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 100, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #100" );
   }
   % template #101 is priestess insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ priestessinsignia_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 101, #new_hint = priestessinsignia_assign_2 );
   }
   else
   {
      debug( "Error building QN #101" );
   }
   % template #102 is priestess insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &KriipaClaw, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &PolishedSeraphym, 5 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DragonflyEye, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ShamanBlood, 10 ] ],
         #prizelist = [ [ QN_PRIZETYPE_INSIGNIA ] ],
         #timelimit = 12 * 3600 )    % 12 hrs
   {
      send( self, @SetQuestNodeAssignHint, #index = 102, #new_hint = priestessinsignia_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 102, #new_hint = priestessinsignia_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 102, #new_hint = priestessinsignia_failure_3 );
   }
   else
   {
      debug( "Error building QN #102" );
   }
   
   % template #103 is monk insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ monkinsignia_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Temples, #onIsland=true ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 103, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #103" );
   }
   % template #104 is monk insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ monkinsignia_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 104, #new_hint = monkinsignia_assign_2 );
   }
   else
   {
      debug( "Error building QN #104" );
   }
   % template #105 is monk insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &DarkAngelFeather, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &PurpleMushroom, 40 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &BlueDragonScale, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OrcTooth, 40 ] ],
         #prizelist = [ [ QN_PRIZETYPE_INSIGNIA ] ],
         #timelimit = 12 * 3600 )    % 12 hrs
   {
      send( self, @SetQuestNodeAssignHint, #index = 105, #new_hint = monkinsignia_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 105, #new_hint = monkinsignia_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 105, #new_hint = monkinsignia_failure_3 );
   }
   else
   {
      debug( "Error building QN #105" );
   }
   
   % template #106 is faction insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ factioninsignia_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Factions, #onIsland=false ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 106, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #106" );
   }
   % template #107 is faction insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ factioninsignia_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index = 107, #new_hint = factioninsignia_assign_2 );
   }
   else
   {
      debug( "Error building QN #107" );
   }
   % template #108 is faction insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ factioninsignia_trigger_3a,
                        factioninsignia_trigger_3b,
                        factioninsignia_trigger_3c,
                        factioninsignia_trigger_3d,
                        factioninsignia_trigger_3e,
                        factioninsignia_trigger_3f,
                        factioninsignia_trigger_3g],
         #timelimit = 2 * 3600 )    % 2 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionTown ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperTown ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 108, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 108, #new_hint = factioninsignia_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 108, #new_hint = factioninsignia_failure_3 );
   }
   else
   {
      debug( "Error building QN #108" );
   }
   % template #109 is faction insignia quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ factioninsignia_trigger_4a,
                        factioninsignia_trigger_4b,
                        factioninsignia_trigger_4c,
                        factioninsignia_trigger_4d,
                        factioninsignia_trigger_4e,
                        factioninsignia_trigger_4f ],
         #prizelist = [ [ QN_PRIZETYPE_INSIGNIA ] ],
         #timelimit = 2 * 3600 )    % 2 hrs
   {
      send( self, @SetQuestNodeAssignHint, #index = 109, #new_hint = factioninsignia_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 109, #new_hint = factioninsignia_success_4 );
      send( self, @SetQuestNodeFailureHint, #index = 109, #new_hint = factioninsignia_failure_4 );
   }
   else
   {
      debug( "Error building QN #109" );
   }

   % template #110 is mystery monster quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_TAILOR, #onIsland = FALSE ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index =110 , #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #110" );
   }
   % template #111 is mystery monster quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ mysterymonster_trigger_2 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index =111 , #new_hint = mysterymonster_assign_2 );
   }
   else
   {
      debug( "Error building QN #111" );
   }
   % template #112 is mystery monster quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ mysterymonster_trigger_3 ],
         #timelimit = 60 )    % 1 minute
   {
      send( self, @SetQuestNodeAssignHint, #index =112 , #new_hint = mysterymonster_assign_3 );
   }
   else
   {
      debug( "Error building QN #112" );
   }
   % template #113 is mystery monster quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MONSTER_ITEMCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &DressPattern, 1 ] ],
         #monsterlist = [ &SpiderBaby, &SpiderBaby, &Centipede, &Centipede, &Centipede, &Spider, &Ant ],
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &DiscipleRobe, 1 ] ],
         #timelimit = 2 * 24 * 3600 )    %2 days
   {
      send( self, @SetQuestNodeAssignHint, #index =113 , #new_hint = mysterymonster_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index =113 , #new_hint = mysterymonster_success_4 );
      send( self, @SetQuestNodeFailureHint, #index =113 , #new_hint = mysterymonster_failure_4 );
   }
   else
   {
      debug( "Error building QN #113" );
   }
   
   
   
   % template #114 is Moxal scam quest #1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index =114 , #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #114" );
   }
   % template #115 is Moxal scam quest #1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ moxalscam1_trigger_2 ],
         #timelimit = 2 * 60 )    % 2 minutes
   {
      send( self, @SetQuestNodeAssignHint, #index =115 , #new_hint = moxalscam1_assign_2 );
   }
   else
   {
      debug( "Error building QN #115" );
   }
   % template #116 is Moxal scam quest #1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &ScamScroll, 1 ] ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanTown ) {
         if not isClass(oNPC, &KocatanBonePriestess) and not isClass(oNPC, &KocatanSentry) and
                  not isClass(oNPC, &KocatanInnkeeper)
         {
            lNPCs = cons( oNPC, lNPCs );
         }
      }
      send( self, @SetQuestNodeNPCList, #index =116 , #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index =116, #new_hint = moxalscam1_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index =116 , #new_hint = moxalscam1_failure_3 );
   }
   else
   {
      debug( "Error building QN #116" );
   }
   % template #117 is Moxal scam quest #1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &ScamScroll, 1 ] ],
         #timelimit = 3 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeNPCList, #index =117 , #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index =117 , #new_hint = moxalscam1_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index =117 , #new_hint = moxalscam1_failure_4 );
   }
   else
   {
      debug( "Error building QN #117" );
   }
   % template #118 is Moxal scam quest #1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &ScamScroll, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],[ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],[ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],[ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],[ QN_PRIZETYPE_ITEMCLASS, &Mace, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &BlindWand, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &ShortSword, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &ShortSword, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &ShortSword, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &MysticSword, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &PlateArmor, 1 ],
                           [ QN_PRIZETYPE_ITEMCLASS, &Key, 1 ] ] ],
         #timelimit = 2 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeNPCList, #index =118 , #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index =118 , #new_hint = moxalscam1_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index =118 , #new_hint = moxalscam1_success_5 );
      send( self, @SetQuestNodeFailureHint, #index =118 , #new_hint = moxalscam1_failure_4 );
   }
   else
   {
      debug( "Error building QN #118" );
   }

   % template #119 is Moxal scam quest #2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index =119 , #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #119" );
   }
   % template #120 is Moxal scam quest #2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #timelimit = 4 * 3600 )    % 4 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanTown ) {
         if not isClass(oNPC, &KocatanBonePriestess) and not isClass(oNPC, &KocatanSentry) {
            lNPCs = cons( oNPC, lNPCs );
         }
      }
      send( self, @SetQuestNodeNPCList, #index = 120, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 120, #new_hint = moxalscam2_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 120, #new_hint = moxalscam2_failure );
   }
   else
   {
      debug( "Error building QN #120" );
   }
   % template #121 is Moxal scam quest #2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ moxalscam2_trigger_3 ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 121, #new_hint = moxalscam2_assign_3 );
   }
   else
   {
      debug( "Error building QN #121" );
   }
   % template #122 is Moxal scam quest #2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #timelimit = 4 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 122, #new_hint = moxalscam2_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 122, #new_hint = moxalscam2_failure );
   }
   else
   {
      debug( "Error building QN #122" );
   }
   % template #123 is Moxal scam quest #2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ moxalscam2_trigger_3 ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 123, #new_hint = moxalscam2_assign_5 );
      send( self, @SetQuestNodeSuccessHint, #index = 123, #new_hint = moxalscam2_success_5 );
   }
   else
   {
      debug( "Error building QN #123" );
   }

   % template #124 is council letter quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_INNKEEPER ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 124, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #124" );
   }
   % template #125 is council letter quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &CouncilLetter, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 750 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 750 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ] ] ],
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Council ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 125, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 125, #new_hint = council_letter_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 125, #new_hint = council_letter_success );
      send( self, @SetQuestNodeFailureHint, #index = 125, #new_hint = council_letter_failure );
   }
   else
   {
      debug( "Error building QN #125" );
   }

   % template #126 is chess quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Council ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &PrincessLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueClerk ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothTailor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothSergeant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 126, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #126" );
   }
   % template #127 is chess quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ chess_trigger ],
         #timelimit = 2 * 60 )    % 2 minutes
   {
      send( self, @SetQuestNodeAssignHint, #index = 127, #new_hint = chess_assign_2 );
   }
   else
   {
      debug( "Error building QN #127" );
   }
   % template #128 is chess quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_CHESSMOVE, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      send( self, @SetQuestNodeNPCList, #index = 128, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 128, #new_hint = chess_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 128, #new_hint = chess_failure );
   }
   else
   {
      debug( "Error building QN #128" );
   }
   % template #129 is chess quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_CHESSMOVE, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 800 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ] ] ],
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      send( self, @SetQuestNodeAssignHint, #index = 129, #new_hint = chess_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 129, #new_hint = chess_success_4 );
      send( self, @SetQuestNodeFailureHint, #index = 129, #new_hint = chess_failure );
   }
   else
   {
      debug( "Error building QN #129" );
   }
   
   % template #130 is chess checkmate quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      send( self, @SetQuestNodeNPCList, #index = 130, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #130" );
   }
   % template #131 is chess checkmate quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ chess_trigger ],
         #timelimit = 2 * 60 )    % 2 minutes
   {
      send( self, @SetQuestNodeAssignHint, #index = 131, #new_hint = chess_assign_2 );
   }
   else
   {
      debug( "Error building QN #131" );
   }
   % template #132 is chess checkmate quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_CHESSMOVE, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      send( self, @SetQuestNodeNPCList, #index = 132, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 132, #new_hint = chess_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 132, #new_hint = chess_failure );
   }
   else
   {
      debug( "Error building QN #132" );
   }
   % template #133 is chess checkmate quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_CHESSMOVE, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      send( self, @SetQuestNodeAssignHint, #index = 133, #new_hint = chess_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 133, #new_hint = chess_failure );
   }
   else
   {
      debug( "Error building QN #133" );
   }
   % template #134 is chess checkmate quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_CHESSMOVE, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 2000 ] ] ],
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      send( self, @SetQuestNodeAssignHint, #index = 134, #new_hint = chess_checkmate_assign_5 );
      send( self, @SetQuestNodeSuccessHint, #index = 134, #new_hint = chess_checkmate_success_5 );
      send( self, @SetQuestNodeFailureHint, #index = 134, #new_hint = chess_failure );
   }
   else
   {
      debug( "Error building QN #134" );
   }

   % template #135 is love letter quest 1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &GuildCreator ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 135, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #135" );
   }
   % template #136 is love letter quest 1
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &LoveLetter, 1 ] ],
         %#cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &LoveLetter, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Rose, 1 ] ], % had to delete the rose for text consistency.
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 550 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 650 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 550 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 650 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 450 ], [ QN_PRIZETYPE_ITEMCLASS, &Key, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SeduceWand, 1] ] ],
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Barloquetailor ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 136, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 136, #new_hint = love_letter_1_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 136, #new_hint = love_letter_1_success );
      send( self, @SetQuestNodeFailureHint, #index = 136, #new_hint = love_letter_failure );
   }
   else
   {
      debug( "Error building QN #136" );
   }

   % template #137 is love letter quest 2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Barloquetailor ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 137, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #137" );
   }
   % template #138 is love letter quest 2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &LoveLetter, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 550 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 650 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 450 ], [ QN_PRIZETYPE_ITEMCLASS, &Key, 1 ] ] ],
         #timelimit = 6 * 3600 )    % 6 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &GuildCreator ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 138, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 138, #new_hint = love_letter_2_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 138, #new_hint = love_letter_2_success );
      send( self, @SetQuestNodeFailureHint, #index = 138, #new_hint = love_letter_failure );
   }
   else
   {
      debug( "Error building QN #138" );
   }

   % template #139 is necroguild quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DeadLich ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 139, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #139" );
   }
   % template #140 is necromancer guild quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ necroguild_trigger_2 ],
         #timelimit = 120 )    % 2 min
   {
      send( self, @SetQuestNodeAssignHint, #index = 140, #new_hint = necroguild_assign_2 );
   }
   else
   {
      debug( "Error building QN #140" );
   }
   % template #141 is necromancer guild quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &OfferingQor, 1 ] ],
         #prizelist = [ [ QN_PRIZETYPE_ESTABLISH_NECROGUILD ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_MYSTICISM , -3, 2 ] ],
         #timelimit = 3 * 24 * 3600 )    % 3 days
   {
      send( self, @SetQuestNodeAssignHint, #index = 141, #new_hint = necroguild_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 141, #new_hint = necroguild_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 141, #new_hint = necroguild_failure_3 );
   }
   else
   {
      debug( "Error building QN #141" );
   }

   % template #142 is aphrodesiac quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KraananPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueTailor ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 142, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #142" );
   }
   % template #143 is aphrodesiac quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ aphrodesiac_trigger_2 ],
         #timelimit = 3600 )    % 1 hour
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Heretic ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 143, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 143, #new_hint = aphrodesiac_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 143, #new_hint = aphrodesiac_failure_2 );
   }
   else
   {
      debug( "Error building QN #143" );
   }
   % template #144 is aphrodesiac quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &SpiderEgg, 1 ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 144, #new_hint = aphrodesiac_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 144, #new_hint = aphrodesiac_failure_3 );
   }
   else
   {
      debug( "Error building QN #144" );
   }
   % template #145 is aphrodesiac quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &AphrodesiacPotion, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1400 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1800 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 2000 ] ] ],
         #timelimit = 3600 )    % 1 hour
   {
      send( self, @SetQuestNodeAssignHint, #index = 145, #new_hint = aphrodesiac_assign_4 );
      send( self, @SetQuestNodeSuccessHint, #index = 145, #new_hint = aphrodesiac_success_4 );
      send( self, @SetQuestNodeFailureHint, #index = 145, #new_hint = aphrodesiac_failure_4 );
   }
   else
   {
      debug( "Error building QN #145" );
   }

   % template #146 is necro warning quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DarkWizard ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 146, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #146" );
   }
   % template #147 is necro warning quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &NecromancerLetter, 1 ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -2, 1 ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KraananPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FarenPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &QorPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 147, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 147, #new_hint = necrowarning_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 147, #new_hint = necrowarning_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 147, #new_hint = necrowarning_failure_2 );
   }
   else
   {
      debug( "Error building QN #147" );
   }
   % template #148 is necro warning quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 800 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1200 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1400 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 10],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 15],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 20],
                        [ QN_PRIZETYPE_ITEMCLASS, &Prism, 1 ] ] ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeSuccessHint, #index = 148, #new_hint = necrowarning_success_3 );
   }
   else
   {
      debug( "Error building QN #148" );
   }

   % template #149 is bar restock quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_BARTENDER ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 149, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #149" );
   }
   % template #150 is bar restock quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ barrestock_trigger_2 ],
         #timelimit = 3600 )    % 1 hour
   {
      send( self, @SetQuestNodeNPCList, #index = 150, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 150, #new_hint = barrestock_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 150, #new_hint = barrestock_failure_2 );
   }
   else
   {
      debug( "Error building QN #150" );
   }
   % template #151 is bar restock quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &StoutGoblet, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Goblet, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &WineGoblet, 40 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1300 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1400 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1800 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1900 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 2000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 25 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 35 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 25 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 35 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ShadowformPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &KaraholsCursePotion, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      send( self, @SetQuestNodeAssignHint, #index = 151, #new_hint = barrestock_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 151, #new_hint = barrestock_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 151, #new_hint = barrestock_failure_3 );
   }
   else
   {
      debug( "Error building QN #151" );
   }

   % template #152 is catering quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &PrincessLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TwoCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ThreeCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &fourCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 152, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #152" );
   }
   % template #153 is catering quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ catering_trigger_2 ],
         #timelimit = 3600 )    % 1 hour
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #iJob = MOB_ROLE_INNKEEPER ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 153, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 153, #new_hint = catering_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 153, #new_hint = catering_failure_2 );
   }
   else
   {
      debug( "Error building QN #153" );
   }
   % template #154 is catering quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &SpidEye, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Grapes, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Goblet, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Soup, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Drumstick, 50 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1300 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1400 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1800 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1900 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 2000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 25 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 30 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &BaitPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectGoodPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectEvilPotion, 1 ] ] ],
         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -2, 2 ] ],
         #timelimit = 3600 )    % 1 hour
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &PrincessLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TwoCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ThreeCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &fourCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 154, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 154, #new_hint = catering_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 154, #new_hint = catering_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 154, #new_hint = catering_failure_3 );
   }
   else
   {
      debug( "Error building QN #154" );
   }

   % template #155 is smithy ore quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ])
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueBlacksmith ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBlacksmith ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBlacksmith ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 155, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #155" );
   }
   % template #156 is smithy ore quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &CheapOreChunk, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 300 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 450 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 650 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 750 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 550 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 25 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 35 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 25 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 30 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 35 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Axe, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &MysticSword, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Flask, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &StrengthPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &HastePotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &MagicShieldPotion, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      send( self, @SetQuestNodeNPCList, #index = 156, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 156, #new_hint = ore_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 156, #new_hint = ore_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 156, #new_hint = ore_failure_2 );
   }
   else
   {
      debug( "Error building QN #156" );
   }

   % template #157 is apothecary quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ])
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 157, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #157" );
   }
   % template #158 is apothecary quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &PolishedSeraphym, 2 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &UncutSeraphym, 5 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DarkAngelFeather, 5 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &PurpleMushroom, 10 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &BlueDragonScale, 5 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OrcTooth, 10 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Mushroom, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &KriipaClaw, 5 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DragonflyEye, 5 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 650 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 650 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 750 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 700 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 750 ],[ QN_PRIZETYPE_ITEMCLASS, &Money, 800 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectInvisibilityPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NightVisionPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &VampireWand, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      send( self, @SetQuestNodeNPCList, #index = 158, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 158, #new_hint = apothecary_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 158, #new_hint = apothecary_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 158, #new_hint = apothecary_failure_2 );
   }
   else
   {
      debug( "Error building QN #158" );
   }

   % template #159 is vault tax quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ])
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueVaultman ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 159, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #159" );
   }
   % template #160 is vault tax quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1302 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1133 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1576 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1230 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1614 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1735 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1431 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1638 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1037 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 2209 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 7 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &EntrootBerry, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OrcTooth, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectInvisibilityPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectGoodPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectEvilPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &IllusionaryFormPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 30 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 30 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NodeBurstPotion, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ], [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -20, 7] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 160, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 160, #new_hint = vaulttax_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 160, #new_hint = vaulttax_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 160, #new_hint = vaulttax_failure_2 );
   }
   else
   {
      debug( "Error building QN #160" );
   }

   % template #161 is merchant tax quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ])
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CornothGrocer ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 161, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #161" );
   }
   % template #162 is merchant tax quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 130 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 113 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 157 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 123 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 161 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 173 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 143 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 163 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 103 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 220 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 4 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &EntrootBerry, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &OrcTooth, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectInvisibilityPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectGoodPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectEvilPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &IllusionaryFormPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NodeBurstPotion, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 162, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 162, #new_hint = merchanttax_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 162, #new_hint = merchanttax_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 162, #new_hint = merchanttax_failure_2 );
   }
   else
   {
      debug( "Error building QN #162" );
   }

   % template #163 is late tax quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 800 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1200 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1400 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 20 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectGoodPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectEvilPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &DetectInvisibilityPotion, 1 ] ] ],
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 163, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #163" );
   }
   % template #164 is late tax quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &TaxLetter, 1 ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CornothGrocer ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 164, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 164, #new_hint = latetax_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 164, #new_hint = latetax_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 164, #new_hint = latetax_failure_2 );
   }
   else
   {
      debug( "Error building QN #164" );
   }

   % template #165 is kocatan weapon trade quest, say "need a courier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ])
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBowMaker ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 165, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #165" );
   }
   % template #166 is kocatan weapon trade quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ chess_trigger ],
         #timelimit = 2 * 60 )    % 2 minutes
   {
      send( self, @SetQuestNodeAssignHint, #index = 166, #new_hint = kocweapon_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 166, #new_hint = kocweapon_failure_2 );
   }
   else
   {
      debug( "Error building QN #166" );
   }
   % template #167 is kocatan weapon trade quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Arrow, 100 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 50 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 10 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Emerald, 6 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &IdentifyWand, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &PurifyWand, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistColdPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistFirePotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistMagicPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistPoisonPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistShockPotion, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ] ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &PrincessLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 167, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 167, #new_hint = kocweapon_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 167, #new_hint = kocweapon_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 167, #new_hint = kocweapon_failure_3 );
   }
   else
   {
      debug( "Error building QN #167" );
   }

   % template #168 is kocatan ale trade quest, say "need a courier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ])
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnKeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 168, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #168" );
   }
   % template #169 is kocatan ale trade quest, say "yes"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_SAME,
         #cargolist = [ chess_trigger ],
         #timelimit = 2 * 60 )    % 2 minutes
   {
      send( self, @SetQuestNodeAssignHint, #index = 169, #new_hint = kocale_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 169, #new_hint = kocale_failure_2 );
   }
   else
   {
      debug( "Error building QN #169" );
   }
   % template #170 is kocatan ale trade quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMCLASS, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Goblet, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &StoutGoblet, 50 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &wineGoblet, 40 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &mug, 50 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 10 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &LongBow, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Arrow, 60 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArrow, 30 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &SilverArrow, 30 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &KaraholsCursePotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &HoldWand, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &FireRing, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ColdRing, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ShockRing, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &AcidRing, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistMagicPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistPoisonPotion, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &ResistShockPotion, 1 ] ] ],
         #penaltylist = [ [ QN_PRIZETYPE_OUTLAW ], [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_VIGOR, -20, 7] ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBartender ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 170, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 170, #new_hint = kocale_assign_3 );
      send( self, @SetQuestNodeSuccessHint, #index = 170, #new_hint = kocale_success_3 );
      send( self, @SetQuestNodeFailureHint, #index = 170, #new_hint = kocale_failure_3 );
   }
   else
   {
      debug( "Error building QN #170" );
   }

   % template #171 is necro warning quest 2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ letter_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 171, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #171" );
   }
   % template #172 is necro warning quest 2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_NONE,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &NecromancerWarningLetter, 1 ] ],
         #timelimit = 2 * 3600 )    % 2 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KraananPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FarenPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ShalillePriestess ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &QorPriestess ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 172, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 172, #new_hint = necrowarning2_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 172, #new_hint = necrowarning2_success_2 );
      send( self, @SetQuestNodeFailureHint, #index = 172, #new_hint = necrowarning2_failure_2 );
   }
   else
   {
      debug( "Error building QN #172" );
   }
   % template #173 is necro warning quest 2
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP, #NPC_modifier = QN_NPCMOD_PREVIOUS,
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1200 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1400 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1600 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &VampireWand, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &VampireWand, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Prism, 1 ] ] ],
         #timelimit = 4 * 3600 )    % 4 hours
   {
      send( self, @SetQuestNodeSuccessHint, #index = 173, #new_hint = necrowarning2_success_3 );
   }
   else
   {
      debug( "Error building QN #173" );
   }

   % template #174 is the warletter quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ warletter_trigger1 ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TwoCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ThreeCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &fourCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueVaultman ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 174, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #174" );
   }
   
   % template #175 is warletter quest
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM, #NPC_modifier = QN_NPCMOD_DIFFERENT,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &WarLetter, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 2000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Longsword, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &VampireWand, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 5 ] ],
                        [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 2000 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &Longsword, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Gauntlet, 1 ],
                        [ QN_PRIZETYPE_ITEMCLASS, &InkyCap, 5 ] ] ],
         #timelimit = 3 * 3600 )    % 3 hrs
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TwoCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ThreeCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &fourCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &FiveCouncilor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueVaultman ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 175, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 175, #new_hint = warletter_assign );
      send( self, @SetQuestNodeSuccessHint, #index = 175, #new_hint = warletter_success );
      send( self, @SetQuestNodeFailureHint, #index = 175, #new_hint = warletter_failure );
   }
   else
   {
      debug( "Error building QN #175" );
   }

   % template #176 is potion ID quest kickoff, "need a courier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ identify_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CornothGrocer ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothSergeant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBanker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionElder ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnKeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 176, #new_NPC_list = lNPCs);
   }
   else
   {
      debug( "Error building QN #176" );
   }
   % template #177 is potion ID quest, deliver the mystery potion
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &MysteryPotion, 1 ] ],
         #timelimit = 6 * 3600 ) % time limit is 6 hours
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 177, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 177, #new_hint = potion_identify_assign_1 );
      send( self, @SetQuestNodeFailureHint, #index = 177, #new_hint = potion_identify_failure_1 );
   }
   else
   {
      debug( "Error building QN #177" );
   }
   % template #178 is potion ID quest, come back and give the labeled potion
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &LabeledPotion, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ],
                          [ QN_PRIZETYPE_ITEMCLASS, &MeatPie, 4 ], [ QN_PRIZETYPE_ITEMCLASS, &Cheese, 3 ],
                          [ QN_PRIZETYPE_ITEMCLASS, &ShortSword, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Hammer, 1 ] ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 178, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 178, #new_hint = potion_identify_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 178, #new_hint = potion_identify_success );
      send( self, @SetQuestNodeFailureHint, #index = 178, #new_hint = potion_identify_failure_2 );
   }
   else
   {
      debug( "Error building QN #178" );
   }

   % template #179 is wand ID quest kickoff, "need a courier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ identify_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Barloquetailor ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CornothGrocer ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperMerchant ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBlacksmith ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionElder ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 179, #new_NPC_list = lNPCs);
   }
   else
   {
      debug( "Error building QN #179" );
   }
   % template #180 is wand ID quest, deliver the mystery potion
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &MysteryWand, 1 ] ],
         #timelimit = 6 * 3600 ) % time limit is 6 hours
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 180, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 180, #new_hint = wand_identify_assign_1 );
      send( self, @SetQuestNodeFailureHint, #index = 180, #new_hint = wand_identify_failure_1 );
   }
   else
   {
      debug( "Error building QN #180" );
   }
   % template #181 is wand ID quest, come back and give the labeled potion
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEM,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &LabeledWand, 1 ] ],
         #prizelist = [ [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 1000 ], [ QN_PRIZETYPE_ITEMCLASS, &Money, 1500 ],
                          [ QN_PRIZETYPE_ITEMCLASS, &MeatPie, 4 ], [ QN_PRIZETYPE_ITEMCLASS, &Cheese, 3 ],
                          [ QN_PRIZETYPE_ITEMCLASS, &ShortSword, 1 ], [ QN_PRIZETYPE_ITEMCLASS, &Hammer, 500 ] ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 181, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 181, #new_hint = wand_identify_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 181, #new_hint = wand_identify_success );
      send( self, @SetQuestNodeFailureHint, #index = 181, #new_hint = wand_identify_failure_2 );
   }
   else
   {
      debug( "Error building QN #181" );
   }

   % template #182 is Princess's Murder Mystery quest kickoff, "murder"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ murder_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &PrincessLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 182, #new_NPC_list = lNPCs);
   }
   else
   {
      debug( "Error building QN #182" );
   }
   % template #183 is Princess's Murder Mystery quest, "deliver" the trigger.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ murder_trigger ],
         #timelimit = 6 * 3600 ) % time limit is 6 hours
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBartender )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueVaultMan )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueTailor )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueMerchant )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothSergeant )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBlacksmith )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BasicInnKeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &OneCouncilor )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 183, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 183, #new_hint = murder_princess_assign );
   }
   else
   {
      debug( "Error building QN #183" );
   }
   lCargo  = [ murder_jonas_w_1, murder_jonas_w_2, murder_jonas_w_3, murder_jonas_w_4, murder_jonas_w_5,
               murder_jonas_m_1, murder_jonas_m_2, murder_jonas_m_3, murder_jonas_m_4, murder_jonas_m_5,
               murder_jonas_c_1, murder_jonas_c_2, murder_jonas_c_3, murder_jonas_c_4, murder_jonas_c_5,
               murder_akardius_w_1, murder_akardius_w_2, murder_akardius_w_3, murder_akardius_w_4, murder_akardius_w_5,
               murder_akardius_m_1, murder_akardius_m_2, murder_akardius_m_3, murder_akardius_m_4, murder_akardius_m_5 ];
   lCargo2 = [ murder_akardius_c_1, murder_akardius_c_2, murder_akardius_c_3, murder_akardius_c_4, murder_akardius_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #184 is Princess's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 184, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 184, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 184, #new_hint = murder_princess_success );
   }
   else
   {
      debug( "Error building QN #184" );
   }
   lCargo  = [ murder_miriana_w_1, murder_miriana_w_2, murder_miriana_w_3, murder_miriana_w_4, murder_miriana_w_5,
               murder_miriana_m_1, murder_miriana_m_2, murder_miriana_m_3, murder_miriana_m_4, murder_miriana_m_5,
               murder_miriana_c_1, murder_miriana_c_2, murder_miriana_c_3, murder_miriana_c_4, murder_miriana_c_5,
               murder_lich_w_1, murder_lich_w_2, murder_lich_w_3, murder_lich_w_4, murder_lich_w_5,
               murder_lich_m_1, murder_lich_m_2, murder_lich_m_3, murder_lich_m_4, murder_lich_m_5 ];
   lCargo2 = [ murder_lich_c_1, murder_lich_c_2, murder_lich_c_3, murder_lich_c_4, murder_lich_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #185 is Princess's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 185, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 185, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 185, #new_hint = murder_princess_success );
   }
   else
   {
      debug( "Error building QN #185" );
   }
   lCargo  = [ murder_maleval_w_1, murder_maleval_w_2, murder_maleval_w_3, murder_maleval_w_4, murder_maleval_w_5,
               murder_maleval_m_1, murder_maleval_m_2, murder_maleval_m_3, murder_maleval_m_4, murder_maleval_m_5,
               murder_maleval_c_1, murder_maleval_c_2, murder_maleval_c_3, murder_maleval_c_4, murder_maleval_c_5,
               murder_roq_w_1, murder_roq_w_2, murder_roq_w_3, murder_roq_w_4, murder_roq_w_5,
               murder_roq_m_1, murder_roq_m_2, murder_roq_m_3, murder_roq_m_4, murder_roq_m_5 ];
   lCargo2 = [ murder_roq_c_1, murder_roq_c_2, murder_roq_c_3, murder_roq_c_4, murder_roq_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #186 is Princess's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 186, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 186, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 186, #new_hint = murder_princess_success );
   }
   else
   {
      debug( "Error building QN #186" );
   }

   % template #187 is Duke's Murder Mystery quest kickoff, "murder"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ murder_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &DukeLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 187, #new_NPC_list = lNPCs);
   }
   else
   {
      debug( "Error building QN #185" );
   }
   % template #188 is Duke's Murder Mystery quest, "deliver" the trigger.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ murder_trigger ],
         #timelimit = 6 * 3600 ) % time limit is 6 hours
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBartender )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBanker )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueVaultMan )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CornothInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBlacksmith )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBanker )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &ThreeCouncilor )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TwoCouncilor )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 188, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 188, #new_hint = murder_duke_assign );
   }
   else
   {
      debug( "Error building QN #188" );
   }
   lCargo  = [ murder_jonas_w_1, murder_jonas_w_2, murder_jonas_w_3, murder_jonas_w_4, murder_jonas_w_5,
               murder_jonas_m_1, murder_jonas_m_2, murder_jonas_m_3, murder_jonas_m_4, murder_jonas_m_5,
               murder_jonas_c_1, murder_jonas_c_2, murder_jonas_c_3, murder_jonas_c_4, murder_jonas_c_5,
               murder_princess_w_1, murder_princess_w_2, murder_princess_w_3, murder_princess_w_4, murder_princess_w_5,
               murder_princess_m_1, murder_princess_m_2, murder_princess_m_3, murder_princess_m_4, murder_princess_m_5 ];
   lCargo2 = [ murder_princess_c_1, murder_princess_c_2, murder_princess_c_3, murder_princess_c_4, murder_princess_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #189 is Duke's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 189, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 189, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 189, #new_hint = murder_duke_success );
   }
   else
   {
      debug( "Error building QN #189" );
   }
   lCargo  = [ murder_miriana_w_1, murder_miriana_w_2, murder_miriana_w_3, murder_miriana_w_4, murder_miriana_w_5,
               murder_miriana_m_1, murder_miriana_m_2, murder_miriana_m_3, murder_miriana_m_4, murder_miriana_m_5,
               murder_miriana_c_1, murder_miriana_c_2, murder_miriana_c_3, murder_miriana_c_4, murder_miriana_c_5,
               murder_lich_w_1, murder_lich_w_2, murder_lich_w_3, murder_lich_w_4, murder_lich_w_5,
               murder_lich_m_1, murder_lich_m_2, murder_lich_m_3, murder_lich_m_4, murder_lich_m_5 ];
   lCargo2 = [ murder_lich_c_1, murder_lich_c_2, murder_lich_c_3, murder_lich_c_4, murder_lich_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #190 is Duke's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 190, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 190, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 190, #new_hint = murder_duke_success );
   }
   else
   {
      debug( "Error building QN #190" );
   }
   lCargo  = [ murder_maleval_w_1, murder_maleval_w_2, murder_maleval_w_3, murder_maleval_w_4, murder_maleval_w_5,
               murder_maleval_m_1, murder_maleval_m_2, murder_maleval_m_3, murder_maleval_m_4, murder_maleval_m_5,
               murder_maleval_c_1, murder_maleval_c_2, murder_maleval_c_3, murder_maleval_c_4, murder_maleval_c_5,
               murder_roq_w_1, murder_roq_w_2, murder_roq_w_3, murder_roq_w_4, murder_roq_w_5,
               murder_roq_m_1, murder_roq_m_2, murder_roq_m_3, murder_roq_m_4, murder_roq_m_5 ];
   lCargo2 = [ murder_roq_c_1, murder_roq_c_2, murder_roq_c_3, murder_roq_c_4, murder_roq_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #191 is Duke's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 500 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 191, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 191, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 191, #new_hint = murder_duke_success );
   }
   else
   {
      debug( "Error building QN #191" );
   }

   % template #192 is Jonas's Murder Mystery quest kickoff, "murder"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ murder_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &RebelLiege ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 192, #new_NPC_list = lNPCs);
   }
   else
   {
      debug( "Error building QN #192" );
   }
   % template #193 is Jonas's Murder Mystery quest, "deliver" the trigger.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ murder_trigger ],
         #timelimit = 6 * 3600 ) % time limit is 6 hours
   {
      lNPCs = $;
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueApothecary )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BarloqueVaultMan )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBlacksmith )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosApothecary )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper )),lNPCs);
      lNPCs = cons(first(send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &BasicInnKeeper )),lNPCs);
      send( self, @SetQuestNodeNPCList, #index = 193, #new_NPC_list = lNPCs );
      send( self, @SetQuestNodeAssignHint, #index = 193, #new_hint = murder_jonas_assign );
   }
   else
   {
      debug( "Error building QN #193" );
   }
   lCargo  = [ murder_princess_w_1, murder_princess_w_2, murder_princess_w_3, murder_princess_w_4, murder_princess_w_5,
               murder_princess_m_1, murder_princess_m_2, murder_princess_m_3, murder_princess_m_4, murder_princess_m_5,
               murder_princess_c_1, murder_princess_c_2, murder_princess_c_3, murder_princess_c_4, murder_princess_c_5,
               murder_akardius_w_1, murder_akardius_w_2, murder_akardius_w_3, murder_akardius_w_4, murder_akardius_w_5,
               murder_akardius_m_1, murder_akardius_m_2, murder_akardius_m_3, murder_akardius_m_4, murder_akardius_m_5 ];
   lCargo2 = [ murder_akardius_c_1, murder_akardius_c_2, murder_akardius_c_3, murder_akardius_c_4, murder_akardius_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #194 is Jonas's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 194, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 194, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 194, #new_hint = murder_jonas_success );
   }
   else
   {
      debug( "Error building QN #194" );
   }
   lCargo  = [ murder_miriana_w_1, murder_miriana_w_2, murder_miriana_w_3, murder_miriana_w_4, murder_miriana_w_5,
               murder_miriana_m_1, murder_miriana_m_2, murder_miriana_m_3, murder_miriana_m_4, murder_miriana_m_5,
               murder_miriana_c_1, murder_miriana_c_2, murder_miriana_c_3, murder_miriana_c_4, murder_miriana_c_5,
               murder_lich_w_1, murder_lich_w_2, murder_lich_w_3, murder_lich_w_4, murder_lich_w_5,
               murder_lich_m_1, murder_lich_m_2, murder_lich_m_3, murder_lich_m_4, murder_lich_m_5 ];
   lCargo2 = [ murder_lich_c_1, murder_lich_c_2, murder_lich_c_3, murder_lich_c_4, murder_lich_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #195 is Jonas's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 195, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 195, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 195, #new_hint = murder_jonas_success );
   }
   else
   {
      debug( "Error building QN #195" );
   }
   lCargo  = [ murder_maleval_w_1, murder_maleval_w_2, murder_maleval_w_3, murder_maleval_w_4, murder_maleval_w_5,
               murder_maleval_m_1, murder_maleval_m_2, murder_maleval_m_3, murder_maleval_m_4, murder_maleval_m_5,
               murder_maleval_c_1, murder_maleval_c_2, murder_maleval_c_3, murder_maleval_c_4, murder_maleval_c_5,
               murder_roq_w_1, murder_roq_w_2, murder_roq_w_3, murder_roq_w_4, murder_roq_w_5,
               murder_roq_m_1, murder_roq_m_2, murder_roq_m_3, murder_roq_m_4, murder_roq_m_5 ];
   lCargo2 = [ murder_roq_c_1, murder_roq_c_2, murder_roq_c_3, murder_roq_c_4, murder_roq_c_5,
               murder_random_w_1, murder_random_m_1, murder_random_c_1 ];
   for i in lCargo2
   {
      lCargo = cons(i, lCargo);
   }
   % template #196 is Jonas's Murder Mystery quest, come back and give the info
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = lCargo,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &Money, 400 ] ],
         #timelimit = 3 * 3600 ) % time limit is 3 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 196, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 196, #new_hint = murder_say );
      send( self, @SetQuestNodeSuccessHint, #index = 196, #new_hint = murder_jonas_success );
   }
   else
   {
      debug( "Error building QN #196" );
   }

   % template #197 is 1st Rebel loyalty node, say "loyalty" to Jonas
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ duke_standard1_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 197,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
                     #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &RebelLiege ) );
   }
   else
   {
      debug( "Error building QN #197" );
   }
   % template # 198 is 2nd Rebel Loyalty node, bring an item to Jonas
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_ITEMFINDCLASS,\
            #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &SimpleHelm, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Knightshield, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Gauntlet, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &LongSword, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &MysticSword, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Scimitar, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &NeruditeSword, 1 ] ],\
            #prizelist = [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_UPDATE ],
                          [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_REBEL_SERVICE ] ],
            #penaltylist = [ [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_NEUTRAL ] ] ],
            #timelimit = 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 198, #new_hint = rebel_standard2_assign);
      send( self, @SetQuestNodeSuccessHint, #index = 198, #new_hint = rebel_standard2_success );
      send( self, @SetQuestNodeFailureHint, #index = 198, #new_hint = rebel_standard2_failure );
   }
   else
   {
      debug( "Error building QN #198" );
   }

   % template #199 is 1st Rebel Join node, say "join" to Jonas
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ duke_join1_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 199,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
                     #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &RebelLiege ) );
   }
   else
   {
      debug( "Error building QN #199" );
   }
   % template # 200 is 2nd Rebel Join node, bring an item to Jonas
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_ITEMFINDCLASS,\
            #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &PlateArmor, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &SimpleHelm, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Knightshield, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Gauntlet, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &MysticSword, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Scimitar, 1 ],\
		           [ QN_PRIZETYPE_ITEMCLASS, &Scimitar, 1 ] ],\
            #prizelist = [ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_REBEL ] ],
            #timelimit = 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 200, #new_hint = rebel_join2_assign);
      send( self, @SetQuestNodeSuccessHint, #index = 200, #new_hint = rebel_join2_success );
      send( self, @SetQuestNodeFailureHint, #index = 200, #new_hint = rebel_join2_failure );
   }
   else
   {
      debug( "Error building QN #200" );
   }

   % template #201 is Jala necklack kickoff
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ jala_necklace_trigger ] )
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &Minstrel ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 201, #new_NPC_list = lNPCs );
   }
   else
   {
      debug( "Error building QN #201" );
   }
   % template #202 is visiting Moxal
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ jala_necklace_trigger ],
         #timelimit = 6 * 3600 )  % time limit is 6 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 202, #new_NPC_list = lNPCs );

      send( self, @SetQuestNodeAssignHint, #index = 202, #new_hint = jala_necklace_assign_1 );
      send( self, @SetQuestNodeFailureHint, #index = 202, #new_hint = jala_necklace_failure_1 );
   }
   else
   {
      debug( "Error building QN #202" );
   }
   % template #203 is visiting an Innkeeper or Barkeep
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ jala_necklace_trigger_2 ],
         #timelimit = 6 * 3600 )  % time limit is 6 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperBartender ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &TosInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &CorNothInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionBartender ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 203, #new_NPC_list = lNPCs );

      send( self, @SetQuestNodeAssignHint, #index = 203, #new_hint = jala_necklace_assign_2 );
      send( self, @SetQuestNodeFailureHint, #index = 203, #new_hint = jala_necklace_failure_2 );
   }
   else
   {
      debug( "Error building QN #203" );
   }
   % template #204 is visiting an Elder/Wiseman for backup.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ jala_necklace_trigger_3 ],
         #timelimit = 6 * 3600 )  % time limit is 6 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanWeaponsMaster ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanBowMaker ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &PrincessLiege ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &MarionHealer ) { lNPCs = cons( oNPC, lNPCs );}
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &JasperElder ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 204, #new_NPC_list = lNPCs );

      send( self, @SetQuestNodeAssignHint, #index = 204, #new_hint = jala_necklace_assign_3 );
      send( self, @SetQuestNodeFailureHint, #index = 204, #new_hint = jala_necklace_failure_3 );
   }
   else
   {
      debug( "Error building QN #204" );
   }
   % template #205 is heading back to the Innkeeper or Barkeep.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE,
         #cargolist = [ jala_necklace_trigger_4 ],
         #timelimit = 6 * 3600 )  % time limit is 6 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 205, #new_mod = QN_NPCMOD_PREVIOUS );
      send( self, @SetQuestNodeAssignHint, #index = 205, #new_hint = jala_necklace_assign_4 );
      send( self, @SetQuestNodeFailureHint, #index = 205, #new_hint = jala_necklace_failure_4 );
   }
   else
   {
      debug( "Error building QN #205" );
   }
   % template #206 is brining in the Lute.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_ITEMFINDCLASS,
         #cargolist = [ [ QN_PRIZETYPE_ITEMCLASS, &Lute, 1 ] ],
         #timelimit = 6 * 3600 )  % time limit is 6 hours
   {
      send( self, @SetQuestNodeNPCModifier, #index = 206, #new_mod = QN_NPCMOD_SAME );
      send( self, @SetQuestNodeAssignHint, #index = 206, #new_hint = jala_necklace_assign_5 );
      send( self, @SetQuestNodeFailureHint, #index = 206, #new_hint = jala_necklace_failure_5 );
   }
   else
   {
      debug( "Error building QN #206" );
   }
   % template #207 is heading to Moxal and getting our final reward.
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_SHOWUP,
         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &JalaNecklace, 1 ] ],
         #timelimit = 6 * 3600 )  % time limit is 6 hours
   {
      lNPCs = $;
      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = &KocatanInnkeeper ) { lNPCs = cons( oNPC, lNPCs );}
      send( self, @SetQuestNodeNPCList, #index = 207, #new_NPC_list = lNPCs );

      send( self, @SetQuestNodeAssignHint, #index = 207, #new_hint = jala_necklace_assign_6 );
      send( self, @SetQuestNodeSuccessHint, #index = 207, #new_hint = jala_necklace_success );
      send( self, @SetQuestNodeFailureHint, #index = 207, #new_hint = jala_necklace_failure_6 );
   }
   else
   {
      debug( "Error building QN #207" );
   }

   % template #208 is 1st Duke Soldier Shield quest, say "soldier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ faction_soldier_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 208,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
                     #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &DukeLiege ) );
   }
   else
   {
      debug( "Error building QN #208" );
   }
   % template #209 is 2nd Duke Soldier Shield quest, kill first faction soldier
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_MONSTER,\
            #monsterlist = [ &RebelTroop ],\
            #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 209, #new_hint = duke_faction_soldier_assign_1 );
      send( self, @SetQuestNodeFailureHint, #index = 209, #new_hint = duke_faction_soldier_failure );
   }
   else
   {
      debug( "Error building QN #209" );
   }
   % template #210 is 3rd Duke Soldier Shield quest, kill second faction soldier
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_MONSTER,\
            #monsterlist = [ &PrincessTroop ],\
            #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &DukeShield, 1 ] ],
            #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 210, #new_hint = duke_faction_soldier_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 210, #new_hint = duke_faction_soldier_success );
      send( self, @SetQuestNodeFailureHint, #index = 210, #new_hint = duke_faction_soldier_failure );
   }
   else
   {
      debug( "Error building QN #210" );
   }

   % template #211 is 1st Princess Soldier Shield quest, say "soldier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ faction_soldier_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 211,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
                     #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &PrincessLiege ) );
   }
   else
   {
      debug( "Error building QN #211" );
   }
   % template #212 is 2nd Princess Soldier Shield quest, kill first faction soldier
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_MONSTER,\
            #monsterlist = [ &DukeTroop ],\
            #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 212, #new_hint = princess_faction_soldier_assign_1 );
      send( self, @SetQuestNodeFailureHint, #index = 212, #new_hint = princess_faction_soldier_failure );
   }
   else
   {
      debug( "Error building QN #212" );
   }
   % template #213 is 3rd Princess Soldier Shield quest, kill second faction soldier
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_MONSTER,\
            #monsterlist = [ &RebelTroop ],\
            #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &PrincessShield, 1 ] ],
            #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 213, #new_hint = princess_faction_soldier_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 213, #new_hint = princess_faction_soldier_success );
      send( self, @SetQuestNodeFailureHint, #index = 213, #new_hint = princess_faction_soldier_failure );
   }
   else
   {
      debug( "Error building QN #213" );
   }

   % template #214 is 1st Rebel Soldier Shield quest, say "soldier"
   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #cargolist = [ faction_soldier_trigger ] )
   {
      send( self, @SetQuestNodeNPCList, #index = 214,
            #new_NPC_list = send( send( SYS, @GetLibrary ), @GetOccupationList,
                     #iJob = MOB_ROLE_ROYALTY, #cNPC_class = &RebelLiege ) );
   }
   else
   {
      debug( "Error building QN #214" );
   }
   % template #215 is 2nd Rebel Soldier Shield quest, kill first faction soldier
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_MONSTER,\
            #monsterlist = [ &PrincessTroop ],\
            #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 215, #new_hint = rebel_faction_soldier_assign_1 );
      send( self, @SetQuestNodeFailureHint, #index = 215, #new_hint = rebel_faction_soldier_failure );
   }
   else
   {
      debug( "Error building QN #215" );
   }
   % template #216 is 3rd Rebel Soldier Shield quest, kill second faction soldier
   if send( self, @AddQuestNodeTemplate,\
            #NPC_modifier = QN_NPCMOD_SAME,\
            #questnode_type = QN_TYPE_MONSTER,\
            #monsterlist = [ &DukeTroop ],\
            #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &RebelShield, 1 ] ],
            #timelimit = 3 * 3600 )
   {
      send( self, @SetQuestNodeAssignHint, #index = 216, #new_hint = rebel_faction_soldier_assign_2 );
      send( self, @SetQuestNodeSuccessHint, #index = 216, #new_hint = rebel_faction_soldier_success );
      send( self, @SetQuestNodeFailureHint, #index = 216, #new_hint = rebel_faction_soldier_failure );
   }
   else
   {
      debug( "Error building QN #216" );
   }



%   % template # is  quest
%   if send( self, @AddQuestNodeTemplate, #questnode_type = QN_TYPE_MESSAGE, #NPC_modifier = QN_NPCMOD_NONE,
%         #cargolist = [  ],
%         #prizelist = [ [ QN_PRIZETYPE_ITEMCLASS, &, 1 ] ],
%         #penaltylist = [ [QN_PRIZETYPE_BOON, QN_PRIZE_BOON_INTELLECT , -6, 2 ] ],
%         #timelimit =  )    %
%   {
%      lNPCs = $;
%      for oNPC in send( send( SYS, @GetLibrary ), @GetOccupationList, #cNPC_class = & ) { lNPCs = cons( oNPC, lNPCs );}
%      send( self, @SetQuestNodeNPCList, #index = , #new_NPC_list = lNPCs );
%      send( self, @SetQuestNodeAssignHint, #index = , #new_hint =  );
%      send( self, @SetQuestNodeSuccessHint, #index = , #new_hint =  );
%      send( self, @SetQuestNodeFailureHint, #index = , #new_hint =  );
%   }
%   else
%   {
%      debug( "Error building QN #" );
%   }


   % resume if suspended
   send( self, @Suspend, #resume = 1 );

   % start timer
   ptQuestTimer = CreateTimer( self, @OnQuestTimer, 2000 );
   %send(self, @OnQuestTimer);

   % schedule faction loyalty quests up to max
   i = 0;
   iMax = Nth( send(self,@GetQuestTemplate,#index=QST_ID_PRINCESS_SERVICE), QT_MAX_NUM_ACTIVE );
   while i < iMax {
      i = i + 1;
      send(self,@ScheduleQuest,#index = QST_ID_PRINCESS_SERVICE, #override=TRUE);
   }
   i = 0;
   iMax = Nth( send(self,@GetQuestTemplate,#index=QST_ID_DUKE_SERVICE), QT_MAX_NUM_ACTIVE );
   while i < iMax {
      i = i + 1;
      send(self,@ScheduleQuest,#index = QST_ID_DUKE_SERVICE, #override=TRUE);
   }

   return;
}

%% AddQuestNodeTemplate:
%	Adds a new questnode template to plQuestNodeTemplates
%	Returns index number of new questnode template if successful, 0 otherwise
%	Creates new permanent strings, if successful.
%
	% QuestNodeTemplate is
	%	[	NPC list,
	%		NPC modifier,
	%		questnode type,
	%		cargo list,
	%		monster list,
	%		prizelist,
	%		penaltylist,
	%		assign hint,
	%		success hint,
	%		failure hint
	%		time limit	]
%%
AddQuestNodeTemplate(NPC_modifier = $,
	             questnode_type = $,
	             cargolist = $,
	             monsterlist = $,
	             prizelist = $, 
	             penaltylist = $,
	             timelimit = 0 )
{
	% Validity checks

	local NPC, lThisQuestNodeTemplate, iThisQNTIndex;

	% NPC modifier must be valid
	if( NPC_modifier = $ )
	{
		NPC_modifier = piDefaultNPCModifier;
	}
	if( ( NPC_modifier < QN_NPCMOD_NONE ) OR ( NPC_modifier > QN_NPCMOD_DIFFERENT ) )
	{
		return 0;
	}

	% Questnode type must be valid
	if( questnode_type = $ )
	{
		questnode_type = piDefaultQuestNodeType;
	}
	if( ( questnode_type < QN_TYPE_MESSAGE ) OR ( questnode_type > QN_TYPE_MONSTER_ITEMCLASS ) )
	{
		return 0;
	}

	% Cargolist must be valid
	if( cargolist = $ )
	{
		cargolist = [];
	}

	% Monsterlist must be valid
	if( monsterlist = $ )
	{
		monsterlist = [];
	}

	% Prizelist must be valid
	if( prizelist = $ )
	{
		prizelist = [];
	}

	% Time limit must be valid
	if( timelimit = 0 )
	{
		timelimit = piDefaultTimeLimit;
	}

	% Penaltylist must be valid
	if( penaltylist = $ )
	{
		penaltylist = [];
	}

	lThisQuestNodeTemplate = [ plDefaultNPCList, NPC_modifier, questnode_type,\
		cargolist, monsterlist, prizelist, penaltylist, CreateString(), CreateString(), CreateString(), timelimit ];

	%	Can only add to front of list
	plQuestNodeTemplates = Cons( lThisQuestNodeTemplate, plQuestNodeTemplates );

	iThisQNTIndex = Length( plQuestNodeTemplates );

	send( self, @SetQuestNodeNPCList, #index = iThisQNTIndex );
	send( self, @SetQuestNodeAssignHint, #index = iThisQNTIndex );
	send( self, @SetQuestNodeSuccessHint, #index = iThisQNTIndex );
	send( self, @SetQuestNodeFailureHint, #index = iThisQNTIndex );

	return iThisQNTIndex;
}

%% GetQuestNodeNPCModifier()
%	return the NPC modifier from a quest node template
%%
GetQuestNodeNPCModifier( index = $ )
{
	return Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_NPC_MODIFIER );
}

%% GetQuestNodeType( index )
%	Retrieves a questnode type by index number
%	Returns type if successful, $ otherwise
%%
GetQuestNodeType( index = 0 )
{
	return Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_TYPE );
}

GetQuestNodeAssignHint( index = 0 )
{
	return Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_ASSIGN_HINT );
}

GetQuestNodeSuccessHint( index = 0 )
{
	return Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_SUCCESS_HINT );
}

GetQuestNodeFailureHint( index = 0 )
{
	return Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_FAILURE_HINT );
}

%% GetQuestNodeTemplate()
%	Retrieves a questnode template by index number, counting from *end* of list,
%	since we can only add to the front of a list (yuk).
%	The alternative is to give each questnode a name, but that would lead to garbage collection hell.
%	Don't you love this cheesy language?
%	Index numbers begin with 1.
%	Returns template if successful, $ otherwise
%%
GetQuestNodeTemplate( index = 0 )
{
	if( ( index < 1 ) OR ( index > Length( plQuestNodeTemplates ) ) )
	{
		return $;
	}
	return Nth( plQuestNodeTemplates, Length( plQuestNodeTemplates ) + 1 - index );
}

%% IsValidQuestNodeTemplate()
%	Returns 1 if index refers to a valid quest node template, 0 otherwise
%%
IsValidQuestNodeTemplate( index = 0 )
{
	if( index < 1 )
	{
		return 0;
	}
	if( Length( plQuestNodeTemplates ) < index )
	{
		return 0;
	}

	return 1;
}

%% GetRandomNPCFromQuestNodeTemplate( index )
%	Retrieves a random NPC from the list in questnode template #index
%	Does not check NPC modifier -- check it before deciding to call this
%	Returns NPC if successful, $ otherwise
%%
GetRandomNPCFromQuestNodeTemplate( index = 0, not_NPC = $ )
{
	local lNPCList, oNPC;

	lNPCList = Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_NPC_LIST );

	if( lNPCList = $ )
	{
           DEBUG("Nil NPC list, QN:",index);
		return $;
	}
	oNPC = Nth( lNPCList, Random( 1, Length( lNPCList ) ) );
	if( not_NPC = $ )
	{
		return oNPC;
	}
	while( ( oNPC = not_NPC ) AND ( lNPCList <> $ ) )
	{
		lNPCList = DelListElem( lNPCList, oNPC );
		if Length( lNPCList ) = 0 { DEBUG("Disallowed all NPCs listed, so no NPC to choose!  QN:",index);  return $; }
		oNPC = Nth( lNPCList, Random( 1, Length( lNPCList ) ) );
	}
	if( lNPCList <> $ )
	{
		return oNPC;
	}
	return $;
}

%% GetRandomCargoFromQuestNodeTemplate( index )
%	Retrieves a random cargo from the list in questnode template #index
%	Returns cargo if successful, $ otherwise
%%
GetRandomCargoFromQuestNodeTemplate( index = 0 )
{
	local lCargoList;

	lCargoList = Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_CARGO_LIST );
	if( lCargoList = $ )
	{
		return $;
	}
	return Nth( lCargoList, Random( 1, Length( lCargoList ) ) );
}

%% GetRandomPrizeFromQuestNodeTemplate( index )
%	Retrieves a random prize from the list in questnode template #index
%	Returns prize if successful, $ otherwise
%%
GetRandomPrizeFromQuestNodeTemplate( index = 0 )
{
	local lPrizeList, i, prize, retVal;

	lPrizeList = Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_PRIZE_LIST );
	if( lPrizeList = $ )
	{
		return $;
	}
   retVal = $;
   i = length(lPrizelist);
	while i > 0 {
           prize = nth(lPrizelist, i);
           if isList(first(prize)) {                                      % if the prize is actually a list of prizes,
              retVal = cons(nth(prize,random(1,length(prize))),retVal);   %  pick one randomly
   	}
   	else {
              retVal = cons(prize,retVal);
   	}
           i=i-1;
	}
	return retVal;
}

%% GetRandomPenaltyFromQuestNodeTemplate( index )
%	Retrieves a random penalty from the list in questnode template #index
%	Returns penalty if successful, $ otherwise
%%
GetRandomPenaltyFromQuestNodeTemplate( index = 0 )
{
	local lPenaltyList, i, penalty, retVal;

	lPenaltyList = Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_PENALTY_LIST );
	if( lPenaltyList = $ )
	{
		return $;
	}
   retVal = $;
   i = length(lPenaltyList);
	while i > 0 {
           penalty = nth(lPenaltyList, i);
           if isList(first(penalty)) {                                      % if the prize is actually a list of prizes,
              retVal = cons(nth(penalty,random(1,length(penalty))),retVal);   %  pick one randomly
   	}
   	else {
              retVal = cons(penalty,retVal);
   	}
           i=i-1;
	}
	return retVal;
}

%% GetRandomMonsterFromQuestNodeTemplate( index )
%	Retrieves a random monster class from the list in questnode template #index
%	Returns monster class if successful, $ otherwise
%%
GetRandomMonsterFromQuestNodeTemplate( index = 0 )
{
	local lQNTemplate, lMonsterList;

	lQNTemplate = send( self, @GetQuestNodeTemplate, #index = index);
	lMonsterList = Nth( lQNTemplate, QNT_MONSTER_LIST );
	if( lMonsterList = $ )
	{
		return $;
	}

	return Nth( lMonsterList, Random( 1, Length( lMonsterList ) ) );
}

GetQuestNodeTimeLimit( index = 0 )
{
	return Nth( send( self, @GetQuestNodeTemplate, #index = index), QNT_TIME_LIMIT );
}

%% SetQuestNodeNPCList:
%	Set the NPC_list of QNT #index to new_NPC_list
%	Resets NPC_list to plDefaultNPCList if new_NPC_list is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeNPCList( index = 0, new_NPC_list = $ )
{
   local oNPC;

   if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
   {
      return 0;
   }

   % NPC's must be listeners and receivers and not quest prohibited
   for oNPC in new_NPC_list
   {  
      if( ( ( Send( oNPC, @GetAttributes ) & ( MOB_RECEIVE | MOB_LISTEN ) ) = 0 )
       OR ( Send( oNPC, @GetAttributes ) & MOB_NOQUEST ) )
      {
%         debug( "SetQuestNodeNPCList #",index );
%         debug( "Invalid NPC - ignored",oNPC );
         new_NPC_list = DelListElem( new_NPC_list, oNPC );
      }
   }

   if( new_NPC_list = $ )
   {
      return 0;
   }
   SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_NPC_LIST, new_NPC_list );
   return 1;
}

%% SetQuestNodeNPCModifier:
%	Set the NPCModifier of QNT #index to the new_mod
%	Resets NPCModifier to default if new_mod is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeNPCModifier( index = 0, new_mod = $ )
{
	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( ( new_mod < QN_NPCMOD_NONE ) OR ( new_mod > QN_NPCMOD_DIFFERENT ) )
	{
		return 0;
	}
	if( new_mod = $ )
	{
		new_mod = piDefaultNPCModifier;
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_NPC_MODIFIER, new_mod );

	return 1;
}

%% SetQuestNodeType:
%	Set the Type of QNT #index to the new_type
%	Resets Type to default if new_type is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeType( index = 0, new_type = $ )
{
	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( ( new_type < QN_TYPE_MESSAGE ) OR ( new_type > QN_TYPE_MONSTER_ITEMCLASS ) )
	{
		return 0;
	}
	if( new_type = $ )
	{
		new_type = piDefaultQuestNodeType;
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_TYPE, new_type );

	return 1;
}

%% SetQuestNodeCargoList:
%	Set the CargoList of QNT #index to new_cargo_list
%	No checking of list is done!
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeCargoList( index = 0, new_cargo_list = $ )
{
	local oNPC;

	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}

	% no checking of list!
	if( new_cargo_list = $ )
	{
		new_cargo_list = [];
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_CARGO_LIST, new_cargo_list );

	return 1;
}

%% SetQuestNodeMonsterList:
%	Set the MonsterList of QNT #index to new_monster_list
%	No checking of list is done!
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeMonsterList( index = 0, new_monster_list = $ )
{
	local oNPC;

	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}

	% no checking of list!
	if( new_monster_list = $ )
	{
		new_monster_list = [];
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_MONSTER_LIST, new_monster_list );

	return 1;
}
%% SetQuestNodePrizeList:
%	Set the PrizeList of QNT #index to new_prize_list
%	No checking of list is done!
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodePrizeList( index = 0, new_prize_list = $ )
{
	local oNPC;

	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}

	% no checking of list!
	if( new_prize_list = $ )
	{
		new_prize_list = [];
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_PRIZE_LIST, new_prize_list );

	return 1;
}

%% SetQuestNodePenaltyList:
%	Set the PenaltyList of QNT #index to new_penalty_list
%	No checking of list is done!
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodePenaltyList( index = 0, new_penalty_list = $ )
{
	local oNPC;

	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}

	% no checking of list!
	if( new_penalty_list = $ )
	{
		new_penalty_list = [];
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_PENALTY_LIST, new_penalty_list );

	return 1;
}

%% SetQuestNodeAssignHint:
%	Set the assign_hint of QNT #index to the string new_hint
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeAssignHint( index = 0, new_hint = $ )
{
   if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
   {
   	return 0;
   }
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Happyland text subs
   if not send(SYS,@IsPKAllowed)
   {
      if new_hint = sporeburstlearn_assign_2 { new_hint = sporeburstlearn_assign_2_h; }
      if new_hint = sporeburstlearn_assign_3 { new_hint = sporeburstlearn_assign_3_h; }
      if new_hint = barrestock_assign_3 { new_hint = barrestock_assign_3_h; }
      if new_hint = catering_assign_3 { new_hint = catering_assign_3_h; }
      if new_hint = apothecary_assign_2 { new_hint = apothecary_assign_2_h; }
      if new_hint = ore_assign_2 { new_hint = ore_assign_2_h; }
      if new_hint = vaulttax_assign_2 { new_hint = vaulttax_assign_2_h; }
      if new_hint = merchanttax_assign_2 { new_hint = merchanttax_assign_2_h; }
      if new_hint = latetax_assign_2 { new_hint = latetax_assign_2_h; }
      if new_hint = kocweapon_assign_2 { new_hint = kocweapon_assign_2_h; }
      if new_hint = kocweapon_assign_3 { new_hint = kocweapon_assign_3_h; }
      if new_hint = kocale_assign_2 { new_hint = kocale_assign_2_h; }
      if new_hint = kocale_assign_3 { new_hint = kocale_assign_3_h; }
   }
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%

   % no checking of hint!
   if( new_hint = $ )
   {
       SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_ASSIGN_HINT, $ );
       return 1;
   }
   if( send( self, @GetQuestNodeAssignHint, #index = index ) = $ )
   {
      SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_ASSIGN_HINT, CreateString() );
   }
   SetString( send( self, @GetQuestNodeAssignHint, #index = index ), new_hint );

	return 1;
}

%% SetQuestNodeSuccessHint:
%	Set the success_hint of QNT #index to the string new_hint
%	Resets success_hint to default_success_hint if new_hint is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeSuccessHint( index = 0, new_hint = $ )
{
	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Happyland text subs
   if not send(SYS,@IsPKAllowed)
   {
      if new_hint = sporeburstlearn_success_3 { new_hint = sporeburstlearn_success_3_h; }
   }
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%

	if( new_hint = $ )
	{
            SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_SUCCESS_HINT, $ );
            return 1;
         }
         if( send( self, @GetQuestNodeSuccessHint, #index = index ) = $ )
         {
            SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_SUCCESS_HINT, CreateString() );
         }

	SetString( send( self, @GetQuestNodeSuccessHint, #index = index ), new_hint );

	return 1;
}

%% SetQuestNodeFailureHint:
%	Set the failure_hint of QNT #index to the string new_hint
%	Resets failure_hint to default_failure_hint if new_hint is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeFailureHint( index = 0, new_hint = $ )
{
	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Happyland text subs
   if not send(SYS,@IsPKAllowed)
   {
      if new_hint = barrestock_failure_3 { new_hint = barrestock_failure_3_h; }
      if new_hint = catering_failure_3 { new_hint = catering_failure_3_h; }
      if new_hint = apothecary_failure_2 { new_hint = apothecary_failure_2_h; }
      if new_hint = ore_failure_2 { new_hint = ore_failure_2_h; }
      if new_hint = vaulttax_failure_2 { new_hint = vaulttax_failure_2_h; }
      if new_hint = merchanttax_failure_2 { new_hint = vaulttax_failure_2_h; }
      if new_hint = latetax_failure_2 { new_hint = latetax_failure_2_h; }
      if new_hint = kocweapon_failure_3 { new_hint = kocweapon_failure_3_h; }
      if new_hint = kocale_failure_3 { new_hint = kocale_failure_3_h; }
   }
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%

	if( new_hint = $ )
	{
            SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_FAILURE_HINT, $ );
            return 1;
         }
         if( send( self, @GetQuestNodeFailureHint, #index = index ) = $ )
         {
            SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_FAILURE_HINT, CreateString() );
         }
	SetString( send( self, @GetQuestNodeFailureHint, #index = index ), new_hint );

	return 1;
}

%	Set the TimeLimit of QNT #index to the new_limit
%	Resets TimeLimit to default if new_limit is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodeTimeLimit( index = 0, new_limit = $ )
{
	if( send( self, @IsValidQuestNodeTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( new_limit < 0 )
	{
		return 0;
	}
	if( new_limit = $ )
	{
		new_limit = piDefaultTimeLimit;
	}

	SetNth( send( self, @GetQuestNodeTemplate, #index = index), QNT_TIME_LIMIT, new_limit );

	return 1;
}

%% AddQuestTemplate:
%	Adds a new quest template to plQuestTemplates
%	Returns index number of new quest template if successful, 0 otherwise
%	Will be scheduled next timer fire, if successful.
%
	% QuestTemplate is
	%	[	number of players,
	%		type of quest,
	%		eligible player restrictions,
	%		quest nodes,
	%		max number active,
	%		currently active quests,
	%		percent chance of scheduling (on timer firing)
	%     special restrictions]
%%
AddQuestTemplate(	num_players = $,
					quest_type = $,
					player_restrict = $,
					player_restrict2 = $,
					nodes = $,
					max_active = $, 
					schedule_pct = $ )
{
	% Validity checks

	local iNodeIndex, lThisQuestTemplate, iThisQNTIndex;

	% num_players must be valid
	if( num_players = $ )
	{
		num_players = piDefaultNumPlayers;
	}
	if( ( num_players < 1 ) OR ( num_players > QUEST_MAX_NUM_PLAYERS ) )
	{
		return 0;
	}

	% Quest type must be valid
	if( quest_type = $ )
	{
		quest_type = piDefaultQuestType;
	}
	if( ( quest_type < Q_TYPE_COMPETITIVE ) OR ( quest_type > Q_TYPE_COLLECTIVE ) )
	{
		return 0;
	}

	% player_restrict must be valid
	if( player_restrict = $ )
	{
		player_restrict = piDefaultPlayerRestrict;
	}
	if( ( player_restrict < 0 ) OR ( player_restrict > Q_PLAYER_FACTION_OUT ) )
	{
		return 0;
	}

	% nodes must be valid -- set these up first
	if( nodes = $ )
	{
		nodes = plDefaultQuestNodes;
	}
	for iNodeIndex in nodes
	{
		if( NOT send( self, @IsValidQuestNodeTemplate, #index = iNodeIndex ) )
		{
			return 0;
		}
	}

	% max_active must be valid
	if( max_active = $ )
	{
		max_active = piDefaultMaxNumberActive;
	}

	% schedule_pct must be valid
	if( schedule_pct = $ )
	{
		schedule_pct = piDefaultRescheduleChance;
	}
	if( ( schedule_pct < 0 ) OR ( schedule_pct > 100 ) )
	{
		return 0;
	}

	lThisQuestTemplate = [ num_players, quest_type,	player_restrict,\
							nodes, max_active, [], schedule_pct, player_restrict2 ];

	%	Can only add to front of list
	plQuestTemplates = Cons( lThisQuestTemplate, plQuestTemplates );

	return Length( plQuestNodeTemplates );
}

%% IsValidQuestTemplate()
%	Returns 1 if index refers to a valid quest template, 0 otherwise
%%
IsValidQuestTemplate( index = 0 )
{
	if( Length( plQuestTemplates ) < index ) or (index < 1)
	{
		return 0;
	}

	return 1;
}

%% GetQuestTemplate()
%	Retrieves a quest template by index number, counting from *end* of list,
%	since we can only add to the front of a list (yuk).
%	The alternative is to give each quest a name, but that would lead to garbage collection hell.
%	Don't you love this cheesy language?
%	Index numbers begin with 1.
%	Returns template if successful, $ otherwise
%%
GetQuestTemplate( index = 0 )
{
	if( ( index < 1 ) OR ( index > Length( plQuestTemplates ) ) )
	{
		return $;
	}
	return Nth( plQuestTemplates, Length( plQuestTemplates ) + 1 - index );
}

%% SetQuestNumPlayers()
%	Set the NumPlayers of QT #index to the new_num
%	Resets NumPlayers to default if new_num is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNumPlayers( index = 0, new_num = $ )
{
	if( send( self, @IsValidQuestTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( new_num = $ )
	{
		new_num = piDefaultNumPlayers;
	}
	if( ( new_num < 1 ) OR ( new_num > QUEST_MAX_NUM_PLAYERS ) )
	{
		return 0;
	}

	SetNth( send( self, @GetQuestTemplate, #index = index), QT_NUM_PLAYERS, new_num );

	return 1;
}

%% SetQuestType()
%	Set the Type of QT #index to the new_type
%	Resets Type to default if new_type is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestType( index = 0, new_type = $ )
{
	if( send( self, @IsValidQuestTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( new_type = $ )
	{
		new_type = piDefaultQuestType;
	}
	if( ( new_type < Q_TYPE_COMPETITIVE ) OR ( new_type > Q_TYPE_COLLECTIVE ) )
	{
		return 0;
	}

	SetNth( send( self, @GetQuestTemplate, #index = index), QT_QUEST_TYPE, new_type );

	return 1;
}

%% SetQuestNodesList()
%	Set the NodesList of QT #index to the new_list
%	Resets NodesList to default if new_list is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestNodesList( index = 0, new_list = $ )
{
	local iNodeIndex;
	if( send( self, @IsValidQuestTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( new_list = $ )
	{
		new_list = plDefaultQuestNodes;
	}
	for iNodeIndex in new_list
	{
		if( NOT send( self, @IsValidQuestNodeTemplate, #index = iNodeIndex ) )
		{
			return 0;
		}
	}

	SetNth( send( self, @GetQuestTemplate, #index = index), QT_QUEST_NODES, new_list );

	return 1;
}

%% SetQuestMaxActive()
%	Set the MaxActive of QT #index to the new_max
%	Resets MaxActive to default if new_max is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestMaxActive( index = 0, new_max = $ )
{
	if( send( self, @IsValidQuestTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( new_max = $ )
	{
		new_max = piDefaultMaxNumberActive;
	}
	if( ( new_max < 0 ) OR ( new_max > QUEST_MAX_MAX_ACTIVE ) )
	{
		return 0;
	}

	SetNth( send( self, @GetQuestTemplate, #index = index), QT_MAX_NUM_ACTIVE, new_max );

	return 1;
}

%% SetQuestScheduleChance()
%	Set the ScheduleChance of QT #index to the new_pct
%	Resets ScheduleChance to default if new_pct is nil
%	Returns 1 if successful, 0 otherwise
%%
SetQuestScheduleChance( index = 0, new_pct = $ )
{
	if( send( self, @IsValidQuestTemplate, #index = index ) = FALSE )
	{
		return 0;
	}
	if( new_pct = $ )
	{
		new_pct = piDefaultRescheduleChance;
	}
	if( ( new_pct < 0 ) OR ( new_pct > 100 ) )
	{
		return 0;
	}

	SetNth( send( self, @GetQuestTemplate, #index = index), QT_SCHEDULE_CHANCE, new_pct );

	return 1;
}

%% CreateQuest()
%
%%
CreateQuest( quest_template = 1 )
{
	% Needs error-checking!

	local lQuestTemplate, oQuest, oFirstNode; 

	lQuestTemplate = send( self, @GetQuestTemplate, #index = quest_template );
	if( lQuestTemplate = $ )
	{
		return $;
	}

	% Create and initialize quest
	oQuest = Create( &QuestX );
	send( oQuest, @Init, #template_index = quest_template, #report = piDebug );

	% Add new quest to questtemplate's list of active quests
	send( self, @AddQuestToActiveList, #quest_template = quest_template, #new_quest = oQuest );
	return;
}

%% AddQuestToActiveList()
%	Add new quest to questtemplate's list of active quests
%%
AddQuestToActiveList( quest_template = $, new_quest = $ )
{
	local lActiveQuests;

	if( new_quest = $ )
	{
		return;
	}
	if( send( self, @IsValidQuestTemplate, #index = quest_template ) )
	{
		lActiveQuests = Nth( send( self, @GetQuestTemplate, #index = quest_template ), QT_ACTIVE_QUESTS );
		SetNth( send( self, @GetQuestTemplate, #index = quest_template ), QT_ACTIVE_QUESTS, cons( new_quest, lActiveQuests ) );
	}
	return;
}

%% RemoveQuestFromActiveList()
%	Remove finished quest from questtemplate's list of active quests
%%
RemoveQuestFromActiveList( quest_template = $, done_quest = $ )
{
	local lActiveQuests;

	if( done_quest = $ ) { return; }
	
	if( send( self, @IsValidQuestTemplate, #index = quest_template ) )
	{
		lActiveQuests = Nth( send( self, @GetQuestTemplate, #index = quest_template ), QT_ACTIVE_QUESTS );
		if FindListElem(lActiveQuests, done_quest) {
	           SetNth( send( self, @GetQuestTemplate, #index = quest_template ), QT_ACTIVE_QUESTS, DelListElem( lActiveQuests, done_quest ) );
		}
		else {
	           DEBUG("Questengine::RemoveQuestFromActiveList:  Couldn't find quest in activelist of quest type ",quest_template,"!");
		}
	}
	return;
}

%% GetNextQuestNode()
%	return the index of the next quest node in a quest's list
%%
GetNextQuestNode( quest_template = $, counter = 1 )
{
	if( Length( Nth( send( self, @GetQuestTemplate, #index = quest_template ), QT_QUEST_NODES ) ) < counter )
	{
		return $;
	}

	return Nth( Nth( send( self, @GetQuestTemplate, #index = quest_template ), QT_QUEST_NODES ), counter );
}

GetQuestPlayerRestrictions( index = $ )
{
	return Nth( send( self, @GetQuestTemplate, #index = index), QT_PLAYER_RESTRICT );
}
GetQuestPlayerRestrictions2( index = $ )
{
   if length(send( self, @GetQuestTemplate, #index = index)) >= QT_PLAYER_RESTRICT2 {
           return Nth( send( self, @GetQuestTemplate, #index = index), QT_PLAYER_RESTRICT2 );
	}
	return $;
}

GetDebugStatus()
{
   return piDebug;
}

GetQuestHistoryRecentTime()
{
   return piQuestHistoryRecentTime;
}

%% GetRandomChessMove()
%	return a string containing a random legal chess move
%%
GetRandomChessMove()
{
	local i, sChessMove;
	sChessMove = CreateString();

	% arbitrary: equal chance of a move or capture (no castling)
	i = Random( 1, 2 );
	if( i = 1 )
	{
		% move
		SetString( sChessMove, chess_move );
		StringSubstitute( sChessMove, chess_substring, Nth( plChessPieces, Random( 1, Length( plChessPieces ) ) ) );
		StringSubstitute( sChessMove, chess_substring, Nth( plChessPiecesFiles, Random( 1, Length( plChessPiecesFiles ) ) ) );
		StringSubstitute( sChessMove, chess_substring, Nth( plChessPiecesRanks, Random( 1, Length( plChessPiecesRanks ) ) ) );

		return sChessMove;
	}

	% (else) capture
	SetString( sChessMove, chess_capture );
	StringSubstitute( sChessMove, chess_substring, Nth( plChessPieces, Random( 1, Length( plChessPieces ) ) ) );
	StringSubstitute( sChessMove, chess_substring, Nth( plChessPiecesCaptured, Random( 1, Length( plChessPiecesCaptured ) ) ) );

	return sChessMove;
}

%% AddQuestNodeToAwaitingMonsterDeathList()
%	Add the quest node to the list of those waiting for a certain player to kill a certain type of monster
%%
AddQNToAwaitingMonsterDeathList( QN = $ )
{
	if( QN <> $ )
	{
		plQuestNodesAwaitingMonsterDeath = cons( QN, plQuestNodesAwaitingMonsterDeath );
	}
	
	return;
}		         

%% RemoveQuestNodeFromAwaitingMonsterDeathList()
%	Remove the quest node from the list of those waiting for a certain player to kill a certain type of monster
%%
RemoveQNFromAwaitingMonsterDeathList( QN = $ )
{
	if( QN = $ ) or (plQuestNodesAwaitingMonsterDeath=$) { return; }
	
	if FindListElem(plQuestNodesAwaitingMonsterDeath,QN )
	{
		plQuestNodesAwaitingMonsterDeath = DelListElem( plQuestNodesAwaitingMonsterDeath, QN );
	}
	%%  this actually gets called quite frequently, so leave out this debug for now.
	%else
	%{
	%   DEBUG("QuestEngine::RemoveQNFromAwaitingMonsterDeathList: Node of type ",send(QN,@GetQuestNodeTemplateIndex)," not found in plQuestNodesAwaitingMonsterDeath.");
	%}
	
	return;
}		         

%% MonsterKilled()
%	A player has just killed a monster.
%	Notify those quest nodes waiting for a certain player to kill a certain type of monster
%%
MonsterKilled( dead_monster = $, killing_player = $, corpse = $ )
{
	local QN;
	for QN in plQuestNodesAwaitingMonsterDeath
	{
		if( QN <> $ )
		{
			if( send( QN, @MonsterKilled, #dead_monster = dead_monster, #killing_player = killing_player, #corpse = corpse ) )
			{
				% found the questnode waiting for this player to kill this type of monster 
				send( self, @RemoveQNFromAwaitingMonsterDeathList, #QN = QN );
				return;	
			}
		}
	}
	return;
}		         

ManualSetoffQuestTimer()
{
   DeleteTimer( ptQuestTimer );
   send(self,@OnQuestTimer);
   return;
}

OnQuestTimer()
{
   local QTindex, iNumQT;

   %	DeleteTimer( ptQuestTimer );		% try removing this line -- damian
   ptQuestTimer = $;
   ptQuestTimer = CreateTimer( self, @OnQuestTimer, piQuestTimerDelay );
   if ptQuestDeadlineTimer = $ {
      ptQuestDeadlineTimer = CreateTimer(self, @OnQuestDeadlineTimer, piQuestDeadlineTimerDelay );
   }

   if( piActive = 0 )
   {
      return;
   }
   	
   % Check each quest to see if its deadline has passed.
   send(self,@CheckQuestDeadlines);

   % Check each quest template to see if another quest needs to be scheduled
   QTindex = 0;
   iNumQT = Length( plQuestTemplates );
   while( QTindex < iNumQT ) {
      QTindex = QTindex + 1;
      send(self,@ScheduleQuest,#index=QTindex);
   }         
   return;
}

ScheduleQuest(index=0, override=FALSE)
"Schedules a Quest if the cap hasn't been reached "
"Also does a QT_SCHEDULE_CHANCE die roll unless override=TRUE."
{
   local QT, lActiveQuests, QTindex, iActive, iMaxActive;
   
   QT = send(self,@GetQuestTemplate,#index=index);
   if QT = $ {return;}
   lActiveQuests = Nth( QT, QT_ACTIVE_QUESTS );
   iActive = Length( lActiveQuests );
   iMaxActive = Nth( QT, QT_MAX_NUM_ACTIVE );
%      debug( "Active ", iActive );
%      debug( "Max ", iMaxActive );
   if( iActive < iMaxActive )
   {
      % another one is allowed, so do the die roll
      if override or ( Random( 1, 100 ) < Nth(QT, QT_SCHEDULE_CHANCE) )
      {
         if piDebug 
         {
            debug( "Scheduling quest of type ", index );
         }
         send( self, @CreateQuest, #quest_template = index );
      }
   }
   return;
}

GetNumScheduled(index = 0)
{
   return length(Nth( send( self, @GetQuestTemplate, #index = index), QT_ACTIVE_QUESTS ));
}

OnQuestDeadlineTimer()
{
   ptQuestDeadlineTimer = $;
   send(self,@CheckQuestDeadlines);
   ptQuestDeadlineTimer = CreateTimer(self, @OnQuestDeadlineTimer, piQuestDeadlineTimerDelay );
   return;
}

CheckQuestDeadlines()
{
   local QT, Q, iTime;
   iTime = GetTime();

   for QT in plQuestTemplates {
      if( QT = $ ) {
         DEBUG( "Nil quest template!" );	% should delete it here xxxAJM: plQuestTemplates = DelListElem( plQuestTemplates, QT );
      }
      else {
         for Q in Nth( QT, QT_ACTIVE_QUESTS ) {
            if( Q = $ ) {
               DEBUG( "Nil quest!" );	% should delete it here xxxAJM
            }
            else {
               send( Q, @CheckDeadline, #time = iTime );
            }
         }
      }
   }
   return;
}

   %% Suspend()
   % suspends scheduling of quests and processing of deadlines
   % call with resume <> 0 to resume
   %%
   Suspend( resume = 0 )
   {
      if( resume = 0 )
      {
         debug( "Quest scheduling suspended." );
         piActive = 0;
      }
      else
      {
         debug( "Quest scheduling resumed." );
         piActive = 1;
      }
      return;
   }

   %% DeleteActiveQuests()
   % deletes all active quests
   %%
   DeleteActiveQuests()
   {
      local iQT, oQuest, iStatus, lOcc,oNPC;
      iStatus = piActive;
      if( iStatus )
      {
         send( self, @Suspend );
      }
      for iQT in plQuestTemplates
      {
         for oQuest in Nth( iQT, QT_ACTIVE_QUESTS )
         {
            send( oQuest, @Cancel );
         }
      }

      if( iStatus )
      {
         send( self, @Suspend, #resume = 1 );
      }
      return;
   }

%% ClearAllQuests()
%  This cancels all active quests, and strips the quest templates so NPC's can be rebuilt
%  It is called by RecreateAll, prior to rebuilding the templates with Recreate( #all = 1 )
%%
   ClearAllQuests()
   {
      send( self, @DeleteActiveQuests );
      send( self, @Suspend );
      plQuestTemplates = $;
      plDefaultNPCList = $;
      plQuestNodeTemplates = $;
      plQuestNodesAwaitingMonsterDeath = $;
      return;
   }

   QuestReport(who = $)
   {
      local iQ, oQ, sQuesters, bFirst, iAvailable, iAssigned, iUnassigned;
      if who = $
      {
         % find player named 'aphasia' and send it to her.
         return;
      }
      iQ = 1;
      while send(self,@IsValidQuestTemplate, #index=iQ) {
         iAvailable = 0;
         iUnassigned = 0;
         iAssigned = 0;
         ClearTempString();
         bFirst = TRUE;
         for oQ in nth(send(self,@GetQuestTemplate,#index=iQ),QT_ACTIVE_QUESTS) {
            iAvailable = iAvailable + 1;
            if send(oQ,@GetQuesters) = $ {
               iUnassigned = iUnassigned + 1;
            }
            else {
               iAssigned = iAssigned + 1;
               if not bFirst {
                  AppendTempString(questEngine_report_2);
               }
               else {
                  bFirst = FALSE;
               }
               AppendTempString(send(first(send(oQ,@GetQuesters)),@GetName));
            }
         }
         sQuesters = CreateString();
         setString(sQuesters,GetTempString());
         send(who,@receivenestedmail,#from=questEngine_report_sender,
               #dest_list=[who],
               #nest_list=[4,questEngine_report_1,
                           4,send(SYS,@IntToString,#num=iQ),
                           4,send(SYS,@IntToString,#num=iQ),
                           4,send(SYS,@IntToString,#num=iAvailable),
                           4,send(SYS,@IntToString,#num=iUnassigned),
                           4,send(SYS,@IntToString,#num=iAssigned),
                           4,sQuesters ]);
         if piDebug {
            debug("Quest ",iQ,": ",iAvailable," available; ",iUnassigned," unassigned and ",iAssigned," assigned.");
         }
         if piDebug > 1 {
            for oQ in nth(send(self,@GetQuestTemplate,#index=iQ),QT_ACTIVE_QUESTS) {
               if send(oQ,@GetQuesters) <> $ {
                  debug( "Quest of type ",iQ," assigned to ",send(first(send(oQ,@GetQuesters)),@GetName) );
               }
            }
         }
         iQ = iQ + 1;
      }

      return;      
   }

   CensusReport()
   "Prints summary information about quests to the debug log."
   {
      local iQT;
      iQT = 1;
      while send(self,@IsValidQuestTemplate,#index = iQT) {
         piCensusTallyDeleted = 0;
         piCensusTallyActive = 0;
         piCensusTallyActiveOrphaned = 0;
         piCensusTallyActiveDuplicate = 0;
         send(&QuestX,@CensusRespond,#index=iQT);
         debug("Quest Template ",iQT," has ",piCensusTallyActive," active quests and ",piCensusTallyDeleted," deleted quests.");
         if piCensusTallyActiveOrphaned <> 0 {
            debug("Quest Template ",iQT," has ",piCensusTallyActiveOrphaned,"orphaned active quests!");
         }
         if piCensusTallyActiveDuplicate <> 0 {
            debug("Quest Template ",iQT," has ",piCensusTallyActiveDuplicate,"duplicate active quests!");
         }
         iQT = iQT + 1;
      }
      return;
   }


   CensusCountDeleted()
   {
      piCensusTallyDeleted = piCensusTallyDeleted +1;
      return;
   }

   CensusCountActive(what=$)
   {
      local oQ, bFound;
      bFound = FALSE;
      for oQ in nth(send(self,@GetQuestTemplate,#index = send(what,@GetQuestTemplateIndex)),QT_ACTIVE_QUESTS) {
         if oQ = what {
            if not bFound {
               piCensusTallyActive = piCensusTallyActive +1;
               bFound = TRUE;
            }
            else {
               piCensusTallyActiveDuplicate = piCensusTallyActiveDuplicate + 1;
            }
         }
      }
      if not bFound {
         piCensusTallyActiveOrphaned = piCensusTallyActiveOrphaned + 1;
      }
      return;
   }

   Jumpstart()
   "A quick and dirty way to get things running again."
   {
      send(self,@Recreate);
      send(self,@RecreateQuestNodes);

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

